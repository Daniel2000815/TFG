{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMtextMixin = void 0;\n\nfunction CommonMtextMixin(Base) {\n  var _a;\n\n  return _a = function (_super) {\n    __extends(class_1, _super);\n\n    function class_1() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    class_1.prototype.getVariant = function () {\n      var options = this.jax.options;\n      var data = this.jax.math.outputData;\n      var merror = (!!data.merrorFamily || !!options.merrorFont) && this.node.Parent.isKind('merror');\n\n      if (!!data.mtextFamily || !!options.mtextFont || merror) {\n        var variant = this.node.attributes.get('mathvariant');\n        var font = this.constructor.INHERITFONTS[variant] || this.jax.font.getCssFont(variant);\n        var family = font[0] || (merror ? data.merrorFamily || options.merrorFont : data.mtextFamily || options.mtextFont);\n        this.variant = this.explicitVariant(family, font[2] ? 'bold' : '', font[1] ? 'italic' : '');\n        return;\n      }\n\n      _super.prototype.getVariant.call(this);\n    };\n\n    return class_1;\n  }(Base), _a.INHERITFONTS = {\n    normal: ['', false, false],\n    bold: ['', false, true],\n    italic: ['', true, false],\n    'bold-italic': ['', true, true]\n  }, _a;\n}\n\nexports.CommonMtextMixin = CommonMtextMixin;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,SAAgBA,gBAAhB,CAA+DC,IAA/D,EAAsE;;;EAEpE;IAAqBC;;IAAd;;IAsCN;;IApBWC,+BAAV;MACE,IAAMC,OAAO,GAAG,KAAKC,GAAL,CAASD,OAAzB;MACA,IAAME,IAAI,GAAG,KAAKD,GAAL,CAASE,IAAT,CAAcC,UAA3B;MAMA,IAAMC,MAAM,GAAI,CAAC,CAAC,CAACH,IAAI,CAACI,YAAP,IAAuB,CAAC,CAACN,OAAO,CAACO,UAAlC,KAAiD,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,MAAjB,CAAwB,QAAxB,CAAjE;;MACA,IAAI,CAAC,CAACR,IAAI,CAACS,WAAP,IAAsB,CAAC,CAACX,OAAO,CAACY,SAAhC,IAA6CP,MAAjD,EAAyD;QACvD,IAAMQ,OAAO,GAAG,KAAKL,IAAL,CAAUM,UAAV,CAAqBC,GAArB,CAAyB,aAAzB,CAAhB;QACA,IAAMC,IAAI,GAAI,KAAKC,WAAL,CAAyBC,YAAzB,CAAsCL,OAAtC,KAAkD,KAAKZ,GAAL,CAASe,IAAT,CAAcG,UAAd,CAAyBN,OAAzB,CAAhE;QACA,IAAMO,MAAM,GAAGJ,IAAI,CAAC,CAAD,CAAJ,KAAYX,MAAM,GAAGH,IAAI,CAACI,YAAL,IAAqBN,OAAO,CAACO,UAAhC,GACGL,IAAI,CAACS,WAAL,IAAoBX,OAAO,CAACY,SADjD,CAAf;QAEA,KAAKC,OAAL,GAAe,KAAKQ,eAAL,CAAqBD,MAArB,EAA6BJ,IAAI,CAAC,CAAD,CAAJ,GAAU,MAAV,GAAmB,EAAhD,EAAoDA,IAAI,CAAC,CAAD,CAAJ,GAAU,QAAV,GAAqB,EAAzE,CAAf;QACA;MACD;;MACDM,iBAAMC,UAAN,CAAgBC,IAAhB,CAAgB,IAAhB;IACD,CAlBS;;IAoBZ;EAAC,CAtCD,CAAqB3B,IAArB,GAQgB4B,kBAAe;IAC3BC,MAAM,EAAE,CAAC,EAAD,EAAK,KAAL,EAAY,KAAZ,CADmB;IAE3BC,IAAI,EAAE,CAAC,EAAD,EAAK,KAAL,EAAY,IAAZ,CAFqB;IAG3BC,MAAM,EAAE,CAAC,EAAD,EAAK,IAAL,EAAW,KAAX,CAHmB;IAI3B,eAAe,CAAC,EAAD,EAAK,IAAL,EAAW,IAAX;EAJY,CAR/B;AAwCD;;AA1CDC","names":["CommonMtextMixin","Base","__extends","class_1","options","jax","data","math","outputData","merror","merrorFamily","merrorFont","node","Parent","isKind","mtextFamily","mtextFont","variant","attributes","get","font","constructor","INHERITFONTS","getCssFont","family","explicitVariant","_super","getVariant","call","_a","normal","bold","italic","exports"],"sourceRoot":"","sources":["../../../../ts/output/common/Wrappers/mtext.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
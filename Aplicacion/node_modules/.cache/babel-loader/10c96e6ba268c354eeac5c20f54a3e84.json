{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonTeXFontMixin = void 0;\n\nfunction CommonTeXFontMixin(Base) {\n  var _a;\n\n  return _a = function (_super) {\n    __extends(class_1, _super);\n\n    function class_1() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    class_1.prototype.getDelimiterData = function (n) {\n      return this.getChar('-smallop', n) || this.getChar('-size4', n);\n    };\n\n    return class_1;\n  }(Base), _a.NAME = 'TeX', _a.defaultVariants = __spreadArray(__spreadArray([], __read(Base.defaultVariants), false), [['-smallop', 'normal'], ['-largeop', 'normal'], ['-size3', 'normal'], ['-size4', 'normal'], ['-tex-calligraphic', 'italic'], ['-tex-bold-calligraphic', 'bold-italic'], ['-tex-oldstyle', 'normal'], ['-tex-bold-oldstyle', 'bold'], ['-tex-mathit', 'italic'], ['-tex-variant', 'normal']], false), _a.defaultCssFonts = __assign(__assign({}, Base.defaultCssFonts), {\n    '-smallop': ['serif', false, false],\n    '-largeop': ['serif', false, false],\n    '-size3': ['serif', false, false],\n    '-size4': ['serif', false, false],\n    '-tex-calligraphic': ['cursive', true, false],\n    '-tex-bold-calligraphic': ['cursive', true, true],\n    '-tex-oldstyle': ['serif', false, false],\n    '-tex-bold-oldstyle': ['serif', false, true],\n    '-tex-mathit': ['serif', true, false]\n  }), _a.defaultSizeVariants = ['normal', '-smallop', '-largeop', '-size3', '-size4', '-tex-variant'], _a.defaultStretchVariants = ['-size4'], _a;\n}\n\nexports.CommonTeXFontMixin = CommonTeXFontMixin;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAAgBA,kBAAhB,CAKEC,IALF,EAKS;;;EAEP;IAAqBC;;IAAd;;IAyDN;;IAJWC,qCAAV,UAA2BC,CAA3B,EAAoC;MAClC,OAAO,KAAKC,OAAL,CAAa,UAAb,EAAyBD,CAAzB,KAA+B,KAAKC,OAAL,CAAa,QAAb,EAAuBD,CAAvB,CAAtC;IACD,CAFS;;IAIZ;EAAC,CAzDD,CAAqBH,IAArB,GAKgBK,UAAO,KALvB,EAUmBA,qBAAeC,uCAC3BN,IAAI,CAACO,eADsB,GACP,KADO,GACP,CACvB,CAAC,UAAD,EAAa,QAAb,CADuB,EAEvB,CAAC,UAAD,EAAa,QAAb,CAFuB,EAGvB,CAAC,QAAD,EAAW,QAAX,CAHuB,EAIvB,CAAC,QAAD,EAAW,QAAX,CAJuB,EAKvB,CAAC,mBAAD,EAAsB,QAAtB,CALuB,EAMvB,CAAC,wBAAD,EAA2B,aAA3B,CANuB,EAOvB,CAAC,eAAD,EAAkB,QAAlB,CAPuB,EAQvB,CAAC,oBAAD,EAAuB,MAAvB,CARuB,EASvB,CAAC,aAAD,EAAgB,QAAhB,CATuB,EAUvB,CAAC,cAAD,EAAiB,QAAjB,CAVuB,CADO,QAVlC,EA2BmBF,qBAAeG,sBAC3BR,IAAI,CAACS,eADsB,GACP;IACvB,YAAY,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,CADW;IAEvB,YAAY,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,CAFW;IAGvB,UAAU,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,CAHa;IAIvB,UAAU,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,CAJa;IAKvB,qBAAqB,CAAC,SAAD,EAAY,IAAZ,EAAkB,KAAlB,CALE;IAMvB,0BAA0B,CAAC,SAAD,EAAY,IAAZ,EAAkB,IAAlB,CANH;IAOvB,iBAAiB,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,CAPM;IAQvB,sBAAsB,CAAC,OAAD,EAAU,KAAV,EAAiB,IAAjB,CARC;IASvB,eAAe,CAAC,OAAD,EAAU,IAAV,EAAgB,KAAhB;EATQ,CADO,CA3BlC,EA2CmBJ,yBAAsB,CAAC,QAAD,EAAW,UAAX,EAAuB,UAAvB,EAAmC,QAAnC,EAA6C,QAA7C,EAAuD,cAAvD,CA3CzC,EAgDmBA,4BAAyB,CAAC,QAAD,CAhD5C;AA2DD;;AAlEDK","names":["CommonTeXFontMixin","Base","__extends","class_1","n","getChar","_a","__spreadArray","defaultVariants","__assign","defaultCssFonts","exports"],"sourceRoot":"","sources":["../../../../ts/output/common/fonts/tex.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
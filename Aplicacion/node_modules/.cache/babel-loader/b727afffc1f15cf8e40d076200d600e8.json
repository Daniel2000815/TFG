{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nexport var createCompareUnits = /* #__PURE__ */factory('compareUnits', ['typed'], function (_ref) {\n  var typed = _ref.typed;\n  return {\n    'Unit, Unit': typed.referToSelf(function (self) {\n      return function (x, y) {\n        if (!x.equalBase(y)) {\n          throw new Error('Cannot compare units with different base');\n        }\n\n        return typed.find(self, [x.valueType(), y.valueType()])(x.value, y.value);\n      };\n    })\n  };\n});","map":{"version":3,"names":["factory","createCompareUnits","_ref","typed","referToSelf","self","x","y","equalBase","Error","find","valueType","value"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/mathjs/lib/esm/function/relational/compareUnits.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nexport var createCompareUnits = /* #__PURE__ */factory('compareUnits', ['typed'], _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  return {\r\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\r\n      if (!x.equalBase(y)) {\r\n        throw new Error('Cannot compare units with different base');\r\n      }\r\n\r\n      return typed.find(self, [x.valueType(), y.valueType()])(x.value, y.value);\r\n    })\r\n  };\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,OAAO,IAAIC,kBAAkB,GAAG,eAAeD,OAAO,CAAC,cAAD,EAAiB,CAAC,OAAD,CAAjB,EAA4B,UAAAE,IAAI,EAAI;EACxF,IACEC,KADF,GAEID,IAFJ,CACEC,KADF;EAGA,OAAO;IACL,cAAcA,KAAK,CAACC,WAAN,CAAkB,UAAAC,IAAI;MAAA,OAAI,UAACC,CAAD,EAAIC,CAAJ,EAAU;QAChD,IAAI,CAACD,CAAC,CAACE,SAAF,CAAYD,CAAZ,CAAL,EAAqB;UACnB,MAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;QACD;;QAED,OAAON,KAAK,CAACO,IAAN,CAAWL,IAAX,EAAiB,CAACC,CAAC,CAACK,SAAF,EAAD,EAAgBJ,CAAC,CAACI,SAAF,EAAhB,CAAjB,EAAiDL,CAAC,CAACM,KAAnD,EAA0DL,CAAC,CAACK,KAA5D,CAAP;MACD,CANmC;IAAA,CAAtB;EADT,CAAP;AASD,CAbqD,CAA/C"},"metadata":{},"sourceType":"module"}
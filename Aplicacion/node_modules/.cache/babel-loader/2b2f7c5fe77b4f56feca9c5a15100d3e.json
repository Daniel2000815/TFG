{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.separate = exports.scientificToDecimal = exports.nroots = exports.isNumericSymbol = exports.isNegative = exports.isFraction = exports.getCoeffs = exports.decompose_fn = void 0;\nvar Groups_1 = require(\"../Types/Groups\");\nvar expand_1 = require(\"../Functions/Core/math/expand\");\nvar Core_1 = require(\"../Functions/Core\");\nvar Symbol_1 = require(\"../Types/Symbol\");\nvar Utils_1 = require(\"./Utils\");\nvar Settings_1 = require(\"../Settings\");\nvar Vector_1 = require(\"../Types/Vector\");\nvar Math2_1 = require(\"../Functions/Math2\");\nvar Parser_1 = require(\"../Parser/Parser\");\n/**\n * TODO: Pick a more descriptive name and better description\n * Breaks a function down into it's parts wrt to a variable, mainly coefficients\n * Example a*x^2+b wrt x\n * @param {Symbol} fn\n * @param {String} wrt\n * @param {boolean} as_obj\n */\nfunction decompose_fn(fn, wrt, as_obj) {\n  wrt = String(wrt); //convert to string\n  var ax, a, x, b;\n  if (fn.group === Groups_1.Groups.CP) {\n    var t = (0, expand_1.expand)(fn.clone()).stripVar(wrt);\n    ax = (0, Core_1.subtract)(fn.clone(), t.clone());\n    b = t;\n  } else {\n    ax = fn.clone();\n  }\n  a = ax.stripVar(wrt);\n  x = (0, Core_1.divide)(ax.clone(), a.clone());\n  b = b || new Symbol_1.Symbol(0);\n  if (as_obj) return {\n    a: a,\n    x: x,\n    ax: ax,\n    b: b\n  };\n  return [a, x, ax, b];\n}\nexports.decompose_fn = decompose_fn;\n/**\n * Returns the coefficients of a symbol given a variable. Given ax^2+b^x+c, it divides\n * each nth term by x^n.\n * @param {Symbol} symbol\n * @param {Symbol} wrt\n */\nfunction getCoeffs(symbol, wrt, info) {\n  var coeffs = [];\n  //we loop through the symbols and stick them in their respective\n  //containers e.g. y*x^2 goes to index 2\n  symbol.each(function (term) {\n    var coeff, p;\n    if (term.contains(wrt)) {\n      //we want only the coefficient which in this case will be everything but the variable\n      //e.g. a*b*x -> a*b if the variable to solve for is x\n      coeff = term.stripVar(wrt);\n      var x = (0, Core_1.divide)(term.clone(), coeff.clone());\n      p = x.power.toDecimal();\n    } else {\n      coeff = term;\n      p = 0;\n    }\n    var e = coeffs[p];\n    //if it exists just add it to it\n    coeffs[p] = e ? (0, Core_1.add)(e, coeff) : coeff;\n  }, true);\n  for (var i = 0; i < coeffs.length; i++) {\n    if (!coeffs[i]) coeffs[i] = new Symbol_1.Symbol(0);\n  }\n  //fill the holes\n  return coeffs;\n}\nexports.getCoeffs = getCoeffs;\n/**\n * Checks to see if a number or Symbol is a fraction\n * @param {Number|Symbol} num\n * @returns {boolean}\n */\nfunction isFraction(num) {\n  if ((0, Utils_1.isSymbol)(num)) return isFraction(num.multiplier.toDecimal());\n  return num % 1 !== 0;\n}\nexports.isFraction = isFraction;\n/**\n * @param {Number|Symbol} obj\n * @returns {boolean}\n */\nfunction isNegative(obj) {\n  if ((0, Utils_1.isSymbol)(obj)) {\n    obj = obj.multiplier;\n  }\n  return obj.lessThan(0);\n}\nexports.isNegative = isNegative;\n/**\n * Checks to see if a symbol is in group N\n * @param {Symbol} symbol\n */\nfunction isNumericSymbol(symbol) {\n  return symbol.group === Groups_1.Groups.N || symbol.group === Groups_1.Groups.P;\n}\nexports.isNumericSymbol = isNumericSymbol;\n/**\n * Gets nth roots of a number\n * @param {Symbol} symbol\n * @returns {Vector}\n */\nfunction nroots(symbol) {\n  var a, b;\n  if (symbol.group === Groups_1.Groups.FN && symbol.fname === '') {\n    a = Symbol_1.Symbol.unwrapPARENS((0, Parser_1.parse)(symbol).toLinear());\n    b = (0, Parser_1.parse)(symbol.power);\n  } else if (symbol.group === Groups_1.Groups.P) {\n    a = (0, Parser_1.parse)(symbol.value);\n    b = (0, Parser_1.parse)(symbol.power);\n  }\n  if (a && b && a.group === Groups_1.Groups.N && b.group === Groups_1.Groups.N && a.multiplier.isNegative()) {\n    var _roots2 = [];\n    var parts = Symbol_1.Symbol.toPolarFormArray((0, Utils_1.evaluate)(symbol));\n    var r = parts[0];\n    //var r = parse(a).abs().toString();\n    //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n    var x = (0, Core_1.arg)(a);\n    var n = b.multiplier.den.toString();\n    var p = b.multiplier.num.toString();\n    var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\n    for (var i = 0; i < n; i++) {\n      var t = (0, Utils_1.evaluate)((0, Parser_1.parse)((0, Utils_1.format)(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n      _roots2.push((0, Utils_1.evaluate)((0, Parser_1.parse)((0, Utils_1.format)(formula, r, n, Settings_1.Settings.IMAGINARY, t, p))));\n    }\n    return Vector_1.Vector.fromArray(_roots2);\n  } else if (symbol.isConstant(true, true)) {\n    var sign = symbol.sign();\n    var x = (0, Utils_1.evaluate)(symbol.abs());\n    var root = (0, Core_1.sqrt)(x);\n    var _roots = [root.clone(), root.negate()];\n    if (sign < 0) _roots = _roots.map(function (x) {\n      return (0, Core_1.multiply)(x, Symbol_1.Symbol.imaginary());\n    });\n  } else {\n    _roots = [(0, Parser_1.parse)(symbol)];\n  }\n  return Vector_1.Vector.fromArray(_roots);\n}\nexports.nroots = nroots;\n/**\n * Convert number from scientific format to decimal format\n * @param value\n */\nfunction scientificToDecimal(value) {\n  return Math2_1.Math2.scientificToDecimal(value);\n}\nexports.scientificToDecimal = scientificToDecimal;\n/**\n * Separates out the variables into terms of variabls.\n * e.g. x+y+x*y+sqrt(2)+pi returns\n * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\n * @param {type} symbol\n * @param {type} o\n * @returns {undefined}\n * @throws {Error} for expontentials\n */\nfunction separate(symbol, o) {\n  symbol = (0, expand_1.expand)(symbol);\n  o = o || {};\n  var insert = function insert(key, sym) {\n    if (!o[key]) o[key] = new Symbol_1.Symbol(0);\n    o[key] = (0, Core_1.add)(o[key], sym.clone());\n  };\n  symbol.each(function (x) {\n    if (x.isConstant('all')) {\n      insert('constants', x);\n    } else if (x.group === Groups_1.Groups.S) {\n      insert(x.value, x);\n    } else if (x.group === Groups_1.Groups.FN && (x.fname === Settings_1.Settings.ABS || x.fname === '')) {\n      separate(x.args[0]);\n    } else if (x.group === Groups_1.Groups.EX || x.group === Groups_1.Groups.FN) {\n      throw new Error('Unable to separate. Term cannot be a function!');\n    } else {\n      insert((0, Utils_1.isSymbol)(x) ? x.variables().join(' ') : '', x);\n    }\n  });\n  return o;\n}\nexports.separate = separate;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA,SAAgBA,YAAY,CAACC,EAAE,EAAEC,GAAG,EAAEC,MAAM;EACxCD,GAAG,GAAGE,MAAM,CAACF,GAAG,CAAC,CAAC,CAAC;EACnB,IAAIG,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC;EACf,IAAIP,EAAE,CAACQ,KAAK,KAAKC,eAAM,CAACC,EAAE,EAAE;IACxB,IAAIC,CAAC,GAAG,mBAAM,EAACX,EAAE,CAACY,KAAK,EAAE,CAAC,CAACC,QAAQ,CAACZ,GAAG,CAAC;IACxCG,EAAE,GAAG,mBAAQ,EAACJ,EAAE,CAACY,KAAK,EAAE,EAAED,CAAC,CAACC,KAAK,EAAE,CAAC;IACpCL,CAAC,GAAGI,CAAC;GACR,MACI;IACDP,EAAE,GAAGJ,EAAE,CAACY,KAAK,EAAE;;EAEnBP,CAAC,GAAGD,EAAE,CAACS,QAAQ,CAACZ,GAAG,CAAC;EACpBK,CAAC,GAAG,iBAAM,EAACF,EAAE,CAACQ,KAAK,EAAE,EAAEP,CAAC,CAACO,KAAK,EAAE,CAAC;EACjCL,CAAC,GAAGA,CAAC,IAAI,IAAIO,eAAM,CAAC,CAAC,CAAC;EACtB,IAAIZ,MAAM,EACN,OAAO;IACHG,CAAC,EAAEA,CAAC;IACJC,CAAC,EAAEA,CAAC;IACJF,EAAE,EAAEA,EAAE;IACNG,CAAC,EAAEA;GACN;EACL,OAAO,CAACF,CAAC,EAAEC,CAAC,EAAEF,EAAE,EAAEG,CAAC,CAAC;AACxB;AAtBAQ;AAwBA;;;;;;AAMA,SAAgBC,SAAS,CAACC,MAAM,EAAEhB,GAAG,EAAEiB,IAAI;EACvC,IAAIC,MAAM,GAAG,EAAE;EACf;EACA;EACAF,MAAM,CAACG,IAAI,CAAC,UAAUC,IAAI;IACtB,IAAIC,KAAK,EAAEC,CAAC;IAEZ,IAAIF,IAAI,CAACG,QAAQ,CAACvB,GAAG,CAAC,EAAE;MACpB;MACA;MACAqB,KAAK,GAAGD,IAAI,CAACR,QAAQ,CAACZ,GAAG,CAAC;MAC1B,IAAIK,CAAC,GAAG,iBAAM,EAACe,IAAI,CAACT,KAAK,EAAE,EAAEU,KAAK,CAACV,KAAK,EAAE,CAAC;MAC3CW,CAAC,GAAGjB,CAAC,CAACmB,KAAK,CAACC,SAAS,EAAE;KAC1B,MACI;MACDJ,KAAK,GAAGD,IAAI;MACZE,CAAC,GAAG,CAAC;;IAET,IAAII,CAAC,GAAGR,MAAM,CAACI,CAAC,CAAC;IACjB;IACAJ,MAAM,CAACI,CAAC,CAAC,GAAGI,CAAC,GAAG,cAAG,EAACA,CAAC,EAAEL,KAAK,CAAC,GAAGA,KAAK;EAEzC,CAAC,EAAE,IAAI,CAAC;EAER,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,MAAM,CAACU,MAAM,EAAED,CAAC,EAAE;IAClC,IAAI,CAACT,MAAM,CAACS,CAAC,CAAC,EACVT,MAAM,CAACS,CAAC,CAAC,GAAG,IAAId,eAAM,CAAC,CAAC,CAAC;EAAC;EAClC;EACA,OAAOK,MAAM;AACjB;AA7BAJ;AA+BA;;;;;AAKA,SAAgBe,UAAU,CAACC,GAAG;EAC1B,IAAI,oBAAQ,EAACA,GAAG,CAAC,EACb,OAAOD,UAAU,CAACC,GAAG,CAACC,UAAU,CAACN,SAAS,EAAE,CAAC;EACjD,OAAQK,GAAG,GAAG,CAAC,KAAK,CAAC;AACzB;AAJAhB;AAMA;;;;AAIA,SAAgBkB,UAAU,CAACC,GAAG;EAC1B,IAAI,oBAAQ,EAACA,GAAG,CAAC,EAAE;IACfA,GAAG,GAAGA,GAAG,CAACF,UAAU;;EAExB,OAAOE,GAAG,CAACC,QAAQ,CAAC,CAAC,CAAC;AAC1B;AALApB;AAOA;;;;AAIA,SAAgBqB,eAAe,CAACnB,MAAM;EAClC,OAAOA,MAAM,CAACT,KAAK,KAAKC,eAAM,CAAC4B,CAAC,IAAIpB,MAAM,CAACT,KAAK,KAAKC,eAAM,CAAC6B,CAAC;AACjE;AAFAvB;AAKA;;;;;AAKA,SAAgBwB,MAAM,CAACtB,MAAM;EACzB,IAAIZ,CAAC,EAAEE,CAAC;EAER,IAAIU,MAAM,CAACT,KAAK,KAAKC,eAAM,CAAC+B,EAAE,IAAIvB,MAAM,CAACwB,KAAK,KAAK,EAAE,EAAE;IACnDpC,CAAC,GAAGS,eAAM,CAAC4B,YAAY,CAAC,kBAAK,EAACzB,MAAM,CAAC,CAAC0B,QAAQ,EAAE,CAAC;IACjDpC,CAAC,GAAG,kBAAK,EAACU,MAAM,CAACQ,KAAK,CAAC;GAC1B,MACI,IAAIR,MAAM,CAACT,KAAK,KAAKC,eAAM,CAAC6B,CAAC,EAAE;IAChCjC,CAAC,GAAG,kBAAK,EAACY,MAAM,CAAC2B,KAAK,CAAC;IACvBrC,CAAC,GAAG,kBAAK,EAACU,MAAM,CAACQ,KAAK,CAAC;;EAG3B,IAAIpB,CAAC,IAAIE,CAAC,IAAKF,CAAC,CAACG,KAAK,KAAKC,eAAM,CAAC4B,CAAE,IAAI9B,CAAC,CAACC,KAAK,KAAKC,eAAM,CAAC4B,CAAC,IAAIhC,CAAC,CAAC2B,UAAU,CAACC,UAAU,EAAE,EAAE;IACvF,IAAIY,OAAM,GAAG,EAAE;IAEf,IAAIC,KAAK,GAAGhC,eAAM,CAACiC,gBAAgB,CAAC,oBAAQ,EAAC9B,MAAM,CAAC,CAAC;IACrD,IAAI+B,CAAC,GAAGF,KAAK,CAAC,CAAC,CAAC;IAEhB;IAEA;IACA,IAAIxC,CAAC,GAAG,cAAG,EAACD,CAAC,CAAC;IACd,IAAI4C,CAAC,GAAG1C,CAAC,CAACyB,UAAU,CAACkB,GAAG,CAACC,QAAQ,EAAE;IACnC,IAAI5B,CAAC,GAAGhB,CAAC,CAACyB,UAAU,CAACD,GAAG,CAACoB,QAAQ,EAAE;IAEnC,IAAIC,OAAO,GAAG,+CAA+C;IAE7D,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqB,CAAC,EAAErB,CAAC,EAAE,EAAE;MACxB,IAAIjB,CAAC,GAAG,oBAAQ,EAAC,kBAAK,EAAC,kBAAM,EAAC,0BAA0B,EAAEL,CAAC,EAAEsB,CAAC,EAAEqB,CAAC,CAAC,CAAC,CAAC,CAACjB,UAAU,CAACN,SAAS,EAAE;MAC3FmB,OAAM,CAACQ,IAAI,CAAC,oBAAQ,EAAC,kBAAK,EAAC,kBAAM,EAACD,OAAO,EAAEJ,CAAC,EAAEC,CAAC,EAAEK,mBAAQ,CAACC,SAAS,EAAE5C,CAAC,EAAEY,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEjF,OAAOiC,eAAM,CAACC,SAAS,CAACZ,OAAM,CAAC;GAClC,MACI,IAAI5B,MAAM,CAACyC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE;IACpC,IAAIC,IAAI,GAAG1C,MAAM,CAAC0C,IAAI,EAAE;IACxB,IAAIrD,CAAC,GAAG,oBAAQ,EAACW,MAAM,CAAC2C,GAAG,EAAE,CAAC;IAC9B,IAAIC,IAAI,GAAG,eAAI,EAACvD,CAAC,CAAC;IAElB,IAAIuC,MAAM,GAAG,CAACgB,IAAI,CAACjD,KAAK,EAAE,EAAEiD,IAAI,CAACC,MAAM,EAAE,CAAC;IAE1C,IAAIH,IAAI,GAAG,CAAC,EACRd,MAAM,GAAGA,MAAM,CAACkB,GAAG,CAAC,UAAUzD,CAAC;MAC3B,OAAO,mBAAQ,EAACA,CAAC,EAAEQ,eAAM,CAACkD,SAAS,EAAE,CAAC;IAC1C,CAAC,CAAC;GAET,MACI;IACDnB,MAAM,GAAG,CAAC,kBAAK,EAAC5B,MAAM,CAAC,CAAC;;EAG5B,OAAOuC,eAAM,CAACC,SAAS,CAACZ,MAAM,CAAC;AACnC;AAnDA9B;AAqDA;;;;AAIA,SAAgBkD,mBAAmB,CAACrB,KAAK;EACrC,OAAOsB,aAAK,CAACD,mBAAmB,CAACrB,KAAK,CAAC;AAC3C;AAFA7B;AAKA;;;;;;;;;AASA,SAAgBoD,QAAQ,CAAClD,MAAM,EAAEmD,CAAC;EAC9BnD,MAAM,GAAG,mBAAM,EAACA,MAAM,CAAC;EACvBmD,CAAC,GAAGA,CAAC,IAAI,EAAE;EAEX,IAAIC,MAAM,GAAG,SAATA,MAAM,CAAaC,GAAG,EAAEC,GAAG;IAC3B,IAAI,CAACH,CAAC,CAACE,GAAG,CAAC,EACPF,CAAC,CAACE,GAAG,CAAC,GAAG,IAAIxD,eAAM,CAAC,CAAC,CAAC;IAC1BsD,CAAC,CAACE,GAAG,CAAC,GAAG,cAAG,EAACF,CAAC,CAACE,GAAG,CAAC,EAAEC,GAAG,CAAC3D,KAAK,EAAE,CAAC;EACrC,CAAC;EAEDK,MAAM,CAACG,IAAI,CAAC,UAAUd,CAAC;IACnB,IAAIA,CAAC,CAACoD,UAAU,CAAC,KAAK,CAAC,EAAE;MACrBW,MAAM,CAAC,WAAW,EAAE/D,CAAC,CAAC;KACzB,MACI,IAAIA,CAAC,CAACE,KAAK,KAAKC,eAAM,CAAC+D,CAAC,EAAE;MAC3BH,MAAM,CAAC/D,CAAC,CAACsC,KAAK,EAAEtC,CAAC,CAAC;KACrB,MACI,IAAIA,CAAC,CAACE,KAAK,KAAKC,eAAM,CAAC+B,EAAE,KAAKlC,CAAC,CAACmC,KAAK,KAAKa,mBAAQ,CAACmB,GAAG,IAAInE,CAAC,CAACmC,KAAK,KAAK,EAAE,CAAC,EAAE;MAC5E0B,QAAQ,CAAC7D,CAAC,CAACoE,IAAI,CAAC,CAAC,CAAC,CAAC;KACtB,MACI,IAAIpE,CAAC,CAACE,KAAK,KAAKC,eAAM,CAACkE,EAAE,IAAIrE,CAAC,CAACE,KAAK,KAAKC,eAAM,CAAC+B,EAAE,EAAE;MACrD,MAAM,IAAIoC,KAAK,CAAC,gDAAgD,CAAC;KACpE,MACI;MACDP,MAAM,CAAC,oBAAQ,EAAC/D,CAAC,CAAC,GAAGA,CAAC,CAACuE,SAAS,EAAE,CAACC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAExE,CAAC,CAAC;;EAE7D,CAAC,CAAC;EAEF,OAAO8D,CAAC;AACZ;AA7BArD","names":["decompose_fn","fn","wrt","as_obj","String","ax","a","x","b","group","Groups_1","CP","t","clone","stripVar","Symbol_1","exports","getCoeffs","symbol","info","coeffs","each","term","coeff","p","contains","power","toDecimal","e","i","length","isFraction","num","multiplier","isNegative","obj","lessThan","isNumericSymbol","N","P","nroots","FN","fname","unwrapPARENS","toLinear","value","_roots","parts","toPolarFormArray","r","n","den","toString","formula","push","Settings_1","IMAGINARY","Vector_1","fromArray","isConstant","sign","abs","root","negate","map","imaginary","scientificToDecimal","Math2_1","separate","o","insert","key","sym","S","ABS","args","EX","Error","variables","join"],"sourceRoot":"","sources":["../../src/Core/Utils-js.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.text = void 0;\nvar bigInt_1 = __importDefault(require(\"../3rdparty/bigInt\"));\nvar Scientific_1 = __importDefault(require(\"../Types/Scientific\"));\nvar Settings_1 = require(\"../Settings\");\nvar Utils_1 = require(\"./Utils\");\nvar Groups_1 = require(\"../Types/Groups\");\n/**\n * This method will return a hash or a text representation of a Symbol, Matrix, or Vector.\n * If all else fails it *assumes* the object has a toString method and will call that.\n *\n * @param {Object} obj\n * @param {string | undefined} option get is as a hash\n * @param {int | undefined} useGroup\n * @param {int | undefined} decp\n * @returns {String}\n */\nfunction text(obj) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var useGroup = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  var decp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n  var asHash = option === 'hash',\n    //whether to wrap numbers in brackets\n    wrapCondition = undefined,\n    opt = asHash ? undefined : option,\n    asDecimal = opt === 'decimal' || opt === 'decimals';\n  if (asDecimal && typeof decp === 'undefined') decp = 16;\n  function toString(obj) {\n    switch (option) {\n      case 'decimals':\n      case 'decimal':\n        wrapCondition = wrapCondition || function (str) {\n          return false;\n        };\n        return obj.valueOf();\n      case 'recurring':\n        wrapCondition = wrapCondition || function (str) {\n          return str.indexOf(\"'\") !== -1;\n        };\n        var str = obj.toString();\n        //verify that the string is actually a fraction\n        var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n        if (frac.length === 0) return str;\n        //split the fraction into the numerator and denominator\n        var parts = frac[0].split('/');\n        var negative = false;\n        var m = Number(parts[0]);\n        if (m < 0) {\n          m = -m;\n          negative = true;\n        }\n        var n = Number(parts[1]);\n        if (!n) n = 1;\n        //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\n        var quotient = Math.floor(m / n),\n          c = 10 * (m - quotient * n);\n        quotient = quotient.toString() + \".\";\n        while (c && c < n) {\n          c *= 10;\n          quotient += \"0\";\n        }\n        var digits = \"\",\n          passed = [],\n          i = 0;\n        while (true) {\n          if (typeof passed[c] !== 'undefined') {\n            var prefix = digits.slice(0, passed[c]),\n              cycle = digits.slice(passed[c]),\n              result = quotient + prefix + \"'\" + cycle + \"'\";\n            return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\n          }\n          var q = Math.floor(c / n),\n            r = c - q * n;\n          passed[c] = i;\n          digits += q.toString();\n          i += 1;\n          c = 10 * r;\n        }\n      case 'mixed':\n        wrapCondition = wrapCondition || function (str) {\n          return str.indexOf('/') !== -1;\n        };\n        var str = obj.toString();\n        //verify that the string is actually a fraction\n        var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n        if (frac.length === 0) return str;\n        //split the fraction into the numerator and denominator\n        var parts = frac[0].split('/');\n        var numer = new bigInt_1.default(parts[0]);\n        var denom = new bigInt_1.default(parts[1]);\n        if (denom.equals(0)) denom = new bigInt_1.default(1);\n        //return the quotient plus the remainder\n        var divmod = numer.divmod(denom);\n        var quotient = divmod.quotient;\n        var remainder = divmod.remainder;\n        var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\n        return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : remainder.toString() + '/' + parts[1]);\n      case 'scientific':\n        wrapCondition = wrapCondition || function (str) {\n          return false;\n        };\n        return new Scientific_1.default(obj.valueOf()).toString(Settings_1.Settings.SCIENTIFIC_MAX_DECIMAL_PLACES);\n      default:\n        wrapCondition = wrapCondition || function (str) {\n          return str.indexOf('/') !== -1;\n        };\n        return obj.toString();\n    }\n  }\n  //if the object is a symbol\n  if ((0, Utils_1.isSymbol)(obj)) {\n    var multiplier = '',\n      power = '',\n      sign = '',\n      group = obj.group || useGroup,\n      value = obj.value;\n    //if the value is to be used as a hash then the power and multiplier need to be suppressed\n    if (!asHash) {\n      //use asDecimal to get the object back as a decimal\n      var om = toString(obj.multiplier);\n      if (om == '-1' && String(obj.multiplier) === '-1') {\n        sign = '-';\n        om = '1';\n      }\n      //only add the multiplier if it's not 1\n      if (om != '1') multiplier = om;\n      //use asDecimal to get the object back as a decimal\n      var p = obj.power ? toString(obj.power) : '';\n      //only add the multiplier\n      if (p != '1') {\n        //is it a symbol\n        if ((0, Utils_1.isSymbol)(p)) {\n          power = text(p, opt);\n        } else {\n          power = p;\n        }\n      }\n    }\n    switch (group) {\n      case Groups_1.Groups.N:\n        multiplier = '';\n        //round if requested\n        var m = decp && asDecimal ? obj.multiplier.toDecimal(decp) : toString(obj.multiplier);\n        //if it's numerical then all we need is the multiplier\n        value = String(obj.multiplier) == '-1' ? '1' : m;\n        power = '';\n        break;\n      case Groups_1.Groups.PL:\n        value = obj.collectSymbols().map(function (x) {\n          var txt = text(x, opt, useGroup, decp);\n          if (txt == '0') txt = '';\n          return txt;\n        }).sort().join('+').replace(/\\+\\-/g, '-');\n        break;\n      case Groups_1.Groups.CP:\n        value = obj.collectSymbols().map(function (x) {\n          var txt = text(x, opt, useGroup, decp);\n          if (txt == '0') txt = '';\n          return txt;\n        }).sort().join('+').replace(/\\+\\-/g, '-');\n        break;\n      case Groups_1.Groups.CB:\n        value = obj.collectSymbols(function (symbol) {\n          var g = symbol.group;\n          //both groups will already be in brackets if their power is greater than 1\n          //so skip it.\n          if ((g === Groups_1.Groups.PL || g === Groups_1.Groups.CP) && symbol.power.equals(1) && symbol.multiplier.equals(1)) {\n            return (0, Utils_1.inBrackets)(text(symbol, opt));\n          }\n          return text(symbol, opt);\n        }).join('*');\n        break;\n      case Groups_1.Groups.EX:\n        var pg = obj.previousGroup,\n          pwg = obj.power.group;\n        //Groups.PL are the exception. It's simpler to just collect and set the value\n        if (pg === Groups_1.Groups.PL) value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\n        if (!(pg === Groups_1.Groups.N || pg === Groups_1.Groups.S || pg === Groups_1.Groups.FN) && !asHash) {\n          value = (0, Utils_1.inBrackets)(value);\n        }\n        if ((pwg === Groups_1.Groups.CP || pwg === Groups_1.Groups.CB || pwg === Groups_1.Groups.PL || obj.power.multiplier.toString() != '1') && power) {\n          power = (0, Utils_1.inBrackets)(power);\n        }\n        break;\n    }\n    if (group === Groups_1.Groups.FN) {\n      value = obj.fname + (0, Utils_1.inBrackets)(obj.args.map(function (symbol) {\n        return text(symbol, opt);\n      }).join(','));\n    }\n    /*\n     FIXME: Currently there is no way to set CUSTOM_OPERATORS outside of core, is this code still needed?\n     //TODO: Needs to be more efficient. Maybe.\n    if (group === Groups.FN && obj.fname in CUSTOM_OPERATORS) {\n        var a = text(obj.args[0]);\n        var b = text(obj.args[1]);\n        if (obj.args[0].isComposite()) //preserve the brackets\n            a = inBrackets(a);\n        if (obj.args[1].isComposite()) //preserve the brackets\n            b = inBrackets(b);\n        value = a + deps.CUSTOM_OPERATORS[obj.fname] + b;\n    }\n     */\n    //wrap the power since / is less than ^\n    //TODO: introduce method call isSimple\n    if (power && group !== Groups_1.Groups.EX && wrapCondition(power)) {\n      power = (0, Utils_1.inBrackets)(power);\n    }\n    //the following groups are held together by plus or minus. They can be raised to a power or multiplied\n    //by a multiplier and have to be in brackets to preserve the order of precedence\n    if ((group === Groups_1.Groups.CP || group === Groups_1.Groups.PL) && (multiplier && multiplier != '1' || sign === '-') || (group === Groups_1.Groups.CB || group === Groups_1.Groups.CP || group === Groups_1.Groups.PL) && power && power != '1' || !asHash && group === Groups_1.Groups.P && value == -1 || obj.fname === Settings_1.Settings.PARENTHESIS) {\n      value = (0, Utils_1.inBrackets)(value);\n    }\n    if (decp && (option === 'decimal' || option === 'decimals' && multiplier)) {\n      multiplier = (0, Utils_1.nround)(multiplier, decp);\n    }\n    //add the sign back\n    var c = sign + multiplier;\n    if (multiplier && wrapCondition(multiplier)) c = (0, Utils_1.inBrackets)(c);\n    if (power < 0) power = (0, Utils_1.inBrackets)(power);\n    //add the multiplication back\n    if (multiplier) c = c + '*';\n    if (power) {\n      if (value === 'e' && Settings_1.Settings.E_TO_EXP) {\n        return c + 'exp' + (0, Utils_1.inBrackets)(power);\n      }\n      power = Settings_1.Settings.POWER_OPERATOR + power;\n    }\n    //this needs serious rethinking. Must fix\n    if (group === Groups_1.Groups.EX && value.charAt(0) === '-') {\n      value = (0, Utils_1.inBrackets)(value);\n    }\n    var cv = c + value;\n    if (obj.parens) {\n      cv = (0, Utils_1.inBrackets)(cv);\n    }\n    return cv + power;\n  } else if ((0, Utils_1.isVector)(obj)) {\n    var l = obj.elements.length,\n      c = [];\n    for (var i = 0; i < l; i++) {\n      c.push(obj.elements[i].text(option));\n    }\n    return '[' + c.join(',') + ']';\n  } else {\n    try {\n      return obj.toString();\n    } catch (e) {\n      return '';\n    }\n  }\n}\nexports.text = text;","map":{"version":3,"mappings":"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","names":["text","obj","option","undefined","useGroup","decp","asHash","wrapCondition","opt","asDecimal","toString","str","valueOf","indexOf","frac","exec","length","parts","split","negative","m","Number","n","quotient","Math","floor","c","digits","passed","i","prefix","slice","cycle","result","replace","q","r","numer","bigInt_1","denom","equals","divmod","remainder","operator","Scientific_1","Settings_1","SCIENTIFIC_MAX_DECIMAL_PLACES","multiplier","power","sign","group","value","om","String","p","Groups_1","N","toDecimal","PL","collectSymbols","map","x","txt","sort","join","CP","CB","symbol","g","EX","pg","previousGroup","pwg","S","FN","fname","args","P","PARENTHESIS","E_TO_EXP","POWER_OPERATOR","charAt","cv","parens","l","elements","push","e","exports"],"sourceRoot":"","sources":["../../src/Core/Text.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
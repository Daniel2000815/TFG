{"ast":null,"code":"import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nimport { leftShiftNumber } from '../../plain/number/index.js';\nimport { leftShiftBigNumber } from '../../utils/bignumber/bitwise.js';\nvar name = 'leftShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createLeftShift = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      zeros = _ref.zeros,\n      DenseMatrix = _ref.DenseMatrix;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed: typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed: typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed: typed,\n    matrix: matrix\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed: typed,\n    matrix: matrix\n  });\n  /**\r\n   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\r\n   * For matrices, the function is evaluated element wise.\r\n   * For units, the function is evaluated on the best prefix base.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.leftShift(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.leftShift(1, 2)               // returns number 4\r\n   *\r\n   *    math.leftShift([1, 2, 4], 4)       // returns Array [16, 32, 64]\r\n   *\r\n   * See also:\r\n   *\r\n   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\r\n   *\r\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\r\n   * @param  {number | BigNumber} y Amount of shifts\r\n   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times\r\n   */\n\n  return typed(name, {\n    'number, number': leftShiftNumber,\n    'BigNumber, BigNumber': leftShiftBigNumber,\n    'SparseMatrix, number | BigNumber': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (equalScalar(y, 0)) {\n          return x.clone();\n        }\n\n        return matAlgo11xS0s(x, y, self, false);\n      };\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (equalScalar(y, 0)) {\n          return x.clone();\n        }\n\n        return matAlgo14xDs(x, y, self, false);\n      };\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (equalScalar(x, 0)) {\n          return zeros(y.size(), y.storage());\n        }\n\n        return matAlgo10xSids(y, x, self, true);\n      };\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (equalScalar(x, 0)) {\n          return zeros(y.size(), y.storage());\n        }\n\n        return matAlgo14xDs(y, x, self, true);\n      };\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});","map":{"version":3,"names":["createMatAlgo02xDS0","createMatAlgo11xS0s","createMatAlgo14xDs","createMatAlgo01xDSid","createMatAlgo10xSids","createMatAlgo08xS0Sid","factory","createMatrixAlgorithmSuite","createUseMatrixForArrayScalar","leftShiftNumber","leftShiftBigNumber","name","dependencies","createLeftShift","_ref","typed","matrix","equalScalar","zeros","DenseMatrix","matAlgo01xDSid","matAlgo02xDS0","matAlgo08xS0Sid","matAlgo10xSids","matAlgo11xS0s","matAlgo14xDs","matrixAlgorithmSuite","useMatrixForArrayScalar","referToSelf","self","x","y","clone","size","storage","SS","DS","SD"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/mathjs/lib/esm/function/bitwise/leftShift.js"],"sourcesContent":["import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\r\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\r\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\r\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\r\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\r\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\r\nimport { leftShiftNumber } from '../../plain/number/index.js';\r\nimport { leftShiftBigNumber } from '../../utils/bignumber/bitwise.js';\r\nvar name = 'leftShift';\r\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\r\nexport var createLeftShift = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    equalScalar,\r\n    zeros,\r\n    DenseMatrix\r\n  } = _ref;\r\n  var matAlgo01xDSid = createMatAlgo01xDSid({\r\n    typed\r\n  });\r\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo10xSids = createMatAlgo10xSids({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matAlgo11xS0s = createMatAlgo11xS0s({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo14xDs = createMatAlgo14xDs({\r\n    typed\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix\r\n  });\r\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\r\n    typed,\r\n    matrix\r\n  });\r\n  /**\r\n   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\r\n   * For matrices, the function is evaluated element wise.\r\n   * For units, the function is evaluated on the best prefix base.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.leftShift(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.leftShift(1, 2)               // returns number 4\r\n   *\r\n   *    math.leftShift([1, 2, 4], 4)       // returns Array [16, 32, 64]\r\n   *\r\n   * See also:\r\n   *\r\n   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\r\n   *\r\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\r\n   * @param  {number | BigNumber} y Amount of shifts\r\n   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times\r\n   */\r\n\r\n  return typed(name, {\r\n    'number, number': leftShiftNumber,\r\n    'BigNumber, BigNumber': leftShiftBigNumber,\r\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\r\n      // check scalar\r\n      if (equalScalar(y, 0)) {\r\n        return x.clone();\r\n      }\r\n\r\n      return matAlgo11xS0s(x, y, self, false);\r\n    }),\r\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\r\n      // check scalar\r\n      if (equalScalar(y, 0)) {\r\n        return x.clone();\r\n      }\r\n\r\n      return matAlgo14xDs(x, y, self, false);\r\n    }),\r\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\r\n      // check scalar\r\n      if (equalScalar(x, 0)) {\r\n        return zeros(y.size(), y.storage());\r\n      }\r\n\r\n      return matAlgo10xSids(y, x, self, true);\r\n    }),\r\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\r\n      // check scalar\r\n      if (equalScalar(x, 0)) {\r\n        return zeros(y.size(), y.storage());\r\n      }\r\n\r\n      return matAlgo14xDs(y, x, self, true);\r\n    })\r\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\r\n    SS: matAlgo08xS0Sid,\r\n    DS: matAlgo01xDSid,\r\n    SD: matAlgo02xDS0\r\n  }));\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}
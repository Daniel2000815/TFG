{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\src\\\\GrobnerPage\\\\GrobnerPage.js\";\nimport React, { useState, useEfect } from \"react\";\nimport Grid from '@mui/material/Grid';\nimport Divider from '@mui/material/Divider';\nimport TextField from '@mui/material/TextField';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport newId from '../uniqueIdHook';\nimport Button from '@mui/material/Button';\n\nvar nerdamer = require('nerdamer');\n\nrequire('nerdamer/Algebra'); // [variable, exponent] both strings\n// function exp (p) {\n//     const v = ['x', 'y', 'z'];\n//     const degs = [nerdamer(`deg(${p}, x)`).toString(), nerdamer(`deg(${p}, y)`).toString(), nerdamer(`deg(${p}, z)`).toString()];\n//     const max = Math.max(...degs).toString();\n//     return [ v[degs.indexOf(max)] , max];\n// }\n\n\nfunction lexify(p) {\n  var simplified = '';\n\n  try {\n    simplified = nerdamer(\"expand(\".concat(p, \")\")).toString();\n  } catch (error) {\n    console.log(error);\n    return;\n  }\n\n  console.log(simplified);\n  return simplified;\n}\n\nfunction exp(p) {\n  return [Number(nerdamer(\"deg(\".concat(p, \", x)\")).toString()), Number(nerdamer(\"deg(\".concat(p, \", y)\")).toString()), Number(nerdamer(\"deg(\".concat(p, \", z)\")).toString())];\n}\n\nfunction expEq(e1, e2) {\n  return e1[0] == e2[0] && e1[1] == e2[1] && e1[2] == e2[2];\n}\n\nfunction lc(f, variable) {\n  var coeffs = nerdamer.coeffs(\"\".concat(f), \"\".concat(variable));\n  var lc = '';\n  coeffs.each(function (e, i) {\n    lc = e.toString();\n  });\n  return lc;\n} // function lc(p){\n//     const split = p.split(/[-+]+/); // separa por + o -\n//     const expP = exp(p);\n//     split.forEach(element => {\n//         let expI = exp(nerdamer(`${element}`).toString());\n//         if(expEq(expP, expI))\n//             return \n//     });\n// }\n\n\nfunction expMinus(a, b) {\n  return [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n} // monomio lider\n\n\nfunction lm(f) {\n  return '';\n}\n\nfunction monomial(exp) {\n  return nerdamer(\"x^(\".concat(exp[0], \")y^(\").concat(exp[1], \")z^(\").concat(exp[2], \")\")).toString();\n}\n\nfunction division(f, dividers) {\n  console.log(\"INIT\");\n  var s = dividers.length;\n  var p = f;\n  var r = 0;\n  var q = new Array(s).fill(0);\n\n  while (p !== '0') {\n    var i = 0;\n    var step = 0;\n\n    while (i < s && step === 0) {\n      console.log(\"ITERATION \".concat(i, \": \").concat(p));\n      var exp_p = exp(p);\n      var exp_fi = exp(dividers[i]);\n      var gamma = expMinus(exp_p, exp_fi);\n      console.log(gamma);\n\n      if (gamma.every(function (item) {\n        return item >= 0;\n      })) {\n        console.log(\"PODEMOS DIVIDIR POR \".concat(dividers[i]));\n        var xGamma = monomial(gamma);\n        var lcp = lc(p, exp_p);\n        var lcfi = lc(dividers[i], exp_fi);\n        var coef = nerdamer(\"(\".concat(lcp, \")/(\").concat(lcfi, \") * \").concat(xGamma)).toString();\n        q[i] = nerdamer(\"\".concat(q[i], \" + \").concat(coef)).toString();\n        p = nerdamer(\"\".concat(p, \" - \").concat(coef, \" * \").concat(dividers[i])).toString();\n        step = 1;\n      } else {\n        console.log(\"NO PODEMOS DIVIDIR POR \".concat(dividers[i]));\n        i++;\n      }\n    }\n\n    if (step === 0) {\n      var lt = nerdamer(\"\".concat(lc(p), \"*\").concat(monomial(exp(p)))).toString();\n      console.log(\"NO HEMOS PODIDO DIVIDIR POR NADA, QUITAMOS LT: \".concat(lt));\n      r = nerdamer(\"\".concat(r, \" + \").concat(lt)).toString();\n      p = nerdamer(\"\".concat(p, \" - \").concat(lt)).toString();\n    }\n  }\n\n  console.log(q, r);\n  return [].concat(_toConsumableArray(q), [r]);\n}\n\nfunction PolynomialInput(props) {\n  return /*#__PURE__*/React.createElement(TextField, {\n    sx: {\n      width: '100%'\n    },\n    value: props.val,\n    onChange: function onChange(e) {\n      return props.handleChange(e.target.value);\n    },\n    id: props.label,\n    error: props.val === '',\n    InputProps: {\n      startAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }\n      }, props.label, \" = \")\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default function GrobnerPage() {\n  var _useState = useState(\"x^2 * y + x*y^2 + y^2\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      dividendo = _useState2[0],\n      setDividendo = _useState2[1];\n\n  var _useState3 = useState([\"xy-1\", \"y^2-1\"]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      divisores = _useState4[0],\n      setDivisores = _useState4[1];\n\n  var handleDivisoresChange = function handleDivisoresChange(idx, val) {\n    var newDivisores = _toConsumableArray(divisores);\n\n    newDivisores[idx] = val;\n    setDivisores(newDivisores);\n  };\n\n  var handleDividendoChange = function handleDividendoChange(val) {\n    setDividendo(val);\n    lexify(val);\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justifyContent: \"flex-start\",\n    alignItems: \"flex-start\",\n    spacing: 10,\n    padding: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, \"Hola:\", exp('2x^2 + y^3').toString(), \"coefs: \", nerdamer.coeffs('x^2 -99x^2+6x-9x^6+y^3+ xy', 'x').toString(), \"lc: \", lc('9x^9+6y^8', 'y')), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PolynomialInput, {\n    label: \"f\",\n    val: dividendo,\n    handleChange: function handleChange(v) {\n      return handleDividendoChange(v);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }, \"DIVIDERS\"), divisores.map(function (divisor, idx) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: \"dividerInput_\".concat(idx),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(PolynomialInput, {\n      label: \"f\".concat(idx + 1),\n      val: divisor,\n      handleChange: function handleChange(v) {\n        return handleDivisoresChange(idx, v);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 29\n      }\n    })));\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    onClick: function onClick() {\n      return division(dividendo, divisores);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, \"Divide\"))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, \"TODO\"));\n}","map":{"version":3,"names":["React","useState","useEfect","Grid","Divider","TextField","InputAdornment","newId","Button","nerdamer","require","lexify","p","simplified","toString","error","console","log","exp","Number","expEq","e1","e2","lc","f","variable","coeffs","each","e","i","expMinus","a","b","lm","monomial","division","dividers","s","length","r","q","Array","fill","step","exp_p","exp_fi","gamma","every","item","xGamma","lcp","lcfi","coef","lt","PolynomialInput","props","width","val","handleChange","target","value","label","startAdornment","GrobnerPage","dividendo","setDividendo","divisores","setDivisores","handleDivisoresChange","idx","newDivisores","handleDividendoChange","v","map","divisor"],"sources":["C:/Users/daniz/TFG/Aplicacion/src/GrobnerPage/GrobnerPage.js"],"sourcesContent":["import React, { useState, useEfect } from \"react\";\r\nimport Grid from '@mui/material/Grid';\r\nimport Divider from '@mui/material/Divider';\r\nimport TextField from '@mui/material/TextField';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport newId from '../uniqueIdHook';\r\nimport Button from '@mui/material/Button';\r\n\r\nconst nerdamer = require('nerdamer');\r\nrequire('nerdamer/Algebra');\r\n\r\n// [variable, exponent] both strings\r\n// function exp (p) {\r\n//     const v = ['x', 'y', 'z'];\r\n//     const degs = [nerdamer(`deg(${p}, x)`).toString(), nerdamer(`deg(${p}, y)`).toString(), nerdamer(`deg(${p}, z)`).toString()];\r\n//     const max = Math.max(...degs).toString();\r\n\r\n//     return [ v[degs.indexOf(max)] , max];\r\n// }\r\n\r\nfunction lexify(p){\r\n    let simplified = '';\r\n    \r\n    try{\r\n        simplified = nerdamer(`expand(${p})`).toString();\r\n    }catch(error){\r\n        console.log(error);\r\n        return;\r\n    }\r\n    console.log(simplified);\r\n    return simplified;\r\n}\r\n\r\nfunction exp(p){\r\n    return [\r\n        Number(nerdamer(`deg(${p}, x)`).toString()), \r\n        Number(nerdamer(`deg(${p}, y)`).toString()),\r\n        Number(nerdamer(`deg(${p}, z)`).toString())\r\n    ];\r\n}\r\n\r\nfunction expEq(e1,e2){\r\n    return e1[0]==e2[0] && e1[1]==e2[1] && e1[2]==e2[2];\r\n}\r\n\r\nfunction lc(f, variable){\r\n    const coeffs = nerdamer.coeffs(`${f}`, `${variable}`);\r\n    let lc = '';\r\n    coeffs.each(function(e, i) {\r\n        lc = e.toString();\r\n     });\r\n\r\n     return lc;\r\n}\r\n\r\n// function lc(p){\r\n//     const split = p.split(/[-+]+/); // separa por + o -\r\n//     const expP = exp(p);\r\n\r\n//     split.forEach(element => {\r\n//         let expI = exp(nerdamer(`${element}`).toString());\r\n//         if(expEq(expP, expI))\r\n//             return \r\n//     });\r\n// }\r\n\r\nfunction expMinus(a,b){\r\n    return [a[0]-b[0], a[1]-b[1], a[2]-b[2]];\r\n}\r\n\r\n// monomio lider\r\nfunction lm(f){\r\n    return ''\r\n}\r\n\r\nfunction monomial(exp){\r\n    return nerdamer(`x^(${exp[0]})y^(${exp[1]})z^(${exp[2]})`).toString();\r\n}\r\n\r\nfunction division(f, dividers){\r\n    console.log(\"INIT\")\r\n    const s = dividers.length;\r\n    let p = f;\r\n    let r = 0;\r\n    let q = new Array(s).fill(0);\r\n    \r\n    while(p!=='0'){\r\n        let i = 0;\r\n        let step = 0;\r\n\r\n        while(i<s && step===0){\r\n            console.log(`ITERATION ${i}: ${p}`);\r\n            const exp_p = exp(p);\r\n            const exp_fi = exp(dividers[i]);\r\n            const gamma = expMinus(exp_p, exp_fi);\r\n                console.log(gamma);\r\n            if( gamma.every(item => item >= 0) ){\r\n                console.log(`PODEMOS DIVIDIR POR ${dividers[i]}`); \r\n                const xGamma = monomial(gamma);\r\n                const lcp = lc(p, exp_p);\r\n                const lcfi = lc(dividers[i], exp_fi);\r\n\r\n                const coef = nerdamer(`(${lcp})/(${lcfi}) * ${xGamma}`).toString();\r\n                q[i] = nerdamer(`${q[i]} + ${coef}`).toString();\r\n                p = nerdamer(`${p} - ${coef} * ${dividers[i]}`).toString();\r\n                step = 1;\r\n            }\r\n            else{\r\n                console.log(`NO PODEMOS DIVIDIR POR ${dividers[i]}`) \r\n                i++;\r\n            }\r\n        }\r\n        if(step === 0){\r\n            \r\n            const lt = nerdamer(`${lc(p)}*${monomial(exp(p))}`).toString();\r\n\r\n            console.log(`NO HEMOS PODIDO DIVIDIR POR NADA, QUITAMOS LT: ${lt}`); \r\n            r = nerdamer(`${r} + ${lt}`).toString();\r\n            p = nerdamer(`${p} - ${lt}`).toString();\r\n        }\r\n    }\r\n\r\n    console.log(q,r);\r\n    return [...q, r];\r\n}\r\n\r\n\r\nfunction PolynomialInput(props) {\r\n    return (\r\n        <TextField\r\n            sx={{ width: '100%' }}\r\n            value={props.val}\r\n            onChange={(e) => props.handleChange(e.target.value)}\r\n            id={props.label}\r\n            error={props.val === ''}\r\n            InputProps={{\r\n                startAdornment: (\r\n                    <InputAdornment position=\"start\">{props.label} = </InputAdornment>\r\n                ),\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default function GrobnerPage() {\r\n    const [dividendo, setDividendo] = useState(\"x^2 * y + x*y^2 + y^2\");\r\n    const [divisores, setDivisores] = useState([\"xy-1\", \"y^2-1\"]);\r\n\r\n    const handleDivisoresChange = (idx, val) => {\r\n        let newDivisores = [...divisores];\r\n        newDivisores[idx] = val;\r\n        setDivisores(newDivisores);\r\n    }\r\n\r\n    const handleDividendoChange = (val) => {\r\n        setDividendo(val);\r\n        lexify(val);\r\n    }\r\n\r\n    return <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"flex-start\"\r\n        alignItems=\"flex-start\"\r\n        spacing={10}\r\n        padding={2}\r\n    >\r\n        <Grid item xs={12}>\r\n        Hola:{exp('2x^2 + y^3').toString()}\r\n        coefs: {nerdamer.coeffs('x^2 -99x^2+6x-9x^6+y^3+ xy', 'x').toString()   }\r\n        lc: {lc('9x^9+6y^8', 'y')}\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n            <PolynomialInput label={`f`} val={dividendo} handleChange={(v) => handleDividendoChange(v)} />\r\n            <Divider>DIVIDERS</Divider>\r\n            {divisores.map(function (divisor, idx) {\r\n                return (\r\n                    <div key={`dividerInput_${idx}`}>\r\n                        <Grid item xs={12}>\r\n                            <PolynomialInput label={`f${idx + 1}`} val={divisor} handleChange={(v) => handleDivisoresChange(idx, v)} />\r\n                        </Grid>\r\n                    </div>\r\n                );\r\n            })}\r\n\r\n            <Grid item>\r\n                <Button \r\n                    variant=\"contained\" \r\n                    onClick={()=>division(dividendo,divisores)}\r\n                >\r\n                    Divide\r\n                </Button>\r\n\r\n            </Grid>\r\n\r\n        </Grid>\r\n        <Grid item xs={6}>TODO</Grid>\r\n    </Grid >;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
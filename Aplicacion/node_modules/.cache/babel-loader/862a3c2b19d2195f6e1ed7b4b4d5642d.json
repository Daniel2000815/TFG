{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'add';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix'];\nexport var createAdd = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      addScalar = _ref.addScalar,\n      equalScalar = _ref.equalScalar,\n      DenseMatrix = _ref.DenseMatrix,\n      SparseMatrix = _ref.SparseMatrix;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed: typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed: typed,\n    matrix: matrix\n  });\n  /**\r\n   * Add two or more values, `x + y`.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.add(x, y)\r\n   *    math.add(x, y, z, ...)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.add(2, 3)               // returns number 5\r\n   *    math.add(2, 3, 4)            // returns number 9\r\n   *\r\n   *    const a = math.complex(2, 3)\r\n   *    const b = math.complex(-4, 1)\r\n   *    math.add(a, b)               // returns Complex -2 + 4i\r\n   *\r\n   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]\r\n   *\r\n   *    const c = math.unit('5 cm')\r\n   *    const d = math.unit('2.1 mm')\r\n   *    math.add(c, d)               // returns Unit 52.1 mm\r\n   *\r\n   *    math.add(\"2.3\", \"4\")         // returns number 6.3\r\n   *\r\n   * See also:\r\n   *\r\n   *    subtract, sum\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\r\n   */\n\n  return typed(name, {\n    'any, any': addScalar,\n    'any, any, ...any': typed.referToSelf(function (self) {\n      return function (x, y, rest) {\n        var result = self(x, y);\n\n        for (var i = 0; i < rest.length; i++) {\n          result = self(result, rest[i]);\n        }\n\n        return result;\n      };\n    })\n  }, matrixAlgorithmSuite({\n    elop: addScalar,\n    DS: matAlgo01xDSid,\n    SS: matAlgo04xSidSid,\n    Ss: matAlgo10xSids\n  }));\n});","map":{"version":3,"names":["factory","createMatAlgo01xDSid","createMatAlgo04xSidSid","createMatAlgo10xSids","createMatrixAlgorithmSuite","name","dependencies","createAdd","_ref","typed","matrix","addScalar","equalScalar","DenseMatrix","SparseMatrix","matAlgo01xDSid","matAlgo04xSidSid","matAlgo10xSids","matrixAlgorithmSuite","referToSelf","self","x","y","rest","result","i","length","elop","DS","SS","Ss"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/mathjs/lib/esm/function/arithmetic/add.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\r\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\r\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nvar name = 'add';\r\nvar dependencies = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix'];\r\nexport var createAdd = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    addScalar,\r\n    equalScalar,\r\n    DenseMatrix,\r\n    SparseMatrix\r\n  } = _ref;\r\n  var matAlgo01xDSid = createMatAlgo01xDSid({\r\n    typed\r\n  });\r\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo10xSids = createMatAlgo10xSids({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix\r\n  });\r\n  /**\r\n   * Add two or more values, `x + y`.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.add(x, y)\r\n   *    math.add(x, y, z, ...)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.add(2, 3)               // returns number 5\r\n   *    math.add(2, 3, 4)            // returns number 9\r\n   *\r\n   *    const a = math.complex(2, 3)\r\n   *    const b = math.complex(-4, 1)\r\n   *    math.add(a, b)               // returns Complex -2 + 4i\r\n   *\r\n   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]\r\n   *\r\n   *    const c = math.unit('5 cm')\r\n   *    const d = math.unit('2.1 mm')\r\n   *    math.add(c, d)               // returns Unit 52.1 mm\r\n   *\r\n   *    math.add(\"2.3\", \"4\")         // returns number 6.3\r\n   *\r\n   * See also:\r\n   *\r\n   *    subtract, sum\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\r\n   */\r\n\r\n  return typed(name, {\r\n    'any, any': addScalar,\r\n    'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {\r\n      var result = self(x, y);\r\n\r\n      for (var i = 0; i < rest.length; i++) {\r\n        result = self(result, rest[i]);\r\n      }\r\n\r\n      return result;\r\n    })\r\n  }, matrixAlgorithmSuite({\r\n    elop: addScalar,\r\n    DS: matAlgo01xDSid,\r\n    SS: matAlgo04xSidSid,\r\n    Ss: matAlgo10xSids\r\n  }));\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,oBAAT,QAAqC,2CAArC;AACA,SAASC,sBAAT,QAAuC,6CAAvC;AACA,SAASC,oBAAT,QAAqC,2CAArC;AACA,SAASC,0BAAT,QAA2C,iDAA3C;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB,EAAiC,aAAjC,EAAgD,aAAhD,EAA+D,cAA/D,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeP,OAAO,CAACK,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACxE,IACEC,KADF,GAOID,IAPJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAOIF,IAPJ,CAEEE,MAFF;EAAA,IAGEC,SAHF,GAOIH,IAPJ,CAGEG,SAHF;EAAA,IAIEC,WAJF,GAOIJ,IAPJ,CAIEI,WAJF;EAAA,IAKEC,WALF,GAOIL,IAPJ,CAKEK,WALF;EAAA,IAMEC,YANF,GAOIN,IAPJ,CAMEM,YANF;EAQA,IAAIC,cAAc,GAAGd,oBAAoB,CAAC;IACxCQ,KAAK,EAALA;EADwC,CAAD,CAAzC;EAGA,IAAIO,gBAAgB,GAAGd,sBAAsB,CAAC;IAC5CO,KAAK,EAALA,KAD4C;IAE5CG,WAAW,EAAXA;EAF4C,CAAD,CAA7C;EAIA,IAAIK,cAAc,GAAGd,oBAAoB,CAAC;IACxCM,KAAK,EAALA,KADwC;IAExCI,WAAW,EAAXA;EAFwC,CAAD,CAAzC;EAIA,IAAIK,oBAAoB,GAAGd,0BAA0B,CAAC;IACpDK,KAAK,EAALA,KADoD;IAEpDC,MAAM,EAANA;EAFoD,CAAD,CAArD;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOD,KAAK,CAACJ,IAAD,EAAO;IACjB,YAAYM,SADK;IAEjB,oBAAoBF,KAAK,CAACU,WAAN,CAAkB,UAAAC,IAAI;MAAA,OAAI,UAACC,CAAD,EAAIC,CAAJ,EAAOC,IAAP,EAAgB;QAC5D,IAAIC,MAAM,GAAGJ,IAAI,CAACC,CAAD,EAAIC,CAAJ,CAAjB;;QAEA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;UACpCD,MAAM,GAAGJ,IAAI,CAACI,MAAD,EAASD,IAAI,CAACE,CAAD,CAAb,CAAb;QACD;;QAED,OAAOD,MAAP;MACD,CARyC;IAAA,CAAtB;EAFH,CAAP,EAWTN,oBAAoB,CAAC;IACtBS,IAAI,EAAEhB,SADgB;IAEtBiB,EAAE,EAAEb,cAFkB;IAGtBc,EAAE,EAAEb,gBAHkB;IAItBc,EAAE,EAAEb;EAJkB,CAAD,CAXX,CAAZ;AAiBD,CA5E4C,CAAtC"},"metadata":{},"sourceType":"module"}
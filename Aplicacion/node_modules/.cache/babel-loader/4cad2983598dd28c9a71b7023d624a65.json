{"ast":null,"code":"var populated = false; // Browsers\n\nvar _ie;\n\nvar _firefox;\n\nvar _opera;\n\nvar _webkit;\n\nvar _chrome; // Actual IE browser for compatibility mode\n\n\nvar ieRealVersion; // Platforms\n\nvar _osx;\n\nvar _windows;\n\nvar _linux;\n\nvar _android; // Architectures\n\n\nvar win64; // Devices\n\nvar _iphone;\n\nvar _ipad;\n\nvar _native;\n\nvar _mobile;\n\nfunction populate() {\n  if (populated) {\n    return;\n  }\n\n  populated = true; // To work around buggy JS libraries that can't handle multi-digit\n  // version numbers, Opera 10's user agent string claims it's Opera\n  // 9, then later includes a Version/X.Y field:\n  //\n  // Opera/9.80 (foo) Presto/2.2.15 Version/10.10\n\n  var uas = navigator.userAgent;\n  var agent = /(?:MSIE.(\\d+\\.\\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\\d+\\.\\d+))|(?:Opera(?:.+Version.|.)(\\d+\\.\\d+))|(?:AppleWebKit.(\\d+(?:\\.\\d+)?))|(?:Trident\\/\\d+\\.\\d+.*rv:(\\d+\\.\\d+))/.exec(uas);\n  var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);\n  _iphone = /\\b(iPhone|iP[ao]d)/.exec(uas);\n  _ipad = /\\b(iP[ao]d)/.exec(uas);\n  _android = /Android/i.exec(uas);\n  _native = /FBAN\\/\\w+;/i.exec(uas);\n  _mobile = /Mobile/i.exec(uas); // Note that the IE team blog would have you believe you should be checking\n  // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming\n  // from either x64 or ia64;  so ultimately, you should just check for Win64\n  // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit\n  // Windows will send 'WOW64' instead.\n\n  win64 = !!/Win64/.exec(uas);\n\n  if (agent) {\n    if (agent[1]) {\n      _ie = parseFloat(agent[1]);\n    } else {\n      _ie = agent[5] ? parseFloat(agent[5]) : NaN;\n    } // IE compatibility mode\n\n\n    if (_ie && document && document.documentMode) {\n      _ie = document.documentMode;\n    } // grab the \"true\" ie version from the trident token if available\n\n\n    var trident = /(?:Trident\\/(\\d+.\\d+))/.exec(uas);\n    ieRealVersion = trident ? parseFloat(trident[1]) + 4 : _ie;\n    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;\n    _opera = agent[3] ? parseFloat(agent[3]) : NaN;\n    _webkit = agent[4] ? parseFloat(agent[4]) : NaN;\n\n    if (_webkit) {\n      // We do not add the regexp to the above test, because it will always\n      // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in\n      // the userAgent string.\n      agent = /(?:Chrome\\/(\\d+\\.\\d+))/.exec(uas);\n      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;\n    } else {\n      _chrome = NaN;\n    }\n  } else {\n    _ie = NaN;\n    _firefox = NaN;\n    _opera = NaN;\n    _chrome = NaN;\n    _webkit = NaN;\n  }\n\n  if (os) {\n    if (os[1]) {\n      // Detect OS X version.  If no version number matches, set osx to true.\n      // Version examples:  10, 10_6_1, 10.7\n      // Parses version number as a float, taking only first two sets of\n      // digits.  If only one set of digits is found, returns just the major\n      // version number.\n      var ver = /(?:Mac OS X (\\d+(?:[._]\\d+)?))/.exec(uas);\n      _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;\n    } else {\n      _osx = false;\n    }\n\n    _windows = !!os[2];\n    _linux = !!os[3];\n  } else {\n    _osx = false;\n    _windows = false;\n    _linux = false;\n  }\n}\n\nvar UserAgent = {\n  /**\r\n   *  Check if the UA is Internet Explorer.\r\n   *\r\n   *\r\n   *  @return float|NaN Version number (if match) or NaN.\r\n   */\n  ie: function ie() {\n    return populate() || _ie;\n  },\n\n  /**\r\n   * Check if we're in Internet Explorer compatibility mode.\r\n   *\r\n   * @return bool true if in compatibility mode, false if\r\n   * not compatibility mode or not ie\r\n   */\n  ieCompatibilityMode: function ieCompatibilityMode() {\n    return populate() || ieRealVersion > _ie;\n  },\n\n  /**\r\n   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we\r\n   * only need this because Skype can't handle 64-bit IE yet.  We need to remove\r\n   * this when we don't need it -- tracked by #601957.\r\n   */\n  ie64: function ie64() {\n    return UserAgent.ie() && win64;\n  },\n\n  /**\r\n   *  Check if the UA is Firefox.\r\n   *\r\n   *\r\n   *  @return float|NaN Version number (if match) or NaN.\r\n   */\n  firefox: function firefox() {\n    return populate() || _firefox;\n  },\n\n  /**\r\n   *  Check if the UA is Opera.\r\n   *\r\n   *\r\n   *  @return float|NaN Version number (if match) or NaN.\r\n   */\n  opera: function opera() {\n    return populate() || _opera;\n  },\n\n  /**\r\n   *  Check if the UA is WebKit.\r\n   *\r\n   *\r\n   *  @return float|NaN Version number (if match) or NaN.\r\n   */\n  webkit: function webkit() {\n    return populate() || _webkit;\n  },\n\n  /**\r\n   *  For Push\r\n   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit\r\n   */\n  safari: function safari() {\n    return UserAgent.webkit();\n  },\n\n  /**\r\n   *  Check if the UA is a Chrome browser.\r\n   *\r\n   *\r\n   *  @return float|NaN Version number (if match) or NaN.\r\n   */\n  chrome: function chrome() {\n    return populate() || _chrome;\n  },\n\n  /**\r\n   *  Check if the user is running Windows.\r\n   *\r\n   *  @return bool `true' if the user's OS is Windows.\r\n   */\n  windows: function windows() {\n    return populate() || _windows;\n  },\n\n  /**\r\n   *  Check if the user is running Mac OS X.\r\n   *\r\n   *  @return float|bool   Returns a float if a version number is detected,\r\n   *                       otherwise true/false.\r\n   */\n  osx: function osx() {\n    return populate() || _osx;\n  },\n\n  /**\r\n   * Check if the user is running Linux.\r\n   *\r\n   * @return bool `true' if the user's OS is some flavor of Linux.\r\n   */\n  linux: function linux() {\n    return populate() || _linux;\n  },\n\n  /**\r\n   * Check if the user is running on an iPhone or iPod platform.\r\n   *\r\n   * @return bool `true' if the user is running some flavor of the\r\n   *    iPhone OS.\r\n   */\n  iphone: function iphone() {\n    return populate() || _iphone;\n  },\n  mobile: function mobile() {\n    return populate() || _iphone || _ipad || _android || _mobile;\n  },\n  // webviews inside of the native apps\n  nativeApp: function nativeApp() {\n    return populate() || _native;\n  },\n  android: function android() {\n    return populate() || _android;\n  },\n  ipad: function ipad() {\n    return populate() || _ipad;\n  }\n};\nexport default UserAgent;","map":{"version":3,"names":["populated","_ie","_firefox","_opera","_webkit","_chrome","ieRealVersion","_osx","_windows","_linux","_android","win64","_iphone","_ipad","_native","_mobile","populate","uas","navigator","userAgent","agent","exec","os","parseFloat","NaN","document","documentMode","trident","ver","replace","UserAgent","ie","ieCompatibilityMode","ie64","firefox","opera","webkit","safari","chrome","windows","osx","linux","iphone","mobile","nativeApp","android","ipad"],"sources":["G:/gitlab/TFG/Aplicacion/node_modules/dom-lib/es/utils/UserAgent_DEPRECATED.js"],"sourcesContent":["var populated = false; // Browsers\r\n\r\nvar _ie;\r\n\r\nvar _firefox;\r\n\r\nvar _opera;\r\n\r\nvar _webkit;\r\n\r\nvar _chrome; // Actual IE browser for compatibility mode\r\n\r\n\r\nvar ieRealVersion; // Platforms\r\n\r\nvar _osx;\r\n\r\nvar _windows;\r\n\r\nvar _linux;\r\n\r\nvar _android; // Architectures\r\n\r\n\r\nvar win64; // Devices\r\n\r\nvar _iphone;\r\n\r\nvar _ipad;\r\n\r\nvar _native;\r\n\r\nvar _mobile;\r\n\r\nfunction populate() {\r\n  if (populated) {\r\n    return;\r\n  }\r\n\r\n  populated = true; // To work around buggy JS libraries that can't handle multi-digit\r\n  // version numbers, Opera 10's user agent string claims it's Opera\r\n  // 9, then later includes a Version/X.Y field:\r\n  //\r\n  // Opera/9.80 (foo) Presto/2.2.15 Version/10.10\r\n\r\n  var uas = navigator.userAgent;\r\n  var agent = /(?:MSIE.(\\d+\\.\\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\\d+\\.\\d+))|(?:Opera(?:.+Version.|.)(\\d+\\.\\d+))|(?:AppleWebKit.(\\d+(?:\\.\\d+)?))|(?:Trident\\/\\d+\\.\\d+.*rv:(\\d+\\.\\d+))/.exec(uas);\r\n  var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);\r\n  _iphone = /\\b(iPhone|iP[ao]d)/.exec(uas);\r\n  _ipad = /\\b(iP[ao]d)/.exec(uas);\r\n  _android = /Android/i.exec(uas);\r\n  _native = /FBAN\\/\\w+;/i.exec(uas);\r\n  _mobile = /Mobile/i.exec(uas); // Note that the IE team blog would have you believe you should be checking\r\n  // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming\r\n  // from either x64 or ia64;  so ultimately, you should just check for Win64\r\n  // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit\r\n  // Windows will send 'WOW64' instead.\r\n\r\n  win64 = !!/Win64/.exec(uas);\r\n\r\n  if (agent) {\r\n    if (agent[1]) {\r\n      _ie = parseFloat(agent[1]);\r\n    } else {\r\n      _ie = agent[5] ? parseFloat(agent[5]) : NaN;\r\n    } // IE compatibility mode\r\n\r\n\r\n    if (_ie && document && document.documentMode) {\r\n      _ie = document.documentMode;\r\n    } // grab the \"true\" ie version from the trident token if available\r\n\r\n\r\n    var trident = /(?:Trident\\/(\\d+.\\d+))/.exec(uas);\r\n    ieRealVersion = trident ? parseFloat(trident[1]) + 4 : _ie;\r\n    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;\r\n    _opera = agent[3] ? parseFloat(agent[3]) : NaN;\r\n    _webkit = agent[4] ? parseFloat(agent[4]) : NaN;\r\n\r\n    if (_webkit) {\r\n      // We do not add the regexp to the above test, because it will always\r\n      // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in\r\n      // the userAgent string.\r\n      agent = /(?:Chrome\\/(\\d+\\.\\d+))/.exec(uas);\r\n      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;\r\n    } else {\r\n      _chrome = NaN;\r\n    }\r\n  } else {\r\n    _ie = NaN;\r\n    _firefox = NaN;\r\n    _opera = NaN;\r\n    _chrome = NaN;\r\n    _webkit = NaN;\r\n  }\r\n\r\n  if (os) {\r\n    if (os[1]) {\r\n      // Detect OS X version.  If no version number matches, set osx to true.\r\n      // Version examples:  10, 10_6_1, 10.7\r\n      // Parses version number as a float, taking only first two sets of\r\n      // digits.  If only one set of digits is found, returns just the major\r\n      // version number.\r\n      var ver = /(?:Mac OS X (\\d+(?:[._]\\d+)?))/.exec(uas);\r\n      _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;\r\n    } else {\r\n      _osx = false;\r\n    }\r\n\r\n    _windows = !!os[2];\r\n    _linux = !!os[3];\r\n  } else {\r\n    _osx = false;\r\n    _windows = false;\r\n    _linux = false;\r\n  }\r\n}\r\n\r\nvar UserAgent = {\r\n  /**\r\n   *  Check if the UA is Internet Explorer.\r\n   *\r\n   *\r\n   *  @return float|NaN Version number (if match) or NaN.\r\n   */\r\n  ie: function ie() {\r\n    return populate() || _ie;\r\n  },\r\n\r\n  /**\r\n   * Check if we're in Internet Explorer compatibility mode.\r\n   *\r\n   * @return bool true if in compatibility mode, false if\r\n   * not compatibility mode or not ie\r\n   */\r\n  ieCompatibilityMode: function ieCompatibilityMode() {\r\n    return populate() || ieRealVersion > _ie;\r\n  },\r\n\r\n  /**\r\n   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we\r\n   * only need this because Skype can't handle 64-bit IE yet.  We need to remove\r\n   * this when we don't need it -- tracked by #601957.\r\n   */\r\n  ie64: function ie64() {\r\n    return UserAgent.ie() && win64;\r\n  },\r\n\r\n  /**\r\n   *  Check if the UA is Firefox.\r\n   *\r\n   *\r\n   *  @return float|NaN Version number (if match) or NaN.\r\n   */\r\n  firefox: function firefox() {\r\n    return populate() || _firefox;\r\n  },\r\n\r\n  /**\r\n   *  Check if the UA is Opera.\r\n   *\r\n   *\r\n   *  @return float|NaN Version number (if match) or NaN.\r\n   */\r\n  opera: function opera() {\r\n    return populate() || _opera;\r\n  },\r\n\r\n  /**\r\n   *  Check if the UA is WebKit.\r\n   *\r\n   *\r\n   *  @return float|NaN Version number (if match) or NaN.\r\n   */\r\n  webkit: function webkit() {\r\n    return populate() || _webkit;\r\n  },\r\n\r\n  /**\r\n   *  For Push\r\n   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit\r\n   */\r\n  safari: function safari() {\r\n    return UserAgent.webkit();\r\n  },\r\n\r\n  /**\r\n   *  Check if the UA is a Chrome browser.\r\n   *\r\n   *\r\n   *  @return float|NaN Version number (if match) or NaN.\r\n   */\r\n  chrome: function chrome() {\r\n    return populate() || _chrome;\r\n  },\r\n\r\n  /**\r\n   *  Check if the user is running Windows.\r\n   *\r\n   *  @return bool `true' if the user's OS is Windows.\r\n   */\r\n  windows: function windows() {\r\n    return populate() || _windows;\r\n  },\r\n\r\n  /**\r\n   *  Check if the user is running Mac OS X.\r\n   *\r\n   *  @return float|bool   Returns a float if a version number is detected,\r\n   *                       otherwise true/false.\r\n   */\r\n  osx: function osx() {\r\n    return populate() || _osx;\r\n  },\r\n\r\n  /**\r\n   * Check if the user is running Linux.\r\n   *\r\n   * @return bool `true' if the user's OS is some flavor of Linux.\r\n   */\r\n  linux: function linux() {\r\n    return populate() || _linux;\r\n  },\r\n\r\n  /**\r\n   * Check if the user is running on an iPhone or iPod platform.\r\n   *\r\n   * @return bool `true' if the user is running some flavor of the\r\n   *    iPhone OS.\r\n   */\r\n  iphone: function iphone() {\r\n    return populate() || _iphone;\r\n  },\r\n  mobile: function mobile() {\r\n    return populate() || _iphone || _ipad || _android || _mobile;\r\n  },\r\n  // webviews inside of the native apps\r\n  nativeApp: function nativeApp() {\r\n    return populate() || _native;\r\n  },\r\n  android: function android() {\r\n    return populate() || _android;\r\n  },\r\n  ipad: function ipad() {\r\n    return populate() || _ipad;\r\n  }\r\n};\r\nexport default UserAgent;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
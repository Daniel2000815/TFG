{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeFactory = void 0;\n\nvar NodeUtil_js_1 = __importDefault(require(\"./NodeUtil.js\"));\n\nvar NodeFactory = function () {\n  function NodeFactory() {\n    this.mmlFactory = null;\n    this.factory = {\n      'node': NodeFactory.createNode,\n      'token': NodeFactory.createToken,\n      'text': NodeFactory.createText,\n      'error': NodeFactory.createError\n    };\n  }\n\n  NodeFactory.createNode = function (factory, kind, children, def, text) {\n    if (children === void 0) {\n      children = [];\n    }\n\n    if (def === void 0) {\n      def = {};\n    }\n\n    var node = factory.mmlFactory.create(kind);\n    node.setChildren(children);\n\n    if (text) {\n      node.appendChild(text);\n    }\n\n    NodeUtil_js_1.default.setProperties(node, def);\n    return node;\n  };\n\n  NodeFactory.createToken = function (factory, kind, def, text) {\n    if (def === void 0) {\n      def = {};\n    }\n\n    if (text === void 0) {\n      text = '';\n    }\n\n    var textNode = factory.create('text', text);\n    return factory.create('node', kind, [], def, textNode);\n  };\n\n  NodeFactory.createText = function (factory, text) {\n    if (text == null) {\n      return null;\n    }\n\n    return factory.mmlFactory.create('text').setText(text);\n  };\n\n  NodeFactory.createError = function (factory, message) {\n    var text = factory.create('text', message);\n    var mtext = factory.create('node', 'mtext', [], {}, text);\n    var error = factory.create('node', 'merror', [mtext], {\n      'data-mjx-error': message\n    });\n    return error;\n  };\n\n  NodeFactory.prototype.setMmlFactory = function (mmlFactory) {\n    this.mmlFactory = mmlFactory;\n  };\n\n  NodeFactory.prototype.set = function (kind, func) {\n    this.factory[kind] = func;\n  };\n\n  NodeFactory.prototype.setCreators = function (maps) {\n    for (var kind in maps) {\n      this.set(kind, maps[kind]);\n    }\n  };\n\n  NodeFactory.prototype.create = function (kind) {\n    var rest = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      rest[_i - 1] = arguments[_i];\n    }\n\n    var func = this.factory[kind] || this.factory['node'];\n    var node = func.apply(void 0, __spreadArray([this, rest[0]], __read(rest.slice(1)), false));\n\n    if (kind === 'node') {\n      this.configuration.addNode(rest[0], node);\n    }\n\n    return node;\n  };\n\n  NodeFactory.prototype.get = function (kind) {\n    return this.factory[kind];\n  };\n\n  return NodeFactory;\n}();\n\nexports.NodeFactory = NodeFactory;","map":{"version":3,"mappings":"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","names":["NodeFactory","createNode","createToken","createText","createError","factory","kind","children","def","text","node","mmlFactory","create","setChildren","appendChild","NodeUtil_js_1","setProperties","textNode","setText","message","mtext","error","func","maps","set","rest","__spreadArray","__read","slice","configuration","addNode","exports"],"sourceRoot":"","sources":["../../../ts/input/tex/NodeFactory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
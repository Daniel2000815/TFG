{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sqrt = void 0;\n\nvar Symbol_1 = require(\"../../../Types/Symbol\");\n\nvar Groups_1 = require(\"../../../Types/Groups\");\n\nvar Settings_1 = require(\"../../../Settings\");\n\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\n\nvar Complex_1 = require(\"../../Complex\");\n\nvar multiply_1 = require(\"../operations/multiply\");\n\nvar Frac_1 = require(\"../../../Types/Frac\");\n\nvar Utils_1 = require(\"../../../Core/Utils\");\n\nvar Math2_1 = require(\"../../Math2\");\n\nvar pfactor_1 = require(\"./pfactor\");\n\nvar pow_1 = require(\"../operations/pow\");\n\nvar divide_1 = require(\"../operations/divide\");\n\nvar Parser_1 = require(\"../../../Parser/Parser\");\n/**\n * The square root function\n * @param {Symbol} symbol\n * @returns {Symbol}\n */\n\n\nfunction sqrt(symbol) {\n  if (!(0, Utils_1.isSymbol)(symbol)) {\n    symbol = (0, Parser_1.parse)(symbol);\n  } // Exit early for Groups.EX\n\n\n  if (symbol.group === Groups_1.Groups.EX) {\n    return (0, Symbol_1.symfunction)(Settings_1.Settings.SQRT, [symbol]);\n  }\n\n  if (symbol.fname === '' && symbol.power.equals(1)) symbol = symbol.args[0];\n  var is_negative = symbol.multiplier.sign() < 0;\n\n  if (Settings_1.Settings.PARSE2NUMBER) {\n    if (symbol.isConstant() && !is_negative) {\n      return new Symbol_1.Symbol(decimal_js_1.default.sqrt(symbol.multiplier.toDecimal()));\n    } else if (symbol.isImaginary()) {\n      return Complex_1.Complex.sqrt(symbol);\n    } else if (symbol.group === Groups_1.Groups.S) {\n      return (0, Symbol_1.symfunction)('sqrt', [symbol]);\n    }\n  }\n\n  var img,\n      retval,\n      isConstant = symbol.isConstant();\n\n  if (symbol.group === Groups_1.Groups.CB && symbol.isLinear()) {\n    var m = sqrt(new Symbol_1.Symbol(symbol.multiplier));\n\n    for (var s in symbol.symbols) {\n      var x = symbol.symbols[s];\n      m = (0, multiply_1.multiply)(m, sqrt(x));\n    }\n\n    retval = m;\n  } //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\n  else if (symbol.fname === Settings_1.Settings.SQRT) {\n    var s = symbol.args[0];\n    var ms = symbol.multiplier;\n    s.setPower(symbol.power.multiply(new Frac_1.Frac(0.25)));\n    retval = s; //grab the multiplier\n\n    if (!ms.equals(1)) retval = (0, multiply_1.multiply)(sqrt((0, Parser_1.parse)(ms)), retval);\n  } //if the symbol is a fraction then we don't keep can unwrap it. For instance\n  //no need to keep sqrt(x^(1/3))\n  else if (!symbol.power.isInteger()) {\n    symbol.setPower(symbol.power.multiply(new Frac_1.Frac(0.5)));\n    retval = symbol;\n  } else if (symbol.multiplier < 0 && symbol.group === Groups_1.Groups.S) {\n    var a = (0, Parser_1.parse)(symbol.multiplier).negate();\n    var b = (0, Parser_1.parse)(symbol).toUnitMultiplier().negate();\n    retval = (0, multiply_1.multiply)((0, Symbol_1.symfunction)(Settings_1.Settings.SQRT, [b]), sqrt(a));\n  } else {\n    //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\n    //to sqrt(a)*sqrt(b)^1 for better simplification\n    //the sign of the power\n    var sign = symbol.power.sign(); //remove the sign\n\n    symbol.power = symbol.power.abs(); //if the symbols is imagary then we place in the imaginary part. We'll return it\n    //as a product\n\n    if (isConstant && symbol.multiplier.lessThan(0)) {\n      img = Symbol_1.Symbol.imaginary();\n      symbol.multiplier = symbol.multiplier.abs();\n    }\n\n    var q = symbol.multiplier.toDecimal(),\n        qa = Math.abs(q),\n        t = Math.sqrt(qa);\n    var m; //it's a perfect square so take the square\n\n    if ((0, Utils_1.isInt)(t)) {\n      m = new Symbol_1.Symbol(t);\n    } else if ((0, Utils_1.isInt)(q)) {\n      var factors = Math2_1.Math2.ifactor(q);\n      var tw = 1;\n\n      for (var x in factors) {\n        var n = factors[x],\n            nn = n - n % 2; //get out the whole numbers\n\n        if (nn) {\n          //if there is a whole number ...\n          var w = Math.pow(x, nn);\n          tw *= Math.pow(x, nn / 2); //add to total wholes\n\n          q /= w; //reduce the number by the wholes\n        }\n      }\n\n      m = (0, multiply_1.multiply)((0, Symbol_1.symfunction)(Settings_1.Settings.SQRT, [new Symbol_1.Symbol(q)]), new Symbol_1.Symbol(tw));\n    } else {\n      //reduce the numerator and denominator using prime factorization\n      var c = [new Symbol_1.Symbol(symbol.multiplier.num), new Symbol_1.Symbol(symbol.multiplier.den)];\n      var r = [new Symbol_1.Symbol(1), new Symbol_1.Symbol(1)];\n      var sq = [new Symbol_1.Symbol(1), new Symbol_1.Symbol(1)];\n\n      for (var i = 0; i < 2; i++) {\n        var n = c[i]; //get the prime factors and loop through each.\n\n        (0, pfactor_1.pfactor)(n).each(function (x) {\n          x = Symbol_1.Symbol.unwrapPARENS(x);\n          var b = x.clone().toLinear();\n          var p = Number(x.power); //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\n\n          var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\n\n          var w = (p - rem) / 2; //get the whole numbers of n/2\n\n          r[i] = (0, multiply_1.multiply)(r[i], (0, pow_1.pow)(b, new Symbol_1.Symbol(w)));\n          sq[i] = (0, multiply_1.multiply)(sq[i], sqrt((0, pow_1.pow)(b, new Symbol_1.Symbol(rem))));\n        });\n      }\n\n      m = (0, divide_1.divide)((0, multiply_1.multiply)(r[0], sq[0]), (0, multiply_1.multiply)(r[1], sq[1]));\n    } //strip the multiplier since we already took the sqrt\n\n\n    symbol = symbol.toUnitMultiplier(true); //if the symbol is one just return one and not the sqrt function\n\n    if (symbol.isOne()) {\n      retval = symbol;\n    } else if ((0, Utils_1.even)(symbol.power.toString())) {\n      //just raise it to the 1/2\n      retval = (0, pow_1.pow)(symbol.clone(), new Symbol_1.Symbol(0.5));\n    } else {\n      retval = (0, Symbol_1.symfunction)(Settings_1.Settings.SQRT, [symbol]);\n    } //put back the sign that was removed earlier\n\n\n    if (sign < 0) retval.power.negate();\n    if (m) retval = (0, multiply_1.multiply)(m, retval);\n    if (img) retval = (0, multiply_1.multiply)(img, retval);\n  }\n\n  if (is_negative && Settings_1.Settings.PARSE2NUMBER) return (0, Parser_1.parse)(retval);\n  return retval;\n}\n\nexports.sqrt = sqrt;","map":{"version":3,"mappings":"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","names":["sqrt","symbol","group","Groups_1","EX","Settings_1","SQRT","fname","power","equals","args","is_negative","multiplier","sign","PARSE2NUMBER","isConstant","Symbol_1","decimal_js_1","toDecimal","isImaginary","Complex_1","S","img","retval","CB","isLinear","m","s","symbols","x","ms","setPower","multiply","Frac_1","isInteger","a","negate","b","toUnitMultiplier","abs","lessThan","imaginary","q","qa","Math","t","factors","Math2_1","ifactor","tw","n","nn","w","pow","c","num","den","r","sq","i","each","unwrapPARENS","clone","toLinear","p","Number","rem","isOne","toString","exports"],"sourceRoot":"","sources":["../../../../src/Functions/Core/math/sqrt.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LaTeX = void 0;\n\nvar Settings_1 = require(\"../Settings\");\n\nvar Utils_1 = require(\"../Core/Utils\");\n\nvar Groups_1 = require(\"../Types/Groups\");\n\nvar Set_1 = require(\"../Types/Set\");\n\nvar Collection_1 = require(\"../Parser/Collection\");\n\nvar Parser_1 = require(\"../Parser/Parser\");\n\nvar LaTeX = /*#__PURE__*/function () {\n  function LaTeX() {\n    _classCallCheck(this, LaTeX);\n  }\n\n  _createClass(LaTeX, null, [{\n    key: \"parser\",\n    get: function get() {\n      if (!LaTeX._parser) {\n        LaTeX._parser = LaTeX.createParser();\n      }\n\n      return LaTeX._parser;\n    }\n  }, {\n    key: \"createParser\",\n    value: function createParser() {\n      // create a parser and strip it from everything except the items that you need\n      var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\n      var parser = new Parser_1.Parser();\n\n      for (var x in parser) {\n        if (keep.indexOf(x) === -1) delete parser[x];\n      } // declare the operators\n\n\n      parser.setOperator({\n        precedence: 8,\n        operator: '\\\\',\n        action: 'slash',\n        prefix: true,\n        postfix: false,\n        leftAssoc: true,\n        operation: function operation(e) {\n          return e; // bypass the slash\n        }\n      });\n      parser.setOperator({\n        precedence: 8,\n        operator: '\\\\,',\n        action: 'slash_comma',\n        prefix: true,\n        postfix: false,\n        leftAssoc: true,\n        operation: function operation(e) {\n          return e; // bypass the slash\n        }\n      }); // have braces not map to anything. We want them to be return as-is\n\n      var brackets = parser.getBrackets();\n      brackets['{'].maps_to = undefined;\n      return parser;\n    }\n  }, {\n    key: \"latex\",\n    value: function latex(symbol, option) {\n      // it might be an array\n      if (symbol.clone) {\n        symbol = symbol.clone(); // leave original as-is\n      }\n\n      if (symbol instanceof Collection_1.Collection) symbol = symbol.elements;\n\n      if (Array.isArray(symbol)) {\n        var LaTeXArray = [];\n\n        for (var i = 0; i < symbol.length; i++) {\n          var sym = symbol[i]; //This way I can generate LaTeX on an array of strings.\n\n          if (!(0, Utils_1.isSymbol)(sym)) sym = (0, Parser_1.parse)(sym);\n          LaTeXArray.push(this.latex(sym, option));\n        }\n\n        return this.brackets(LaTeXArray.join(', '), 'square');\n      } else if ((0, Utils_1.isMatrix)(symbol)) {\n        var TeX = '\\\\begin{pmatrix}\\n';\n\n        for (var i = 0; i < symbol.elements.length; i++) {\n          var rowTeX = [],\n              e = symbol.elements[i];\n\n          for (var j = 0; j < e.length; j++) {\n            rowTeX.push(this.latex(e[j], option));\n          }\n\n          TeX += rowTeX.join(' & ');\n\n          if (i < symbol.elements.length - 1) {\n            TeX += '\\\\\\\\\\n';\n          }\n        }\n\n        TeX += '\\\\end{pmatrix}';\n        return TeX;\n      } else if ((0, Utils_1.isVector)(symbol)) {\n        var TeX = '\\\\left[';\n\n        for (var i = 0; i < symbol.elements.length; i++) {\n          TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n        }\n\n        TeX += '\\\\right]';\n        return TeX;\n      } else if ((0, Set_1.isSet)(symbol)) {\n        var TeX = '\\\\{';\n\n        for (var i = 0; i < symbol.elements.length; i++) {\n          TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n        }\n\n        TeX += '\\\\}';\n        return TeX;\n      }\n\n      symbol = symbol.clone();\n      var decimal = option === 'decimal' || option === 'decimals',\n          power = symbol.power,\n          invert = (0, Utils_1.isNegative)(power),\n          negative = symbol.multiplier.lessThan(0);\n\n      if (symbol.group === Groups_1.Groups.P && decimal) {\n        return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\n      } else {\n        symbol.multiplier = symbol.multiplier.abs(); // if the user wants the result in decimal format then return it as such by placing it at the top part\n\n        var m_array;\n\n        if (decimal) {\n          var m = String(symbol.multiplier.toDecimal()); // if (String(m) === '1' && !decimal) m = '';\n\n          m_array = [m, ''];\n        } else {\n          m_array = [symbol.multiplier.num, symbol.multiplier.den];\n        } // get the value as a two part array\n\n\n        var v_array = this.value(symbol, invert, option, negative),\n            p; // make it all positive since we know whether to push the power to the numerator or denominator already.\n\n        if (invert) power.negate(); // the power is simple since it requires no additional formatting. We can get it to a\n        // string right away. pass in true to neglect unit powers\n\n        if (decimal) {\n          p = (0, Utils_1.isSymbol)(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\n          if (String(p) === '1') p = '';\n        } // get the latex representation\n        else if ((0, Utils_1.isSymbol)(power)) p = this.latex(power, option); // get it as a fraction\n        else p = this.formatFrac(power, true); // use this array to specify if the power is getting attached to the top or the bottom\n\n\n        var p_array = ['', ''],\n            // stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\n        index = invert ? 1 : 0;\n        p_array[index] = p; // special case group Groups.P and decimal\n\n        var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === Groups_1.Groups.CB);\n        return retval.replace(/\\+\\-/gi, '-');\n      }\n    } // get the raw value of the symbol as an array\n\n  }, {\n    key: \"value\",\n    value: function value(symbol, inverted, option, negative) {\n      var group = symbol.group,\n          previousGroup = symbol.previousGroup,\n          v = ['', ''],\n          index = inverted ? 1 : 0;\n      /*if (group === Groups.N) // do nothing since we want to return top & bottom blank; */\n\n      if (symbol.isInfinity) {\n        v[index] = '\\\\infty';\n      } else if (group === Groups_1.Groups.S || group === Groups_1.Groups.P || previousGroup === Groups_1.Groups.S || previousGroup === Groups_1.Groups.P || previousGroup === Groups_1.Groups.N) {\n        var value = this.formatSubscripts(symbol.value);\n        if (value.replace) value = value.replace(/(.+)_$/, '$1\\\\_'); // split it so we can check for instances of alpha as well as alpha_b\n\n        var t_varray = String(value).split('_');\n        var greek = this.greek[t_varray[0]];\n\n        if (greek) {\n          t_varray[0] = greek;\n          value = t_varray.join('_');\n        }\n\n        var symbol = this.symbols[t_varray[0]];\n\n        if (symbol) {\n          t_varray[0] = symbol;\n          value = t_varray.join('_');\n        }\n\n        v[index] = value;\n      } else if (group === Groups_1.Groups.FN || previousGroup === Groups_1.Groups.FN) {\n        var name,\n            input = [],\n            fname = symbol.fname; // collect the arguments\n\n        for (var i = 0; i < symbol.args.length; i++) {\n          var arg = symbol.args[i],\n              item;\n          if (typeof arg === 'string') item = arg;else {\n            item = this.latex(arg, option);\n          }\n          input.push(item);\n        }\n\n        if (fname === Settings_1.Settings.SQRT) {\n          v[index] = '\\\\sqrt' + this.braces(input.join(','));\n        } else if (fname === Settings_1.Settings.ABS) {\n          v[index] = this.brackets(input.join(','), 'abs');\n        } else if (fname === Settings_1.Settings.PARENTHESIS) {\n          v[index] = this.brackets(input.join(','), 'parens');\n        } else if (fname === 'limit') {\n          v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\n        } else if (fname === 'integrate') {\n          v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\n        } else if (fname === 'defint') {\n          v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\n        } else if (fname === Settings_1.Settings.FACTORIAL || fname === Settings_1.Settings.DOUBLEFACTORIAL) {\n          var arg = symbol.args[0];\n\n          if (arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\n            input[0] = this.brackets(input[0]);\n          }\n\n          v[index] = input[0] + (fname === Settings_1.Settings.FACTORIAL ? '!' : '!!');\n        } else if (fname === 'floor') {\n          v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\n        } else if (fname === 'ceil') {\n          v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\n        } // capture log(a, b)\n        else if (fname === Settings_1.Settings.LOG && input.length > 1) {\n          v[index] = '\\\\mathrm' + this.braces(Settings_1.Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\n        } // capture log(a, b)\n        else if (fname === Settings_1.Settings.LOG10) {\n          v[index] = '\\\\mathrm' + this.braces(Settings_1.Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\n        } else if (fname === 'sum') {\n          var a = input[0],\n              b = input[1],\n              c = input[2],\n              d = input[3];\n          v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n        } else if (fname === 'product') {\n          var a = input[0],\n              b = input[1],\n              c = input[2],\n              d = input[3];\n          v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n        } else if (fname === 'nthroot') {\n          v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\n        } else if (fname === 'mod') {\n          v[index] = input[0] + ' \\\\bmod ' + input[1];\n        } else if (fname === 'realpart') {\n          v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\n        } else if (fname === 'imagpart') {\n          v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\n        } else {\n          var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\n          if (symbol.isConversion) v[index] = name + this.brackets(input.join(''), 'parens');else v[index] = name + this.brackets(input.join(','), 'parens');\n        }\n      } else if (symbol.isComposite()) {\n        var collected = symbol.collectSymbols().sort(group === Groups_1.Groups.CP || previousGroup === Groups_1.Groups.CP ? function (a, b) {\n          return b.group - a.group;\n        } : function (a, b) {\n          var x = (0, Utils_1.isSymbol)(a.power) ? -1 : a.power;\n          var y = (0, Utils_1.isSymbol)(b.power) ? -1 : b.power;\n          return y - x;\n        }),\n            symbols = [],\n            l = collected.length;\n\n        for (var i = 0; i < l; i++) {\n          symbols.push(LaTeX.latex(collected[i], option));\n        }\n\n        var value = symbols.join('+');\n        v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\n      } else if (group === Groups_1.Groups.CB || previousGroup === Groups_1.Groups.EX || previousGroup === Groups_1.Groups.CB) {\n        if (group === Groups_1.Groups.CB) symbol.distributeExponent(); // This almost feels a little like cheating but I need to know if I should be wrapping the symbol\n        // in brackets or not. We'll do this by checking the value of the numerator and then comparing it\n        // to whether the symbol value is \"simple\" or not.\n\n        var denominator = [],\n            numerator = []; // Generate a profile\n\n        var den_map = [],\n            num_map = [],\n            num_c = 0,\n            den_c = 0;\n\n        var setBrackets = function setBrackets(container, map, counter) {\n          if (counter > 1 && map.length > 0) {\n            var l = map.length;\n\n            for (var i = 0; i < l; i++) {\n              var idx = map[i],\n                  item = container[idx];\n\n              if (!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\n                container[idx] = LaTeX.brackets(item, 'parens');\n              }\n            }\n          }\n\n          return container;\n        }; // Generate latex for each of them\n\n\n        symbol.each(function (x) {\n          var isDenom = (0, Utils_1.isNegative)(x.power),\n              laTex;\n\n          if (isDenom) {\n            laTex = LaTeX.latex(x.invert(), option);\n            den_c++;\n\n            if (x.isComposite()) {\n              if (symbol.multiplier.den != 1 && Math.abs(x.power) == 1) laTex = LaTeX.brackets(laTex, 'parens');\n              den_map.push(denominator.length); // make a note of where the composite was found\n            }\n\n            denominator.push(laTex);\n          } else {\n            laTex = LaTeX.latex(x, option);\n            num_c++;\n\n            if (x.isComposite()) {\n              if (symbol.multiplier.num != 1 && Math.abs(x.power) == 1) laTex = LaTeX.brackets(laTex, 'parens');\n              num_map.push(numerator.length); // make a note of where the composite was found\n            }\n\n            numerator.push(laTex);\n          }\n        }); // Apply brackets\n\n        setBrackets(numerator, num_map, num_c);\n        v[0] = numerator.join(this.dot); // collapse the numerator into one string\n\n        setBrackets(denominator, den_map, den_c);\n        v[1] = denominator.join(this.dot);\n      }\n\n      return v;\n    }\n  }, {\n    key: \"set\",\n    value: function set(m, v, p, combine_power) {\n      var isBracketed = function isBracketed(v) {\n        return /^\\\\left\\(.+\\\\right\\)$/.test(v);\n      }; // format the power if it exists\n\n\n      if (p) p = this.formatP(p); // group Groups.CB will have to be wrapped since the power applies to both it's numerator and denominator\n\n      if (combine_power) {\n        // POSSIBLE BUG: If powers for group Groups.CB format wrong, investigate this since I might have overlooked something\n        // the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\n        // of a case where this isn't true\n        var tp = p[0];\n        p[0] = ''; // temporarily make p blank\n      } // merge v and p. Not that v MUST be first since the order matters\n\n\n      v = this.merge(v, p);\n      var mn = m[0],\n          md = m[1],\n          vn = v[0],\n          vd = v[1]; // filters\n      // if the top has a variable but the numerator is one drop it\n\n      if (vn && Number(mn) === 1) mn = ''; // if denominator is 1 drop it always\n\n      if (Number(md) === 1) md = ''; // prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\n\n      var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : ''); // prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\n\n      var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : ''); // format the power if it exists\n      // make it a fraction if both top and bottom exists\n\n      if (top && bottom) {\n        var frac = this.frac(top, bottom);\n        if (combine_power && tp) frac = this.brackets(frac) + tp;\n        return frac;\n      } // otherwise only the top exists so return that\n      else return top;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(a, b) {\n      var r = [];\n\n      for (var i = 0; i < 2; i++) {\n        r[i] = a[i] + b[i];\n      }\n\n      return r;\n    } // joins together two strings if both exist\n\n  }, {\n    key: \"join\",\n    value: function join(n, d, glue) {\n      if (!n && !d) return '';\n      if (n && !d) return n;\n      if (d && !n) return d;\n      return n + glue + d;\n    }\n    /**\n     * Places subscripts in braces for proper formatting\n     * @param {String} v\n     * @returns {String}\n     */\n\n  }, {\n    key: \"formatSubscripts\",\n    value: function formatSubscripts(v) {\n      // Split it at the underscore\n      var arr = v.toString().split('_');\n      var name = ''; // Loop over all entries except the first one\n\n      while (arr.length > 1) {\n        // Wrap all in braces except for the last one\n        if (arr.length > 0) {\n          name = '_' + this.braces(arr.pop() + name);\n        }\n      }\n\n      return arr[0] + name;\n    }\n  }, {\n    key: \"formatP\",\n    value: function formatP(p_array) {\n      for (var i = 0; i < 2; i++) {\n        var p = p_array[i];\n        if (p) p_array[i] = '^' + this.braces(p);\n      }\n\n      return p_array;\n    }\n    /**\n     * formats the fractions accordingly.\n     * @param {Frac} f\n     * @param {boolean} is_pow\n     */\n\n  }, {\n    key: \"formatFrac\",\n    value: function formatFrac(f, is_pow) {\n      var n = f.num.toString(),\n          d = f.den.toString(); // no need to have x^1\n\n      if (is_pow && n === '1' && d === '1') return ''; // no need to have x/1\n\n      if (d === '1') return n;\n      return this.frac(n, d);\n    }\n  }, {\n    key: \"frac\",\n    value: function frac(n, d) {\n      return '\\\\frac' + this.braces(n) + this.braces(d);\n    }\n  }, {\n    key: \"braces\",\n    value: function braces(e) {\n      return '{' + e + '}';\n    }\n  }, {\n    key: \"brackets\",\n    value: function brackets(e, typ) {\n      typ = typ || 'parens';\n      var bracketTypes = {\n        parens: ['(', ')'],\n        square: ['[', ']'],\n        brace: ['{', '}'],\n        abs: ['|', '|'],\n        angle: ['\\\\langle', '\\\\rangle']\n      };\n      var bracket = bracketTypes[typ];\n      return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\n    }\n    /**\n     * Removes extreneous tokens\n     * @param {Tokens[]} tokens\n     * @returns {Tokens[]}\n     */\n\n  }, {\n    key: \"filterTokens\",\n    value: function filterTokens(tokens) {\n      var filtered = []; // Copy over the type of the scope\n\n      if (Array.isArray(tokens)) {\n        filtered.type = tokens.type;\n      } // the items that need to be disposed\n\n\n      var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n        var next_token = tokens[i + 1];\n\n        if (token.value === '\\\\' && next_token.value === '\\\\') {\n          filtered.push(token);\n        } else if (Array.isArray(token)) {\n          filtered.push(LaTeX.filterTokens(token));\n        } else if (d.indexOf(token.value) === -1) {\n          filtered.push(token);\n        }\n      }\n\n      return filtered;\n    }\n    /*\n     * Parses tokens from LaTeX string. Does not do any error checking\n     * @param {Tokens[]} rpn\n     * @returns {String}\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(raw_tokens) {\n      var i, l;\n      var retval = '';\n      var tokens = this.filterTokens(raw_tokens);\n      var replace = {\n        'cdot': '',\n        'times': '',\n        'infty': 'Infinity'\n      }; // get the next token\n\n      var next = function next(n) {\n        return tokens[typeof n === 'undefined' ? ++i : i += n];\n      };\n\n      var parse_next = function parse_next() {\n        return LaTeX.parse(next());\n      };\n\n      var get = function get(token) {\n        if (token in replace) {\n          return replace[token];\n        } // A quirk with implicit multiplication forces us to check for *\n\n\n        if (token === '*' && tokens[i + 1].value === '&') {\n          next(2); // skip this and the &\n\n          return ',';\n        }\n\n        if (token === '&') {\n          next();\n          return ','; // Skip the *\n        } // If it's the end of a row, return the row separator\n\n\n        if (token === '\\\\') {\n          return '],[';\n        }\n\n        return token;\n      }; // start parsing the tokens\n\n\n      for (i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i]; // fractions\n\n        if (token.value === 'frac') {\n          // parse and wrap it in brackets\n          var n = parse_next();\n          var d = parse_next();\n          retval += n + '/' + d;\n        } else if (token.value in LaTeX.symbols) {\n          if (token.value === Settings_1.Settings.SQRT && tokens[i + 1].type === 'vector' && tokens[i + 2].type === 'Set') {\n            var base = parse_next();\n            var expr = parse_next();\n            retval += expr + '^' + (0, Utils_1.inBrackets)('1/' + base);\n          } else {\n            retval += token.value + parse_next();\n          }\n        } else if (token.value === 'int') {\n          var f = parse_next(); // skip the comma\n\n          i++; // get the variable of integration\n\n          var dx = next().value;\n          dx = get(dx.substring(1, dx.length));\n          retval += 'integrate' + (0, Utils_1.inBrackets)(f + ',' + dx);\n        } else if (token.value === 'int_') {\n          var l = parse_next(); // lower\n\n          i++; // skip the ^\n\n          var u = next().value; // upper\n          // if it is in brackets\n\n          if (u === undefined) {\n            i--;\n            var u = parse_next();\n          }\n\n          var f = parse_next(); // function\n          // get the variable of integration\n\n          var dx = next().value; // skip the comma\n\n          if (dx === ',') {\n            var dx = next().value;\n          } // if 'd', skip\n\n\n          if (dx === 'differentialD') {\n            // skip the *\n            i++;\n            var dx = next().value;\n          }\n\n          if (dx === 'mathrm') {\n            // skip the mathrm{d}\n            i++;\n            var dx = next().value;\n          }\n\n          retval += 'defint' + (0, Utils_1.inBrackets)(f + ',' + l + ',' + u + ',' + dx);\n        } else if (token.value && token.value.startsWith('int_')) {\n          // var l = parse_next(); // lower\n          var l = token.value.replace('int_', '');\n          console.log('uppernow');\n          i++; // skip the ^\n\n          var u = next().value; // upper\n          // if it is in brackets\n\n          if (u === undefined) {\n            i--;\n            var u = parse_next();\n          }\n\n          var f = parse_next(); // function\n          // get the variable of integration\n\n          var dx = next().value; // skip the comma\n\n          if (dx === ',') {\n            var dx = next().value;\n          } // if 'd', skip\n\n\n          if (dx === 'differentialD') {\n            // skip the *\n            i++;\n            var dx = next().value;\n          }\n\n          if (dx === 'mathrm') {\n            // skip the mathrm{d}\n            i++;\n            var dx = next().value;\n          }\n\n          retval += 'defint' + (0, Utils_1.inBrackets)(f + ',' + l + ',' + u + ',' + dx);\n        } else if (token.value === 'mathrm') {\n          var f = tokens[++i][0].value;\n          retval += f + parse_next();\n        } // sum and product\n        else if (token.value === 'sum_' || token.value === 'prod_') {\n          var fn = token.value === 'sum_' ? 'sum' : 'product';\n          var nxt = next();\n          i++; // skip the caret\n\n          var end = parse_next();\n          var f = parse_next();\n          retval += fn + (0, Utils_1.inBrackets)([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\n        } else if (token.value === 'lim_') {\n          var nxt = next();\n          retval += 'limit' + (0, Utils_1.inBrackets)([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\n        } else if (token.value === 'begin') {\n          var nxt = next();\n\n          if (Array.isArray(nxt)) {\n            var v = nxt[0].value;\n\n            if (v === 'matrix') {\n              // Start a matrix\n              retval += 'matrix([';\n            }\n          }\n        } else if (token.value === 'end') {\n          var nxt = next();\n\n          if (Array.isArray(nxt)) {\n            var v = nxt[0].value;\n\n            if (v === 'matrix') {\n              // End a matrix\n              retval += '])';\n            }\n          }\n        } else {\n          if (Array.isArray(token)) {\n            retval += get(LaTeX.parse(token));\n          } else {\n            retval += get(token.value.toString());\n          }\n        }\n      }\n\n      return (0, Utils_1.inBrackets)(retval);\n    }\n  }]);\n\n  return LaTeX;\n}();\n\nexports.LaTeX = LaTeX;\n/** @deprecated */\n\nLaTeX.space = '~';\nLaTeX.dot = ' \\\\cdot ';\nLaTeX.greek = {\n  alpha: '\\\\alpha',\n  beta: '\\\\beta',\n  gamma: '\\\\gamma',\n  delta: '\\\\delta',\n  epsilon: '\\\\epsilon',\n  zeta: '\\\\zeta',\n  eta: '\\\\eta',\n  theta: '\\\\theta',\n  iota: '\\\\iota',\n  kappa: '\\\\kappa',\n  lambda: '\\\\lambda',\n  mu: '\\\\mu',\n  nu: '\\\\nu',\n  xi: '\\\\xi',\n  omnikron: '\\\\omnikron',\n  pi: '\\\\pi',\n  rho: '\\\\rho',\n  sigma: '\\\\sigma',\n  tau: '\\\\tau',\n  upsilon: \"\\\\upsilon\",\n  phi: '\\\\phi',\n  chi: '\\\\chi',\n  psi: '\\\\psi',\n  omega: '\\\\omega',\n  Gamma: '\\\\Gamma',\n  Delta: '\\\\Delta',\n  Epsilon: '\\\\Epsilon',\n  Theta: '\\\\Theta',\n  Lambda: '\\\\Lambda',\n  Xi: '\\\\Xi',\n  Pi: '\\\\Pi',\n  Sigma: '\\\\Sigma',\n  Phi: '\\\\Phi',\n  Psi: '\\\\Psi',\n  Omega: '\\\\Omega'\n};\nLaTeX.symbols = {\n  arccos: '\\\\arccos',\n  cos: '\\\\cos',\n  csc: '\\\\csc',\n  exp: '\\\\exp',\n  ker: '\\\\ker',\n  limsup: '\\\\limsup',\n  min: '\\\\min',\n  sinh: '\\\\sinh',\n  arcsin: '\\\\arcsin',\n  cosh: '\\\\cosh',\n  deg: '\\\\deg',\n  gcd: '\\\\gcd',\n  lg: '\\\\lg',\n  ln: '\\\\ln',\n  Pr: '\\\\Pr',\n  sqrt: '\\\\sqrt',\n  sup: '\\\\sup',\n  arctan: '\\\\arctan',\n  cot: '\\\\cot',\n  det: '\\\\det',\n  hom: '\\\\hom',\n  lim: '\\\\lim',\n  log: '\\\\log',\n  LN: '\\\\LN',\n  sec: '\\\\sec',\n  tan: '\\\\tan',\n  arg: '\\\\arg',\n  coth: '\\\\coth',\n  dim: '\\\\dim',\n  inf: '\\\\inf',\n  liminf: '\\\\liminf',\n  max: '\\\\max',\n  sin: '\\\\sin',\n  tanh: '\\\\tanh'\n};","map":{"version":3,"mappings":"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","names":["LaTeX","_parser","createParser","keep","parser","Parser_1","x","indexOf","setOperator","precedence","operator","action","prefix","postfix","leftAssoc","operation","e","brackets","getBrackets","maps_to","undefined","symbol","option","clone","Collection_1","elements","Array","isArray","LaTeXArray","i","length","sym","push","latex","join","TeX","rowTeX","j","decimal","power","invert","negative","multiplier","lessThan","group","Groups_1","P","String","toDecimal","Math","pow","value","abs","m_array","m","num","den","v_array","p","negate","formatFrac","p_array","index","retval","set","CB","replace","inverted","previousGroup","v","isInfinity","S","N","formatSubscripts","t_varray","split","greek","symbols","FN","name","input","fname","args","arg","item","Settings_1","SQRT","braces","ABS","PARENTHESIS","FACTORIAL","DOUBLEFACTORIAL","equals","isComposite","isCombination","LOG","LOG10","a","b","c","d","isConversion","collected","collectSymbols","sort","CP","y","l","isLinear","EX","distributeExponent","denominator","numerator","den_map","num_map","num_c","den_c","setBrackets","container","map","counter","idx","test","each","isDenom","laTex","dot","combine_power","isBracketed","formatP","tp","merge","mn","md","vn","vd","Number","top","bottom","frac","r","n","glue","arr","toString","pop","f","is_pow","typ","bracketTypes","parens","square","brace","angle","bracket","tokens","filtered","type","token","next_token","filterTokens","raw_tokens","next","parse_next","parse","get","base","expr","dx","substring","u","startsWith","console","log","fn","nxt","end","exports","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omnikron","pi","rho","sigma","tau","upsilon","phi","chi","psi","omega","Gamma","Delta","Epsilon","Theta","Lambda","Xi","Pi","Sigma","Phi","Psi","Omega","arccos","cos","csc","exp","ker","limsup","min","sinh","arcsin","cosh","deg","gcd","lg","ln","Pr","sqrt","sup","arctan","cot","det","hom","lim","LN","sec","tan","coth","dim","inf","liminf","max","sin","tanh"],"sourceRoot":"","sources":["../../src/LaTeX/LaTeX.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
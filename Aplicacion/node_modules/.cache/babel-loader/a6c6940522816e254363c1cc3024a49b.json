{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport nerdamer from \"nerdamer\";\n\nvar Polynomial = /*#__PURE__*/function () {\n  function Polynomial(p) {\n    _classCallCheck(this, Polynomial);\n\n    this.pol = \"0\";\n    this.lc = \"0\";\n    this.coefMap = {};\n    this.coefList = [];\n\n    try {\n      this.pol = nerdamer(p).expand().toString();\n    } catch (e) {\n      console.log(\"ERROR PARSING POLYNOMIAL \".concat(p));\n    }\n\n    console.log(this.pol);\n    this.findCoefficients(nerdamer.tree(this.pol));\n    console.log(\"FINAL COEFFS\");\n    console.log(this.coefMap);\n  }\n\n  _createClass(Polynomial, [{\n    key: \"multiply\",\n    value: function multiply(q) {\n      var product = \"\";\n\n      for (var keyP in this.coefMap) {\n        for (var keyQ in q.coefMap) {\n          console.log(\"(\".concat(this.coefMap[keyP], \"*\").concat(keyP, \") * (\").concat(q.coefMap[keyQ], \"*\").concat(keyQ, \")\"));\n          product += \"\".concat(product.length > 0 ? '+' : '', \" (\").concat(this.coefMap[keyP], \"*\").concat(keyP, \") * (\").concat(q.coefMap[keyQ], \"*\").concat(keyQ, \")\");\n        }\n      }\n\n      this.p = nerdamer(product).expand().toString();\n      console.log(\"PRODUCT;\");\n      console.log(this.p);\n    }\n  }, {\n    key: \"strContainsChar\",\n    value: function strContainsChar(str, chars) {\n      console.log(\"COMPROBANDO \" + str);\n\n      for (var i = 0; i < str.length; i++) {\n        if (chars.includes(str[i])) return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"expGrater\",\n    value: function expGrater(a, b) {\n      console.log(\"\".concat(a, \" > \").concat(b, \" : \").concat(a[0] > b[0] || a[0] == b[0] && a[1] > b[1] || a[0] == b[0] && a[1] == b[1] && a[2] > a[2]));\n      return a[0] > b[0] || a[0] == b[0] && a[1] > b[1] || a[0] == b[0] && a[1] == b[1] && a[2] > a[2];\n    }\n  }, {\n    key: \"exp\",\n    value: function exp(p) {\n      var _this = this;\n\n      var split = p.split(/[-+]+/); // separa por + o -\n\n      var res = [0, 0, 0];\n      split.forEach(function (element) {\n        if (element === '') return;\n        var degs = [Number(nerdamer(\"deg(\".concat(element, \", x)\")).toString()), Number(nerdamer(\"deg(\".concat(element, \", y)\")).toString()), Number(nerdamer(\"deg(\".concat(element, \", z)\")).toString())];\n        if (_this.expGrater(degs, res)) res = degs;\n      });\n      return res;\n    }\n  }, {\n    key: \"findCoefficients\",\n    value: function findCoefficients(node) {\n      var _this2 = this;\n\n      var pol = this.nodeToString(node);\n      var vars = ['x', 'y', 'z'];\n      if (node === null || node === undefined) return;\n\n      if (!node.left && !node.right) {\n        if (['x', 'y', 'z'].includes(node.value)) this.coefMap[node.value] = \"1\";else this.coefMap[\"1\"] = pol;\n        return;\n      }\n\n      console.log(pol);\n\n      if (!this.strContainsChar(pol, vars)) {\n        console.log(\"AÃ‘ADO \" + pol);\n        this.coefMap[\"1\"] = pol;\n        return;\n      }\n\n      console.log(pol);\n      var pattern = /[+-]/;\n\n      if (!pattern.test(pol) && pol !== '') {\n        // const coef = this.nodeToString(node.left);\n        // const variable = this.nodeToString(node.right);\n        var coef = \"\";\n        var variable = \"\";\n        var writingCoef = true;\n\n        for (var i = 0; i < pol.length; i++) {\n          if (['x', 'y', 'z'].includes(pol[i])) {\n            writingCoef = false;\n            if (coef.length === 0) coef = \"1\";\n            console.log(\"HOLA:\" + coef[coef.length - 1]);\n            if (coef[coef.length - 1] === \"*\") coef = coef.slice(0, -1);\n          }\n\n          if (!['(', ')'].includes(pol[i])) {\n            if (writingCoef) coef += pol[i];else variable += pol[i];\n          }\n        }\n\n        this.coefMap[variable] = coef;\n        console.log(\"COEF: \".concat(coef, \", VAR: \").concat(variable));\n      } else {\n        this.findCoefficients(node.left);\n        this.findCoefficients(node.right);\n      }\n\n      if (node !== null && node !== undefined) {\n        if (node.type === 'OPERATOR' && node.value === \"*\") {\n          console.log(\"PRODUC\");\n          console.log(node.left);\n          console.log(node.right);\n        }\n      }\n\n      var monomials = Object.keys(this.coefMap);\n      monomials = monomials.sort(function (a, b) {\n        _this2.expGrater(_this2.exp(a), _this2.exp(b));\n      });\n      console.log(this.coefMap);\n      console.log(\"MONOMIALS ORDENADOS: \");\n      console.log(monomials);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.pol;\n    }\n  }, {\n    key: \"nodeToString\",\n    value: function nodeToString(node) {\n      // console.log(node);\n      if (node !== null && node !== undefined) {\n        if (node.type === 'VARIABLE_OR_LITERAL') {\n          var isVariable = ['x', 'y', 'z'].includes(node.value); // console.log(\"ES LITERAL O VARIABLE: \" + node.value);\n          // console.log(node.value);\n\n          return isVariable ? node.value : parseFloat(node.value).toFixed(4);\n        }\n\n        if (node.type === 'OPERATOR') {\n          var _node$left, _node$right;\n\n          var left = this.nodeToString(node.left);\n          var right = this.nodeToString(node.right); // console.log(\"ES OPERATOR: \" + node.value);\n          // console.log(\"OPERATOR LEFT: \" + left);\n          // console.log(\"OPERATOR RIGHT: \" + right);\n          // console.log(`DEVUELVO ${(right && left) ? `${left}${node.value}${right}` : `${node.value}${left}`}`);\n\n          var leftParenthesis = ((_node$left = node.left) === null || _node$left === void 0 ? void 0 : _node$left.type) !== \"VARIABLE_OR_LITERAL\";\n          var rightParenthesis = ((_node$right = node.right) === null || _node$right === void 0 ? void 0 : _node$right.type) !== \"VARIABLE_OR_LITERAL\"; // console.log(\"OPERATOR: \" + node.value);\n          // console.log(\"TYPEL: \" + node.left.type);\n          // console.log(\"TYPER: \" + node.right.type);\n          // console.log(`PAR.LEFT: ${leftParenthesis}, RIGHT. PAR: ${rightParenthesis}`);\n\n          var l = leftParenthesis ? \"(\".concat(left, \")\") : \"\".concat(left);\n          var r = rightParenthesis ? \"(\".concat(right, \")\") : \"\".concat(right);\n          if (right && left) return \"\".concat(l).concat(node.value).concat(r);else return \"\".concat(node.value).concat(l);\n        }\n\n        if (node.type === 'FUNCTION') {\n          // console.log(\"ES F: \" + node.value);\n          var _left = this.nodeToString(node.left);\n\n          var _right = this.nodeToString(node.right); // console.log(`DEVUELVO ${left}${node.value}${right}`);\n\n\n          return \"\".concat(_left).concat(node.value).concat(_right);\n        }\n      }\n\n      return '';\n    }\n  }]);\n\n  return Polynomial;\n}();\n\nexport { Polynomial as default };","map":{"version":3,"names":["nerdamer","Polynomial","p","pol","lc","coefMap","coefList","expand","toString","e","console","log","findCoefficients","tree","q","product","keyP","keyQ","length","str","chars","i","includes","a","b","split","res","forEach","element","degs","Number","expGrater","node","nodeToString","vars","undefined","left","right","value","strContainsChar","pattern","test","coef","variable","writingCoef","slice","type","monomials","Object","keys","sort","exp","isVariable","parseFloat","toFixed","leftParenthesis","rightParenthesis","l","r"],"sources":["C:/Users/daniz/TFG/Aplicacion/src/Polynomial.js"],"sourcesContent":["import nerdamer from \"nerdamer\";\r\n\r\nexport default class Polynomial {\r\n    pol = \"0\";\r\n    lc = \"0\";\r\n    coefMap = {};\r\n    coefList = [];\r\n\r\n    constructor(p){\r\n        try{\r\n            this.pol = nerdamer(p).expand().toString();\r\n        }catch(e){\r\n            console.log(`ERROR PARSING POLYNOMIAL ${p}`);\r\n        }\r\n\r\n        console.log(this.pol);\r\n        this.findCoefficients(nerdamer.tree(this.pol));\r\n\r\n        console.log(\"FINAL COEFFS\");\r\n        console.log(this.coefMap);\r\n\r\n    }\r\n\r\n    multiply(q){\r\n      let product= \"\";\r\n\r\n      for (let keyP in this.coefMap) {\r\n        for (let keyQ in q.coefMap) {\r\n          console.log(`(${this.coefMap[keyP]}*${keyP}) * (${q.coefMap[keyQ]}*${keyQ})`);\r\n          product += `${product.length>0 ? '+' : ''} (${this.coefMap[keyP]}*${keyP}) * (${q.coefMap[keyQ]}*${keyQ})`;\r\n        }\r\n      }\r\n\r\n      this.p = nerdamer(product).expand().toString();\r\n      console.log(\"PRODUCT;\");\r\n      console.log(this.p);\r\n    }\r\n\r\n    strContainsChar(str, chars){\r\n      console.log(\"COMPROBANDO \" + str);\r\n      for(let i=0; i<str.length; i++){\r\n        if(chars.includes(str[i]))\r\n          return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    expGrater(a, b) {\r\n      console.log(`${a} > ${b} : ${a[0] > b[0] ||\r\n        (a[0] == b[0] && a[1] > b[1]) ||\r\n        (a[0] == b[0] && a[1] == b[1] && a[2] > a[2])}`);\r\n\r\n\r\n      return (\r\n        a[0] > b[0] ||\r\n        (a[0] == b[0] && a[1] > b[1]) ||\r\n        (a[0] == b[0] && a[1] == b[1] && a[2] > a[2])\r\n      );\r\n    }\r\n    \r\n    exp(p) {\r\n      const split = p.split(/[-+]+/); // separa por + o -\r\n      let res = [0,0,0];\r\n    \r\n      split.forEach((element) => {\r\n        if (element === '') return;\r\n    \r\n        let degs = [\r\n          Number(nerdamer(`deg(${element}, x)`).toString()),\r\n          Number(nerdamer(`deg(${element}, y)`).toString()),\r\n          Number(nerdamer(`deg(${element}, z)`).toString()),\r\n        ];\r\n    \r\n        if (this.expGrater(degs, res)) res = degs;\r\n      });\r\n    \r\n      return res;\r\n    }\r\n\r\n    findCoefficients(node){\r\n\r\n      const pol = this.nodeToString(node);\r\n      const vars = ['x', 'y', 'z'];\r\n\r\n      if(node===null || node===undefined)\r\n        return;\r\n\r\n      if(!node.left && !node.right){\r\n        if(['x','y','z'].includes(node.value))\r\n         this.coefMap[node.value] = \"1\";\r\n        else\r\n         this.coefMap[\"1\"] = pol;\r\n\r\n        return;\r\n      }\r\n\r\n      console.log(pol);\r\n      if(!this.strContainsChar(pol, vars)){\r\n        console.log(\"AÃ‘ADO \" + pol);\r\n       this.coefMap[\"1\"] = pol;\r\n        return;\r\n      }\r\n\r\n      console.log(pol);\r\n      var pattern = /[+-]/;\r\n\r\n      if(!pattern.test(pol) && pol!==''){\r\n        // const coef = this.nodeToString(node.left);\r\n        // const variable = this.nodeToString(node.right);\r\n\r\n        let coef = \"\";\r\n        let variable = \"\";\r\n        let writingCoef = true;\r\n\r\n        for(let i=0; i<pol.length; i++){\r\n          if(['x','y','z'].includes(pol[i])){\r\n            writingCoef = false;\r\n\r\n            if(coef.length === 0)\r\n              coef = \"1\";\r\n\r\n            console.log(\"HOLA:\" + coef[coef.length-1]);\r\n            if(coef[coef.length-1] === \"*\")\r\n              coef = coef.slice(0, -1);\r\n          }\r\n\r\n          \r\n          if(!['(', ')'].includes(pol[i])){\r\n            if(writingCoef) coef += pol[i];\r\n            else            variable += pol[i];\r\n          }\r\n        }\r\n\r\n       this.coefMap[variable] = coef;\r\n\r\n        console.log(`COEF: ${coef}, VAR: ${variable}`);\r\n      }\r\n      else{\r\n        this.findCoefficients(node.left);\r\n        this.findCoefficients(node.right);\r\n      }\r\n\r\n      if (node!==null && node!==undefined) {\r\n        if(node.type === 'OPERATOR' && node.value === \"*\"){\r\n          console.log(\"PRODUC\");\r\n          console.log(node.left);\r\n          console.log(node.right);\r\n        }\r\n      }\r\n\r\n      let monomials = Object.keys(this.coefMap);\r\n      monomials = monomials.sort((a,b)=>{this.expGrater(this.exp(a), this.exp(b))});\r\n      console.log(this.coefMap);\r\n      console.log(\"MONOMIALS ORDENADOS: \");\r\n      console.log(monomials);\r\n    }\r\n\r\n    \r\n    toString(){\r\n      return this.pol;\r\n    }\r\n\r\n    nodeToString(node) {\r\n        // console.log(node);\r\n        if (node!==null && node!==undefined) {\r\n\r\n          if (node.type === 'VARIABLE_OR_LITERAL') {\r\n            const isVariable = ['x', 'y', 'z'].includes(node.value);\r\n            // console.log(\"ES LITERAL O VARIABLE: \" + node.value);\r\n            // console.log(node.value);\r\n            return isVariable ? node.value : parseFloat(node.value).toFixed(4);\r\n          }\r\n\r\n          if (node.type === 'OPERATOR') {\r\n            \r\n            let left = this.nodeToString(node.left);\r\n            let right = this.nodeToString(node.right);\r\n\r\n            // console.log(\"ES OPERATOR: \" + node.value);\r\n            // console.log(\"OPERATOR LEFT: \" + left);\r\n            // console.log(\"OPERATOR RIGHT: \" + right);\r\n            // console.log(`DEVUELVO ${(right && left) ? `${left}${node.value}${right}` : `${node.value}${left}`}`);\r\n\r\n            const leftParenthesis = node.left?.type!==\"VARIABLE_OR_LITERAL\";\r\n            const rightParenthesis = node.right?.type!==\"VARIABLE_OR_LITERAL\";\r\n\r\n            // console.log(\"OPERATOR: \" + node.value);\r\n            // console.log(\"TYPEL: \" + node.left.type);\r\n            // console.log(\"TYPER: \" + node.right.type);\r\n            // console.log(`PAR.LEFT: ${leftParenthesis}, RIGHT. PAR: ${rightParenthesis}`);\r\n            const l = leftParenthesis ? `(${left})` : `${left}`;\r\n            const r = rightParenthesis ? `(${right})` : `${right}`;\r\n\r\n            if(right && left)   return `${l}${node.value}${r}`;\r\n            else                return `${node.value}${l}`;\r\n          }\r\n\r\n          if (node.type === 'FUNCTION') {\r\n            // console.log(\"ES F: \" + node.value);\r\n            let left = this.nodeToString(node.left);\r\n            let right = this.nodeToString(node.right);\r\n            \r\n            // console.log(`DEVUELVO ${left}${node.value}${right}`);\r\n            return `${left}${node.value}${right}`;\r\n            \r\n          }\r\n        }\r\n\r\n        return '';\r\n      };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
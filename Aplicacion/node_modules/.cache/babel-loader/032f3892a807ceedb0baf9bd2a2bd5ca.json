{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OperatorDictionary = void 0;\n\nvar Settings_1 = require(\"../Settings\"); // @ts-ignore\n\n\nvar Symbol_1 = require(\"../Types/Symbol\");\n\nvar Core_1 = require(\"../Functions/Core\");\n\nvar OperatorDictionary = /*#__PURE__*/function () {\n  function OperatorDictionary() {\n    _classCallCheck(this, OperatorDictionary);\n\n    this.operators = {};\n    this.brackets = {\n      '(': {\n        type: 'round',\n        id: 1,\n        is_open: true,\n        is_close: false\n      },\n      ')': {\n        type: 'round',\n        id: 2,\n        is_open: false,\n        is_close: true\n      },\n      '[': {\n        type: 'square',\n        id: 3,\n        is_open: true,\n        is_close: false,\n        maps_to: 'vector'\n      },\n      ']': {\n        type: 'square',\n        id: 4,\n        is_open: false,\n        is_close: true\n      },\n      '{': {\n        type: 'curly',\n        id: 5,\n        is_open: true,\n        is_close: false,\n        maps_to: 'Set'\n      },\n      '}': {\n        type: 'curly',\n        id: 6,\n        is_open: false,\n        is_close: true\n      }\n    };\n    this.operators = {\n      '\\\\': {\n        precedence: 8,\n        operator: '\\\\',\n        action: 'slash',\n        prefix: true,\n        postfix: false,\n        leftAssoc: true,\n        operation: function operation(e) {\n          return e; //bypass the slash\n        }\n      },\n      '!!': {\n        precedence: 7,\n        operator: '!!',\n        action: 'dfactorial',\n        prefix: false,\n        postfix: true,\n        leftAssoc: true,\n        operation: function operation(e) {\n          return (0, Symbol_1.symfunction)(Settings_1.Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\n        }\n      },\n      '!': {\n        precedence: 7,\n        operator: '!',\n        action: 'factorial',\n        prefix: false,\n        postfix: true,\n        leftAssoc: true,\n        operation: function operation(e) {\n          return (0, Core_1.factorial)(e); //wrap it in a factorial function\n        }\n      },\n      '^': {\n        precedence: 6,\n        operator: '^',\n        action: 'pow',\n        prefix: false,\n        postfix: false,\n        leftAssoc: true\n      },\n      '**': {\n        precedence: 6,\n        operator: '**',\n        action: 'pow',\n        prefix: false,\n        postfix: false,\n        leftAssoc: true\n      },\n      '%': {\n        precedence: 4,\n        operator: '%',\n        action: 'percent',\n        prefix: false,\n        postfix: true,\n        leftAssoc: true,\n        overloaded: true,\n        overloadAction: 'mod',\n        overloadLeftAssoc: false,\n        operation: function operation(x) {\n          return (0, Core_1.divide)(x, new Symbol_1.Symbol(100));\n        }\n      },\n      '*': {\n        precedence: 4,\n        operator: '*',\n        action: 'multiply',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '/': {\n        precedence: 4,\n        operator: '/',\n        action: 'divide',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '+': {\n        precedence: 3,\n        operator: '+',\n        action: 'add',\n        prefix: true,\n        postfix: false,\n        leftAssoc: false,\n        operation: function operation(x) {\n          return x;\n        }\n      },\n      'plus': {\n        precedence: 3,\n        operator: 'plus',\n        action: 'add',\n        prefix: true,\n        postfix: false,\n        leftAssoc: false,\n        operation: function operation(x) {\n          return x;\n        }\n      },\n      '-': {\n        precedence: 3,\n        operator: '-',\n        action: 'subtract',\n        prefix: true,\n        postfix: false,\n        leftAssoc: false,\n        operation: function operation(x) {\n          return x.negate();\n        }\n      },\n      '=': {\n        precedence: 2,\n        operator: '=',\n        action: 'equals',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '==': {\n        precedence: 1,\n        operator: '==',\n        action: 'eq',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '<': {\n        precedence: 1,\n        operator: '<',\n        action: 'lt',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '<=': {\n        precedence: 1,\n        operator: '<=',\n        action: 'lte',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '>': {\n        precedence: 1,\n        operator: '>',\n        action: 'gt',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '=>': {\n        precedence: 1,\n        operator: '=>',\n        action: 'gte',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      ',': {\n        precedence: 0,\n        operator: ',',\n        action: 'comma',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      ':': {\n        precedence: 0,\n        operator: ',',\n        action: 'assign',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false,\n        vectorFn: 'slice'\n      },\n      ':=': {\n        precedence: 0,\n        operator: ',',\n        action: 'function_assign',\n        prefix: false,\n        postfix: false,\n        leftAssoc: true\n      }\n    };\n  }\n\n  _createClass(OperatorDictionary, [{\n    key: \"injectOperatorsDeps\",\n    value: function injectOperatorsDeps(depsFunction) {\n      this.deps = depsFunction;\n    }\n    /**\n     * Replaces nerdamer.setOperator\n     * @param {object} operator\n     * @param action\n     * @param {'over' | 'under'} shift\n     */\n\n  }, {\n    key: \"setOperator\",\n    value: function setOperator(operator, action, shift) {\n      var name = operator.operator; //take the name to be the symbol\n\n      this.operators[name] = operator;\n\n      if (action) {\n        this.deps.registerOperator(operator.action, action);\n      } //make the parser aware of the operator\n\n\n      this.deps.registerOperator(name, operator.operation); //make the action available to the parser if infix\n\n      if (!operator.action && !(operator.prefix || operator.postfix)) {\n        operator.action = name;\n      } //if this operator is exclusive then all successive operators should be shifted\n\n\n      if (shift === 'over' || shift === 'under') {\n        var precedence = operator.precedence;\n\n        for (var x in this.operators) {\n          var o = this.operators[x];\n          var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\n\n          if (condition) {\n            o.precedence++;\n          }\n        }\n      }\n    }\n    /**\n     * Gets an opererator by its symbol\n     * @param {String} operator\n     * @returns {OperatorDescriptor}\n     */\n\n  }, {\n    key: \"getOperator\",\n    value: function getOperator(operator) {\n      return this.operators[operator];\n    }\n  }, {\n    key: \"aliasOperator\",\n    value: function aliasOperator(o, n) {\n      var operator = this.operators[o]; //copy everything over to the new operator\n\n      var t = Object.assign({}, operator); //update the symbol\n\n      t.operator = n;\n      this.setOperator(t);\n    }\n    /**\n     * Returns the list of operators. Caution! Can break parser!\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getOperators\",\n    value: function getOperators() {\n      //will replace this with some cloning action in the future\n      return this.operators;\n    }\n  }, {\n    key: \"getBrackets\",\n    value: function getBrackets() {\n      return this.brackets;\n    }\n  }, {\n    key: \"isOperator\",\n    value: function isOperator(name) {\n      return name in this.operators;\n    }\n  }]);\n\n  return OperatorDictionary;\n}();\n\nexports.OperatorDictionary = OperatorDictionary;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA,wC,CACA;;;AACA;;AACA;;IAkCaA,kB;EAIT;IAAA;;IAFQ,iBAAgD,EAAhD;IAqMR,gBAAqB;MACjB,KAAK;QACDC,IAAI,EAAE,OADL;QAEDC,EAAE,EAAE,CAFH;QAGDC,OAAO,EAAE,IAHR;QAIDC,QAAQ,EAAE;MAJT,CADY;MAOjB,KAAK;QACDH,IAAI,EAAE,OADL;QAEDC,EAAE,EAAE,CAFH;QAGDC,OAAO,EAAE,KAHR;QAIDC,QAAQ,EAAE;MAJT,CAPY;MAajB,KAAK;QACDH,IAAI,EAAE,QADL;QAEDC,EAAE,EAAE,CAFH;QAGDC,OAAO,EAAE,IAHR;QAIDC,QAAQ,EAAE,KAJT;QAKDC,OAAO,EAAE;MALR,CAbY;MAoBjB,KAAK;QACDJ,IAAI,EAAE,QADL;QAEDC,EAAE,EAAE,CAFH;QAGDC,OAAO,EAAE,KAHR;QAIDC,QAAQ,EAAE;MAJT,CApBY;MA0BjB,KAAK;QACDH,IAAI,EAAE,OADL;QAEDC,EAAE,EAAE,CAFH;QAGDC,OAAO,EAAE,IAHR;QAIDC,QAAQ,EAAE,KAJT;QAKDC,OAAO,EAAE;MALR,CA1BY;MAiCjB,KAAK;QACDJ,IAAI,EAAE,OADL;QAEDC,EAAE,EAAE,CAFH;QAGDC,OAAO,EAAE,KAHR;QAIDC,QAAQ,EAAE;MAJT;IAjCY,CAArB;IAlMI,KAAKE,SAAL,GAAiB;MACb,MAAM;QACFC,UAAU,EAAE,CADV;QAEFC,QAAQ,EAAE,IAFR;QAGFC,MAAM,EAAE,OAHN;QAIFC,MAAM,EAAE,IAJN;QAKFC,OAAO,EAAE,KALP;QAMFC,SAAS,EAAE,IANT;QAOFC,SAAS,EAAE,mBAAUC,CAAV,EAAgB;UACvB,OAAOA,CAAP,CADuB,CACb;QACb;MATC,CADO;MAYb,MAAM;QACFP,UAAU,EAAE,CADV;QAEFC,QAAQ,EAAE,IAFR;QAGFC,MAAM,EAAE,YAHN;QAIFC,MAAM,EAAE,KAJN;QAKFC,OAAO,EAAE,IALP;QAMFC,SAAS,EAAE,IANT;QAOFC,SAAS,EAAE,mBAACC,CAAD,EAAW;UAClB,OAAO,0BAAYC,oBAASC,eAArB,EAAsC,CAACF,CAAD,CAAtC,CAAP,CADkB,CACiC;QACtD;MATC,CAZO;MAuBb,KAAK;QACDP,UAAU,EAAE,CADX;QAEDC,QAAQ,EAAE,GAFT;QAGDC,MAAM,EAAE,WAHP;QAIDC,MAAM,EAAE,KAJP;QAKDC,OAAO,EAAE,IALR;QAMDC,SAAS,EAAE,IANV;QAODC,SAAS,EAAE,mBAACC,CAAD,EAAW;UAClB,OAAO,sBAAUA,CAAV,CAAP,CADkB,CACG;QACxB;MATA,CAvBQ;MAkCb,KAAK;QACDP,UAAU,EAAE,CADX;QAEDC,QAAQ,EAAE,GAFT;QAGDC,MAAM,EAAE,KAHP;QAIDC,MAAM,EAAE,KAJP;QAKDC,OAAO,EAAE,KALR;QAMDC,SAAS,EAAE;MANV,CAlCQ;MA0Cb,MAAM;QACFL,UAAU,EAAE,CADV;QAEFC,QAAQ,EAAE,IAFR;QAGFC,MAAM,EAAE,KAHN;QAIFC,MAAM,EAAE,KAJN;QAKFC,OAAO,EAAE,KALP;QAMFC,SAAS,EAAE;MANT,CA1CO;MAkDb,KAAK;QACDL,UAAU,EAAE,CADX;QAEDC,QAAQ,EAAE,GAFT;QAGDC,MAAM,EAAE,SAHP;QAIDC,MAAM,EAAE,KAJP;QAKDC,OAAO,EAAE,IALR;QAMDC,SAAS,EAAE,IANV;QAODK,UAAU,EAAE,IAPX;QAQDC,cAAc,EAAE,KARf;QASDC,iBAAiB,EAAE,KATlB;QAUDN,SAAS,EAAE,mBAACO,CAAD,EAAW;UAClB,OAAO,mBAAOA,CAAP,EAAU,IAAIC,eAAJ,CAAW,GAAX,CAAV,CAAP;QACH;MAZA,CAlDQ;MAgEb,KAAK;QACDd,UAAU,EAAE,CADX;QAEDC,QAAQ,EAAE,GAFT;QAGDC,MAAM,EAAE,UAHP;QAIDC,MAAM,EAAE,KAJP;QAKDC,OAAO,EAAE,KALR;QAMDC,SAAS,EAAE;MANV,CAhEQ;MAwEb,KAAK;QACDL,UAAU,EAAE,CADX;QAEDC,QAAQ,EAAE,GAFT;QAGDC,MAAM,EAAE,QAHP;QAIDC,MAAM,EAAE,KAJP;QAKDC,OAAO,EAAE,KALR;QAMDC,SAAS,EAAE;MANV,CAxEQ;MAgFb,KAAK;QACDL,UAAU,EAAE,CADX;QAEDC,QAAQ,EAAE,GAFT;QAGDC,MAAM,EAAE,KAHP;QAIDC,MAAM,EAAE,IAJP;QAKDC,OAAO,EAAE,KALR;QAMDC,SAAS,EAAE,KANV;QAODC,SAAS,EAAE,mBAACO,CAAD,EAAW;UAClB,OAAOA,CAAP;QACH;MATA,CAhFQ;MA2Fb,QAAQ;QACJb,UAAU,EAAE,CADR;QAEJC,QAAQ,EAAE,MAFN;QAGJC,MAAM,EAAE,KAHJ;QAIJC,MAAM,EAAE,IAJJ;QAKJC,OAAO,EAAE,KALL;QAMJC,SAAS,EAAE,KANP;QAOJC,SAAS,EAAE,mBAACO,CAAD,EAAW;UAClB,OAAOA,CAAP;QACH;MATG,CA3FK;MAsGb,KAAK;QACDb,UAAU,EAAE,CADX;QAEDC,QAAQ,EAAE,GAFT;QAGDC,MAAM,EAAE,UAHP;QAIDC,MAAM,EAAE,IAJP;QAKDC,OAAO,EAAE,KALR;QAMDC,SAAS,EAAE,KANV;QAODC,SAAS,EAAE,mBAACO,CAAD,EAAW;UAClB,OAAOA,CAAC,CAACE,MAAF,EAAP;QACH;MATA,CAtGQ;MAiHb,KAAK;QACDf,UAAU,EAAE,CADX;QAEDC,QAAQ,EAAE,GAFT;QAGDC,MAAM,EAAE,QAHP;QAIDC,MAAM,EAAE,KAJP;QAKDC,OAAO,EAAE,KALR;QAMDC,SAAS,EAAE;MANV,CAjHQ;MAyHb,MAAM;QACFL,UAAU,EAAE,CADV;QAEFC,QAAQ,EAAE,IAFR;QAGFC,MAAM,EAAE,IAHN;QAIFC,MAAM,EAAE,KAJN;QAKFC,OAAO,EAAE,KALP;QAMFC,SAAS,EAAE;MANT,CAzHO;MAiIb,KAAK;QACDL,UAAU,EAAE,CADX;QAEDC,QAAQ,EAAE,GAFT;QAGDC,MAAM,EAAE,IAHP;QAIDC,MAAM,EAAE,KAJP;QAKDC,OAAO,EAAE,KALR;QAMDC,SAAS,EAAE;MANV,CAjIQ;MAyIb,MAAM;QACFL,UAAU,EAAE,CADV;QAEFC,QAAQ,EAAE,IAFR;QAGFC,MAAM,EAAE,KAHN;QAIFC,MAAM,EAAE,KAJN;QAKFC,OAAO,EAAE,KALP;QAMFC,SAAS,EAAE;MANT,CAzIO;MAiJb,KAAK;QACDL,UAAU,EAAE,CADX;QAEDC,QAAQ,EAAE,GAFT;QAGDC,MAAM,EAAE,IAHP;QAIDC,MAAM,EAAE,KAJP;QAKDC,OAAO,EAAE,KALR;QAMDC,SAAS,EAAE;MANV,CAjJQ;MAyJb,MAAM;QACFL,UAAU,EAAE,CADV;QAEFC,QAAQ,EAAE,IAFR;QAGFC,MAAM,EAAE,KAHN;QAIFC,MAAM,EAAE,KAJN;QAKFC,OAAO,EAAE,KALP;QAMFC,SAAS,EAAE;MANT,CAzJO;MAiKb,KAAK;QACDL,UAAU,EAAE,CADX;QAEDC,QAAQ,EAAE,GAFT;QAGDC,MAAM,EAAE,OAHP;QAIDC,MAAM,EAAE,KAJP;QAKDC,OAAO,EAAE,KALR;QAMDC,SAAS,EAAE;MANV,CAjKQ;MAyKb,KAAK;QACDL,UAAU,EAAE,CADX;QAEDC,QAAQ,EAAE,GAFT;QAGDC,MAAM,EAAE,QAHP;QAIDC,MAAM,EAAE,KAJP;QAKDC,OAAO,EAAE,KALR;QAMDC,SAAS,EAAE,KANV;QAODW,QAAQ,EAAE;MAPT,CAzKQ;MAkLb,MAAM;QACFhB,UAAU,EAAE,CADV;QAEFC,QAAQ,EAAE,GAFR;QAGFC,MAAM,EAAE,iBAHN;QAIFC,MAAM,EAAE,KAJN;QAKFC,OAAO,EAAE,KALP;QAMFC,SAAS,EAAE;MANT;IAlLO,CAAjB;EA2LH;;;;WAGD,6BAAoBY,YAApB,EAAuD;MACnD,KAAKC,IAAL,GAAYD,YAAZ;IACH;IA2CD;;;;;;;;;WAMA,qBAAYhB,QAAZ,EAA0CC,MAA1C,EAAsEiB,KAAtE,EAA8F;MAC1F,IAAIC,IAAI,GAAGnB,QAAQ,CAACA,QAApB,CAD0F,CAC5D;;MAC9B,KAAKF,SAAL,CAAeqB,IAAf,IAAuBnB,QAAvB;;MACA,IAAIC,MAAJ,EAAY;QACR,KAAKgB,IAAL,CAAUG,gBAAV,CAA2BpB,QAAQ,CAACC,MAApC,EAA4CA,MAA5C;MACH,CALyF,CAO1F;;;MACA,KAAKgB,IAAL,CAAUG,gBAAV,CAA2BD,IAA3B,EAAiCnB,QAAQ,CAACK,SAA1C,EAR0F,CAU1F;;MACA,IAAI,CAACL,QAAQ,CAACC,MAAV,IAAoB,EAAED,QAAQ,CAACE,MAAT,IAAmBF,QAAQ,CAACG,OAA9B,CAAxB,EAAgE;QAC5DH,QAAQ,CAACC,MAAT,GAAkBkB,IAAlB;MACH,CAbyF,CAe1F;;;MACA,IAAID,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,OAAlC,EAA2C;QACvC,IAAInB,UAAU,GAAGC,QAAQ,CAACD,UAA1B;;QAEA,KAAK,IAAIa,CAAT,IAAc,KAAKd,SAAnB,EAA8B;UAC1B,IAAIuB,CAAC,GAAG,KAAKvB,SAAL,CAAec,CAAf,CAAR;UACA,IAAIU,SAAS,GAAGJ,KAAK,KAAK,MAAV,GAAmBG,CAAC,CAACtB,UAAF,IAAgBA,UAAnC,GAAgDsB,CAAC,CAACtB,UAAF,GAAeA,UAA/E;;UACA,IAAIuB,SAAJ,EAAe;YACXD,CAAC,CAACtB,UAAF;UACH;QACJ;MACJ;IACJ;IAED;;;;;;;;WAKA,qBAAYC,QAAZ,EAA4B;MACxB,OAAO,KAAKF,SAAL,CAAeE,QAAf,CAAP;IACH;;;WAED,uBAAcqB,CAAd,EAAyBE,CAAzB,EAAkC;MAC9B,IAAIvB,QAAQ,GAAG,KAAKF,SAAL,CAAeuB,CAAf,CAAf,CAD8B,CAG9B;;MACA,IAAIG,CAAC,qBACExB,QADF,CAAL,CAJ8B,CAQ9B;;MACAwB,CAAC,CAACxB,QAAF,GAAauB,CAAb;MACA,KAAKE,WAAL,CAAiBD,CAAjB;IACH;IAED;;;;;;;WAIA,wBAAY;MACR;MACA,OAAO,KAAK1B,SAAZ;IACH;;;WAED,uBAAW;MACP,OAAO,KAAK4B,QAAZ;IACH;;;WAED,oBAAWP,IAAX,EAAuB;MACnB,OAAQA,IAAI,IAAI,KAAKrB,SAArB;IACH;;;;;;AAxTL6B","names":["OperatorDictionary","type","id","is_open","is_close","maps_to","operators","precedence","operator","action","prefix","postfix","leftAssoc","operation","e","Settings_1","DOUBLEFACTORIAL","overloaded","overloadAction","overloadLeftAssoc","x","Symbol_1","negate","vectorFn","depsFunction","deps","shift","name","registerOperator","o","condition","n","t","setOperator","brackets","exports"],"sourceRoot":"","sources":["../../src/Providers/OperatorDictionary.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
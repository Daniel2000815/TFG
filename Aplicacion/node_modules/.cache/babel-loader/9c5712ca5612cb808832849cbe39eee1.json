{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isZeroNumber } from '../../plain/number/index.js';\nvar name = 'isZero';\nvar dependencies = ['typed'];\nexport var createIsZero = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\r\n   * Test whether a value is zero.\r\n   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\r\n   * `Complex`, and `Unit`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isZero(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isZero(0)                      // returns true\r\n   *    math.isZero(2)                      // returns false\r\n   *    math.isZero(0.5)                    // returns false\r\n   *    math.isZero(math.bignumber(0))      // returns true\r\n   *    math.isZero(math.fraction(0))       // returns true\r\n   *    math.isZero(math.fraction(1,3))     // returns false\r\n   *    math.isZero(math.complex('2 - 4i')) // returns false\r\n   *    math.isZero(math.complex('0i'))     // returns true\r\n   *    math.isZero('0')                    // returns true\r\n   *    math.isZero('2')                    // returns false\r\n   *    math.isZero([2, 0, -3])             // returns [false, true, false]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isPositive, isNegative, isInteger\r\n   *\r\n   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\r\n   * @return {boolean}  Returns true when `x` is zero.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\n\n  return typed(name, {\n    number: isZeroNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isZero();\n    },\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && x.n === 0;\n    },\n    Unit: typed.referToSelf(function (self) {\n      return function (x) {\n        return typed.find(self, x.valueType())(x.value);\n      };\n    }),\n    'Array | Matrix': typed.referToSelf(function (self) {\n      return function (x) {\n        return deepMap(x, self);\n      };\n    })\n  });\n});","map":{"version":3,"names":["deepMap","factory","isZeroNumber","name","dependencies","createIsZero","_ref","typed","number","BigNumber","x","isZero","Complex","re","im","Fraction","d","n","Unit","referToSelf","self","find","valueType","value"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/mathjs/lib/esm/function/utils/isZero.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { isZeroNumber } from '../../plain/number/index.js';\r\nvar name = 'isZero';\r\nvar dependencies = ['typed'];\r\nexport var createIsZero = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Test whether a value is zero.\r\n   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\r\n   * `Complex`, and `Unit`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isZero(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isZero(0)                      // returns true\r\n   *    math.isZero(2)                      // returns false\r\n   *    math.isZero(0.5)                    // returns false\r\n   *    math.isZero(math.bignumber(0))      // returns true\r\n   *    math.isZero(math.fraction(0))       // returns true\r\n   *    math.isZero(math.fraction(1,3))     // returns false\r\n   *    math.isZero(math.complex('2 - 4i')) // returns false\r\n   *    math.isZero(math.complex('0i'))     // returns true\r\n   *    math.isZero('0')                    // returns true\r\n   *    math.isZero('2')                    // returns false\r\n   *    math.isZero([2, 0, -3])             // returns [false, true, false]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isPositive, isNegative, isInteger\r\n   *\r\n   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\r\n   * @return {boolean}  Returns true when `x` is zero.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\r\n  return typed(name, {\r\n    number: isZeroNumber,\r\n    BigNumber: function BigNumber(x) {\r\n      return x.isZero();\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.re === 0 && x.im === 0;\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return x.d === 1 && x.n === 0;\r\n    },\r\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC3E,IACEC,KADF,GAEID,IAFJ,CACEC,KADF;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOA,KAAK,CAACJ,IAAD,EAAO;IACjBK,MAAM,EAAEN,YADS;IAEjBO,SAAS,EAAE,SAASA,SAAT,CAAmBC,CAAnB,EAAsB;MAC/B,OAAOA,CAAC,CAACC,MAAF,EAAP;IACD,CAJgB;IAKjBC,OAAO,EAAE,SAASA,OAAT,CAAiBF,CAAjB,EAAoB;MAC3B,OAAOA,CAAC,CAACG,EAAF,KAAS,CAAT,IAAcH,CAAC,CAACI,EAAF,KAAS,CAA9B;IACD,CAPgB;IAQjBC,QAAQ,EAAE,SAASA,QAAT,CAAkBL,CAAlB,EAAqB;MAC7B,OAAOA,CAAC,CAACM,CAAF,KAAQ,CAAR,IAAaN,CAAC,CAACO,CAAF,KAAQ,CAA5B;IACD,CAVgB;IAWjBC,IAAI,EAAEX,KAAK,CAACY,WAAN,CAAkB,UAAAC,IAAI;MAAA,OAAI,UAAAV,CAAC;QAAA,OAAIH,KAAK,CAACc,IAAN,CAAWD,IAAX,EAAiBV,CAAC,CAACY,SAAF,EAAjB,EAAgCZ,CAAC,CAACa,KAAlC,CAAJ;MAAA,CAAL;IAAA,CAAtB,CAXW;IAYjB,kBAAkBhB,KAAK,CAACY,WAAN,CAAkB,UAAAC,IAAI;MAAA,OAAI,UAAAV,CAAC;QAAA,OAAIV,OAAO,CAACU,CAAD,EAAIU,IAAJ,CAAX;MAAA,CAAL;IAAA,CAAtB;EAZD,CAAP,CAAZ;AAcD,CApD+C,CAAzC"},"metadata":{},"sourceType":"module"}
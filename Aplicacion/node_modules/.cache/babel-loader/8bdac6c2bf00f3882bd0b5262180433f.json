{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.multiply = void 0;\nvar Symbol_1 = require(\"../../../Types/Symbol\");\nvar Collection_1 = require(\"../../../Parser/Collection\");\nvar Errors_1 = require(\"../../../Core/Errors\");\nvar Settings_1 = require(\"../../../Settings\");\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\nvar Groups_1 = require(\"../../../Types/Groups\");\nvar Frac_1 = require(\"../../../Types/Frac\");\nvar divide_1 = require(\"./divide\");\nvar Utils_1 = require(\"../../../Core/Utils\");\nvar subtract_1 = require(\"./subtract\");\nvar add_1 = require(\"./add\");\nvar pow_1 = require(\"./pow\");\nvar Text_1 = require(\"../../../Core/Text\");\nvar Matrix_1 = require(\"../../../Types/Matrix\");\nvar index_1 = require(\"../index\");\nvar Parser_1 = require(\"../../../Parser/Parser\");\n/**\n * Gets called when the parser finds the * operator. See this.add\n * @param {Symbol} a\n * @param {Symbol} b\n * @returns {Symbol}\n */\nfunction multiply(a, b) {\n  var aIsSymbol = (0, Utils_1.isSymbol)(a),\n    bIsSymbol = (0, Utils_1.isSymbol)(b);\n  //we're dealing with function assignment here\n  if (aIsSymbol && b instanceof Collection_1.Collection) {\n    b.elements.push(a);\n    return b;\n  }\n  if (aIsSymbol && bIsSymbol) {\n    //if it has a unit then add it and return it right away.\n    if (b.isUnit) {\n      var result = a.clone();\n      a.unit = b;\n      return result;\n    }\n    //if it has units then just forward that problem to the unit module\n    if (a.unit || b.unit) {\n      return deps.Unit.multiply(a, b);\n    }\n    //handle Infinty\n    if (a.isInfinity || b.isInfinity) {\n      if (a.equals(0) || b.equals(0)) throw new Errors_1.UndefinedError(a + '*' + b + ' is undefined!');\n      //x/infinity\n      if (b.power.lessThan(0)) {\n        if (!a.isInfinity) {\n          return new Symbol_1.Symbol(0);\n        } else {\n          throw new Errors_1.UndefinedError('Infinity/Infinity is not defined!');\n        }\n      }\n      var sign = a.multiplier.multiply(b.multiplier).sign(),\n        inf = Symbol_1.Symbol.infinity();\n      if (a.isConstant() || b.isConstant() || a.isInfinity && b.isInfinity) {\n        if (sign < 0) inf.negate();\n        return inf;\n      }\n    }\n    //the quickies\n    if (a.isConstant() && b.isConstant() && Settings_1.Settings.PARSE2NUMBER) {\n      var t = new decimal_js_1.default(a.multiplier.toDecimal()).times(new decimal_js_1.default(b.multiplier.toDecimal())).toFixed();\n      var retval = new Symbol_1.Symbol(t);\n      return retval;\n    }\n    //don't waste time\n    if (a.isOne()) {\n      return b.clone();\n    }\n    if (b.isOne()) {\n      return a.clone();\n    }\n    if (a.multiplier.equals(0) || b.multiplier.equals(0)) return new Symbol_1.Symbol(0);\n    if (b.group > a.group && !(b.group === Groups_1.Groups.CP)) return multiply(b, a);\n    //correction for PL/CB dilemma\n    if (a.group === Groups_1.Groups.CB && b.group === Groups_1.Groups.PL && a.value === b.value) {\n      var t = a;\n      a = b;\n      b = t; //swap\n    }\n\n    var g1 = a.group,\n      g2 = b.group,\n      bnum = b.multiplier.num,\n      bden = b.multiplier.den;\n    if (g1 === Groups_1.Groups.FN && a.fname === Settings_1.Settings.SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\n      //unwrap sqrt\n      var a_pow = a.power;\n      var a_multiplier = (0, Parser_1.parse)(a.multiplier);\n      a = multiply(a_multiplier, a.args[0].clone());\n      a.setPower(new Frac_1.Frac(0.5).multiply(a_pow));\n      g1 = a.group;\n    }\n    //simplify n/sqrt(n). Being very specific\n    else if (g1 === Groups_1.Groups.FN && a.fname === Settings_1.Settings.SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\n      a = (0, Symbol_1.symfunction)(Settings_1.Settings.SQRT, [b.clone()]);\n      b = new Symbol_1.Symbol(1);\n    }\n    ;\n    var v1 = a.value,\n      v2 = b.value,\n      sign = new Frac_1.Frac(a.sign()),\n      //since Groups.P is just a morphed version of Groups.N we need to see if they relate\n      ONN = g1 === Groups_1.Groups.P && g2 === Groups_1.Groups.N && b.multiplier.equals(a.value),\n      //don't multiply the multiplier of b since that's equal to the value of a\n      m = ONN ? new Frac_1.Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\n      result = a.clone().toUnitMultiplier();\n    b = b.clone().toUnitMultiplier(true);\n    //further simplification of sqrt\n    if (g1 === Groups_1.Groups.FN && g2 === Groups_1.Groups.FN) {\n      var u = a.args[0].clone();\n      var v = b.args[0].clone();\n      if (a.fname === Settings_1.Settings.SQRT && b.fname === Settings_1.Settings.SQRT && a.isLinear() && b.isLinear()) {\n        var q = (0, divide_1.divide)(u, v).invert();\n        if (q.gt(1) && (0, Utils_1.isInt)(q)) {\n          //b contains a factor a which can be moved to a\n          result = multiply(a.args[0].clone(), (0, index_1.sqrt)(q.clone()));\n          b = new Symbol_1.Symbol(1);\n        }\n      }\n      //simplify factorial but only if\n      //1 - It's division so b will have a negative power\n      //2 - We're not dealing with factorials of numbers\n      else if (a.fname === Settings_1.Settings.FACTORIAL && b.fname === Settings_1.Settings.FACTORIAL && !u.isConstant() && !v.isConstant() && b.power < 0) {\n        //assume that n = positive\n        var d = (0, subtract_1.subtract)(u.clone(), v.clone());\n        //if it's not numeric then we don't know if we can simplify so just return\n        if (d.isConstant()) {\n          //there will never be a case where d == 0 since this will already have\n          //been handled at the beginning of this function\n          t = new Symbol_1.Symbol(1);\n          if (d < 0) {\n            //If d is negative then the numerator is larger so expand that\n            for (var i = 0, n = Math.abs(d); i <= n; i++) {\n              var s = (0, add_1.add)(u.clone(), new Symbol_1.Symbol(i));\n              t = multiply(t, s);\n            }\n            result = multiply((0, pow_1.pow)(u, new Symbol_1.Symbol(a.power)), (0, pow_1.pow)(t, new Symbol_1.Symbol(b.power)));\n            b = new Symbol_1.Symbol(1);\n          } else {\n            //Otherwise the denominator is larger so expand that\n            for (var i = 0, n = Math.abs(d); i <= n; i++) {\n              var s = (0, add_1.add)(v.clone(), new Symbol_1.Symbol(i));\n              t = multiply(t, s);\n            }\n            result = multiply((0, pow_1.pow)(t, new Symbol_1.Symbol(a.power)), (0, pow_1.pow)(v, new Symbol_1.Symbol(b.power)));\n            b = new Symbol_1.Symbol(1);\n          }\n        }\n      }\n    }\n    //if both are Groups.PL then their hashes have to match\n    if (v1 === v2 && g1 === Groups_1.Groups.PL && g1 === g2) {\n      v1 = a.text('hash');\n      v2 = b.text('hash');\n    }\n    //same issue with (x^2+1)^x*(x^2+1)\n    //Groups.EX needs an exception when multiplying because it needs to recognize\n    //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\n    if (g2 === Groups_1.Groups.EX && b.previousGroup === Groups_1.Groups.PL && g1 === Groups_1.Groups.PL) {\n      v1 = (0, Text_1.text)(a, 'hash', Groups_1.Groups.EX);\n    }\n    if ((v1 === v2 || ONN) && !(g1 === Groups_1.Groups.PL && (g2 === Groups_1.Groups.S || g2 === Groups_1.Groups.P || g2 === Groups_1.Groups.FN)) && !(g1 === Groups_1.Groups.PL && g2 === Groups_1.Groups.CB)) {\n      var p1 = a.power,\n        p2 = b.power,\n        isSymbolP1 = (0, Utils_1.isSymbol)(p1),\n        isSymbolP2 = (0, Utils_1.isSymbol)(p2),\n        toEX = isSymbolP1 || isSymbolP2;\n      //TODO: this needs cleaning up\n      if (g1 === Groups_1.Groups.PL && g2 !== Groups_1.Groups.PL && b.previousGroup !== Groups_1.Groups.PL && p1.equals(1)) {\n        result = new Symbol_1.Symbol(0);\n        a.each(function (x) {\n          result = (0, add_1.add)(result, multiply(x, b.clone()));\n        }, true);\n      } else {\n        //add the powers\n        result.power = toEX ? (0, add_1.add)(!(0, Utils_1.isSymbol)(p1) ? new Symbol_1.Symbol(p1) : p1, !(0, Utils_1.isSymbol)(p2) ? new Symbol_1.Symbol(p2) : p2) : g1 === Groups_1.Groups.N /*don't add powers for Groups.N*/ ? p1 : p1.add(p2);\n        //eliminate zero power values and convert them to numbers\n        if (result.power.equals(0)) result = result.convert(Groups_1.Groups.N);\n        //properly convert to Groups.EX\n        if (toEX) result.convert(Groups_1.Groups.EX);\n        //take care of imaginaries\n        if (a.imaginary && b.imaginary) {\n          var isEven = (0, Utils_1.even)(result.power % 2);\n          if (isEven) {\n            result = new Symbol_1.Symbol(1);\n            m.negate();\n          }\n        }\n        //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\n        if (result.group !== Groups_1.Groups.EX && result.previousGroup) result.previousGroup = undefined;\n        //the sign for b is floating around. Remember we are assuming that the odd variable will carry\n        //the sign but this isn't true if they're equals symbols\n        result.multiplier = result.multiplier.multiply(b.multiplier);\n      }\n    } else if (g1 === Groups_1.Groups.CB && a.isLinear()) {\n      if (g2 === Groups_1.Groups.CB) b.distributeExponent();\n      if (g2 === Groups_1.Groups.CB && b.isLinear()) {\n        for (var s in b.symbols) {\n          var x = b.symbols[s];\n          result = result.combine(x);\n        }\n        result.multiplier = result.multiplier.multiply(b.multiplier);\n      } else {\n        result.combine(b);\n      }\n    } else {\n      //the multiplier was already handled so nothing left to do\n      if (g1 !== Groups_1.Groups.N) {\n        if (g1 === Groups_1.Groups.CB) {\n          result.distributeExponent();\n          result.combine(b);\n        } else if (!b.isOne()) {\n          var bm = b.multiplier.clone();\n          b.toUnitMultiplier();\n          result = Symbol_1.Symbol.shell(Groups_1.Groups.CB).combine([result, b]);\n          //transfer the multiplier to the outside\n          result.multiplier = result.multiplier.multiply(bm);\n        }\n      } else {\n        result = b.clone().toUnitMultiplier();\n      }\n    }\n    if (result.group === Groups_1.Groups.P) {\n      var logV = Math.log(result.value),\n        n1 = Math.log(bnum) / logV,\n        n2 = Math.log(bden) / logV,\n        ndiv = m.num / bnum,\n        ddiv = m.den / bden;\n      //we don't want to divide by zero no do we? Strange things happen.\n      if (n1 !== 0 && (0, Utils_1.isInt)(n1) && (0, Utils_1.isInt)(ndiv)) {\n        result.power = result.power.add(new Frac_1.Frac(n1));\n        m.num /= bnum; //BigInt? Keep that in mind for the future.\n      }\n\n      if (n2 !== 0 && (0, Utils_1.isInt)(n2) && (0, Utils_1.isInt)(ddiv)) {\n        result.power = result.power.subtract(new Frac_1.Frac(n2));\n        m.den /= bden; //BigInt? Keep that in mind for the future.\n      }\n    }\n    //unpack Groups.CB if length is only one\n    if (result.length === 1) {\n      var t = result.multiplier;\n      //transfer the multiplier\n      result = (0, Utils_1.firstObject)(result.symbols);\n      result.multiplier = result.multiplier.multiply(t);\n    }\n    //reduce square root\n    var ps = result.power.toString();\n    if ((0, Utils_1.even)(ps) && result.fname === Settings_1.Settings.SQRT) {\n      //grab the sign of the symbol\n      sign = sign * result.sign();\n      var p = result.power;\n      result = result.args[0];\n      result = multiply(new Symbol_1.Symbol(m), (0, pow_1.pow)(result, new Symbol_1.Symbol(p.divide(new Frac_1.Frac(2)))));\n      //flip it back to the correct sign\n      if (sign < 0) result.negate();\n    } else {\n      result.multiplier = result.multiplier.multiply(m).multiply(sign);\n      if (result.group === Groups_1.Groups.CP && result.isImaginary()) result.distributeMultiplier();\n    }\n    //back convert group Groups.P to a simpler group Groups.N if possible\n    if (result.group === Groups_1.Groups.P && (0, Utils_1.isInt)(result.power.toDecimal())) result = result.convert(Groups_1.Groups.N);\n    return result;\n  } else {\n    //****** Matrices & Vector *****//\n    if (bIsSymbol && !aIsSymbol) {\n      //keep symbols to the right\n      t = a;\n      a = b;\n      b = t; //swap\n      t = bIsSymbol;\n      bIsSymbol = aIsSymbol;\n      aIsSymbol = t;\n    }\n    var isMatrixB = (0, Utils_1.isMatrix)(b),\n      isMatrixA = (0, Utils_1.isMatrix)(a);\n    if (aIsSymbol && isMatrixB) {\n      var M = new Matrix_1.Matrix();\n      b.eachElement(function (e, i, j) {\n        M.set(i, j, multiply(a.clone(), e));\n      });\n      b = M;\n    } else {\n      if (isMatrixA && isMatrixB) {\n        b = a.multiply(b);\n      } else if (aIsSymbol && (0, Utils_1.isVector)(b)) {\n        b.each(function (x, i) {\n          i--;\n          b.elements[i] = multiply(a.clone(), b.elements[i]);\n        });\n      } else {\n        if ((0, Utils_1.isVector)(a) && (0, Utils_1.isVector)(b)) {\n          b.each(function (x, i) {\n            i--;\n            b.elements[i] = multiply(a.elements[i], b.elements[i]);\n          });\n        } else if ((0, Utils_1.isVector)(a) && (0, Utils_1.isMatrix)(b)) {\n          //try to convert a to a matrix\n          return multiply(b, a);\n        } else if ((0, Utils_1.isMatrix)(a) && (0, Utils_1.isVector)(b)) {\n          if (b.elements.length === a.rows()) {\n            var M = new Matrix_1.Matrix(),\n              l = a.cols();\n            b.each(function (e, i) {\n              var row = [];\n              for (var j = 0; j < l; j++) {\n                row.push(multiply(a.elements[i - 1][j].clone(), e.clone()));\n              }\n              M.elements.push(row);\n            });\n            return M;\n          } else (0, Errors_1.err)('Dimensions must match!');\n        }\n      }\n    }\n    return b;\n  }\n}\nexports.multiply = multiply;","map":{"version":3,"mappings":"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","names":["multiply","a","b","aIsSymbol","bIsSymbol","Collection_1","elements","push","isUnit","result","clone","unit","deps","Unit","isInfinity","equals","Errors_1","power","lessThan","Symbol_1","sign","multiplier","inf","infinity","isConstant","negate","Settings_1","PARSE2NUMBER","t","decimal_js_1","toDecimal","times","toFixed","retval","isOne","group","Groups_1","CP","CB","PL","value","g1","g2","bnum","num","bden","den","FN","fname","SQRT","args","a_pow","a_multiplier","setPower","Frac_1","v1","v2","ONN","P","N","m","abs","toUnitMultiplier","u","v","isLinear","q","invert","gt","FACTORIAL","d","i","n","Math","s","text","EX","previousGroup","S","p1","p2","isSymbolP1","isSymbolP2","toEX","each","x","add","convert","imaginary","isEven","undefined","distributeExponent","symbols","combine","bm","shell","logV","log","n1","n2","ndiv","ddiv","subtract","length","ps","toString","p","divide","isImaginary","distributeMultiplier","isMatrixB","isMatrixA","M","Matrix_1","eachElement","e","j","set","rows","l","cols","row","exports"],"sourceRoot":"","sources":["../../../../src/Functions/Core/operations/multiply.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
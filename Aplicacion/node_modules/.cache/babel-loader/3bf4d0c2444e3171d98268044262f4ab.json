{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = evaluatex;\n\nvar _lexer = require(\"./lexer\");\n\nvar _lexer2 = _interopRequireDefault(_lexer);\n\nvar _parser = require(\"./parser\");\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Parses a given math expression and returns a function that computes the result.\n * @param {String} expression Math expression to parse.\n * @param {Object} constants A map of constants that will be compiled into the resulting function.\n * @param {Object} options Options to Evaluatex.\n * @returns {fn} A function that takes an optional map of variables. When invoked, this function computes the math expression and returns the result. The function has fields `ast` and `expression`, which respectively hold the AST and original math expression.\n */\n\n\nfunction evaluatex(expression) {\n  var constants = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var tokens = (0, _lexer2.default)(expression, constants, options);\n  var ast = (0, _parser2.default)(tokens).simplify();\n\n  var fn = function fn() {\n    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return ast.evaluate(variables);\n  };\n\n  fn.ast = ast;\n  fn.expression = expression;\n  fn.tokens = tokens;\n  return fn;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","evaluatex","_lexer","require","_lexer2","_interopRequireDefault","_parser","_parser2","obj","__esModule","expression","constants","arguments","length","undefined","options","tokens","ast","simplify","fn","variables","evaluate"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/evaluatex/dist/evaluatex.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = evaluatex;\n\nvar _lexer = require(\"./lexer\");\n\nvar _lexer2 = _interopRequireDefault(_lexer);\n\nvar _parser = require(\"./parser\");\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Parses a given math expression and returns a function that computes the result.\n * @param {String} expression Math expression to parse.\n * @param {Object} constants A map of constants that will be compiled into the resulting function.\n * @param {Object} options Options to Evaluatex.\n * @returns {fn} A function that takes an optional map of variables. When invoked, this function computes the math expression and returns the result. The function has fields `ast` and `expression`, which respectively hold the AST and original math expression.\n */\nfunction evaluatex(expression) {\n    var constants = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var tokens = (0, _lexer2.default)(expression, constants, options);\n    var ast = (0, _parser2.default)(tokens).simplify();\n    var fn = function fn() {\n        var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return ast.evaluate(variables);\n    };\n    fn.ast = ast;\n    fn.expression = expression;\n    fn.tokens = tokens;\n    return fn;\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EACzCC,KAAK,EAAE;AADkC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,SAAlB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACH,MAAD,CAApC;;AAEA,IAAII,OAAO,GAAGH,OAAO,CAAC,UAAD,CAArB;;AAEA,IAAII,QAAQ,GAAGF,sBAAsB,CAACC,OAAD,CAArC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAAER,OAAO,EAAEQ;EAAX,CAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASP,SAAT,CAAmBS,UAAnB,EAA+B;EAC3B,IAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAApF;EACA,IAAIG,OAAO,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;EAEA,IAAII,MAAM,GAAG,CAAC,GAAGZ,OAAO,CAACJ,OAAZ,EAAqBU,UAArB,EAAiCC,SAAjC,EAA4CI,OAA5C,CAAb;EACA,IAAIE,GAAG,GAAG,CAAC,GAAGV,QAAQ,CAACP,OAAb,EAAsBgB,MAAtB,EAA8BE,QAA9B,EAAV;;EACA,IAAIC,EAAE,GAAG,SAASA,EAAT,GAAc;IACnB,IAAIC,SAAS,GAAGR,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAApF;IACA,OAAOK,GAAG,CAACI,QAAJ,CAAaD,SAAb,CAAP;EACH,CAHD;;EAIAD,EAAE,CAACF,GAAH,GAASA,GAAT;EACAE,EAAE,CAACT,UAAH,GAAgBA,UAAhB;EACAS,EAAE,CAACH,MAAH,GAAYA,MAAZ;EACA,OAAOG,EAAP;AACH"},"metadata":{},"sourceType":"script"}
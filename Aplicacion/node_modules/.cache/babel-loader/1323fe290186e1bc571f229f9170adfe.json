{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.divide = void 0;\nvar Errors_1 = require(\"../../../Core/Errors\");\nvar Matrix_1 = require(\"../../../Types/Matrix\");\nvar index_1 = require(\"../index\");\nvar Utils_1 = require(\"../../../Core/Utils\");\n/**\n * Gets called when the parser finds the / operator. See this.add\n * @param {Symbol} a\n * @param {Symbol} b\n * @returns {Symbol}\n */\nfunction divide(a, b) {\n  var aIsSymbol = (0, Utils_1.isSymbol)(a),\n    bIsSymbol = (0, Utils_1.isSymbol)(b);\n  if (aIsSymbol && bIsSymbol) {\n    //forward to Unit division\n    if (a.unit || b.unit) {\n      return deps.Unit.divide(a, b);\n    }\n    var result;\n    if (b.equals(0)) throw new Errors_1.DivisionByZero('Division by zero not allowed!');\n    if (a.isConstant() && b.isConstant()) {\n      result = a.clone();\n      result.multiplier = result.multiplier.divide(b.multiplier);\n    } else {\n      b.invert();\n      result = (0, index_1.multiply)(a, b);\n    }\n    return result;\n  } else {\n    //******* Vectors & Matrices *********//\n    var isVectorA = (0, Utils_1.isVector)(a),\n      isVectorB = (0, Utils_1.isVector)(b);\n    if (aIsSymbol && isVectorB) {\n      b = b.map(function (x) {\n        return divide(a.clone(), x);\n      });\n    } else if (isVectorA && bIsSymbol) {\n      b = a.map(function (x) {\n        return divide(x, b.clone());\n      });\n    } else if (isVectorA && isVectorB) {\n      if (a.dimensions() === b.dimensions()) {\n        b = b.map(function (x, i) {\n          return divide(a.elements[--i], x);\n        });\n      } else (0, Errors_1.err)('Cannot divide vectors. Dimensions do not match!');\n    } else {\n      var isMatrixA = (0, Utils_1.isMatrix)(a),\n        isMatrixB = (0, Utils_1.isMatrix)(b);\n      if (isMatrixA && bIsSymbol) {\n        var M = new Matrix_1.Matrix();\n        a.eachElement(function (x, i, j) {\n          M.set(i, j, divide(x, b.clone()));\n        });\n        b = M;\n      } else if (aIsSymbol && isMatrixB) {\n        var M = new Matrix_1.Matrix();\n        b.eachElement(function (x, i, j) {\n          M.set(i, j, divide(a.clone(), x));\n        });\n        b = M;\n      } else if (isMatrixA && isMatrixB) {\n        var M = new Matrix_1.Matrix();\n        if (a.rows() === b.rows() && a.cols() === b.cols()) {\n          a.eachElement(function (x, i, j) {\n            M.set(i, j, divide(x, b.elements[i][j]));\n          });\n          b = M;\n        } else {\n          (0, Errors_1.err)('Dimensions do not match!');\n        }\n      } else if (isMatrixA && isVectorB) {\n        if (a.cols() === b.dimensions()) {\n          var M = new Matrix_1.Matrix();\n          a.eachElement(function (x, i, j) {\n            M.set(i, j, divide(x, b.elements[i].clone()));\n          });\n          b = M;\n        } else {\n          (0, Errors_1.err)('Unable to divide matrix by vector.');\n        }\n      }\n    }\n    return b;\n  }\n}\nexports.divide = divide;","map":{"version":3,"mappings":"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","names":["divide","a","b","aIsSymbol","bIsSymbol","unit","deps","Unit","result","equals","Errors_1","isConstant","clone","multiplier","invert","isVectorA","isVectorB","map","x","dimensions","i","elements","isMatrixA","isMatrixB","M","Matrix_1","eachElement","j","set","rows","cols","exports"],"sourceRoot":"","sources":["../../../../src/Functions/Core/operations/divide.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
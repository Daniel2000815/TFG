{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { compareDependencies } from 'mathjs';\nimport nerdamer from 'nerdamer';\n\nvar Polynomial = /*#__PURE__*/function () {\n  function Polynomial(p) {\n    _classCallCheck(this, Polynomial);\n\n    this.coefMap = {};\n    this.varOrder = [];\n    var pol = null;\n\n    try {\n      pol = nerdamer(p).expand().toString();\n    } catch (e) {\n      console.log(\"ERROR PARSING POLYNOMIAL \".concat(p));\n    }\n\n    this.computeCoefficients(nerdamer.tree(pol));\n  }\n\n  _createClass(Polynomial, [{\n    key: \"multiply\",\n    value: function multiply(q) {\n      var product = '';\n\n      for (var keyP in this.coefMap) {\n        for (var keyQ in q.coefMap) {\n          console.log(\"(\".concat(this.coefMap[keyP], \"*\").concat(keyP, \") * (\").concat(q.coefMap[keyQ], \"*\").concat(keyQ, \")\"));\n          product += \"\".concat(product.length > 0 ? '+' : '', \" (\").concat(this.coefMap[keyP], \"*\").concat(keyP, \") * (\").concat(q.coefMap[keyQ], \"*\").concat(keyQ, \")\");\n        }\n      }\n\n      product = nerdamer(product).expand().toString();\n      this.computeCoefficients(nerdamer.tree(product));\n      console.log('PRODUCT;');\n      console.log(product);\n    }\n  }, {\n    key: \"strContainsChar\",\n    value: function strContainsChar(str, chars) {\n      // console.log('COMPROBANDO ' + str);\n      for (var i = 0; i < str.length; i++) {\n        if (chars.includes(str[i])) return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"expGreater\",\n    value: function expGreater(a, b) {\n      return a[0] > b[0] || a[0] == b[0] && a[1] > b[1] || a[0] == b[0] && a[1] == b[1] && a[2] > a[2];\n    }\n  }, {\n    key: \"exp\",\n    value: function exp(p) {\n      var _this = this;\n\n      var split = p.split(/[-+]+/); // separa por + o -\n\n      var res = [0, 0, 0];\n      split.forEach(function (element) {\n        if (element === '') return;\n        var degs = [Number(nerdamer(\"deg(\".concat(element, \", x)\")).toString()), Number(nerdamer(\"deg(\".concat(element, \", y)\")).toString()), Number(nerdamer(\"deg(\".concat(element, \", z)\")).toString())];\n        if (_this.expGreater(degs, res)) res = degs;\n      });\n      return res;\n    }\n  }, {\n    key: \"computeCoefficients\",\n    value: function computeCoefficients(node) {\n      var pol = this.nodeToString(node);\n      var vars = ['x', 'y', 'z'];\n      if (node === null || node === undefined) return;\n\n      if (!node.left && !node.right) {\n        if (['x', 'y', 'z'].includes(node.value)) this.coefMap[node.value] = '1';else this.coefMap['1'] = pol;\n        return;\n      } // console.log(pol);\n\n\n      if (!this.strContainsChar(pol, vars)) {\n        // console.log('AÃ‘ADO ' + pol);\n        this.coefMap['1'] = pol;\n        return;\n      } // console.log(pol);\n\n\n      var pattern = /[+-]/;\n\n      if (!pattern.test(pol) && pol !== '') {\n        // const coef = this.nodeToString(node.left);\n        // const variable = this.nodeToString(node.right);\n        var coef = '';\n        var variable = '';\n        var writingCoef = true;\n\n        for (var i = 0; i < pol.length; i++) {\n          if (['x', 'y', 'z'].includes(pol[i])) {\n            writingCoef = false;\n            if (coef.length === 0) coef = '1'; // console.log('HOLA:' + coef[coef.length - 1]);\n\n            if (coef[coef.length - 1] === '*') coef = coef.slice(0, -1);\n          }\n\n          if (!['(', ')'].includes(pol[i])) {\n            if (writingCoef) coef += pol[i];else variable += pol[i];\n          }\n        }\n\n        this.coefMap[variable] = coef; // console.log(`COEF: ${coef}, VAR: ${variable}`);\n      } else {\n        this.computeCoefficients(node.left);\n        this.computeCoefficients(node.right);\n      }\n\n      if (node !== null && node !== undefined) {\n        if (node.type === 'OPERATOR' && node.value === '*') {// console.log('PRODUC');\n          // console.log(node.left);\n          // console.log(node.right);\n        }\n      }\n\n      var monomials = Object.keys(this.coefMap);\n      var that = this;\n      monomials.sort(function (a, b) {\n        return that.expGreater(that.exp(a), that.exp(b)) ? -1 : 1;\n      });\n      this.varOrder = monomials;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var res = '';\n\n      for (var i in this.varOrder) {\n        var mon = this.varOrder[i];\n        var coef = this.coefMap[mon];\n        var nextMon = i < this.varOrder.length - 1 ? this.varOrder[i + 1] : null;\n        var nextCoef = nextMon ? this.coefMap[nextMon] : '';\n        var coefNull = coef !== '1';\n        res += \"\".concat(coefNull ? coef : '', \" \").concat(coefNull ? '(' : '').concat(mon).concat(coefNull ? ')' : '', \" \").concat(i < this.varOrder.length - 1 && nextCoef[0] != '-' ? '+' : '', \" \");\n      }\n\n      return res;\n    }\n  }, {\n    key: \"nodeToString\",\n    value: function nodeToString(node) {\n      // console.log(node);\n      if (node !== null && node !== undefined) {\n        if (node.type === 'VARIABLE_OR_LITERAL') {\n          var isVariable = ['x', 'y', 'z'].includes(node.value); // console.log(\"ES LITERAL O VARIABLE: \" + node.value);\n          // console.log(node.value);\n\n          return isVariable ? node.value : parseFloat(node.value);\n        }\n\n        if (node.type === 'OPERATOR') {\n          var _node$left, _node$right;\n\n          var left = this.nodeToString(node.left);\n          var right = this.nodeToString(node.right); // console.log(\"ES OPERATOR: \" + node.value);\n          // console.log(\"OPERATOR LEFT: \" + left);\n          // console.log(\"OPERATOR RIGHT: \" + right);\n          // console.log(`DEVUELVO ${(right && left) ? `${left}${node.value}${right}` : `${node.value}${left}`}`);\n\n          var leftParenthesis = ((_node$left = node.left) === null || _node$left === void 0 ? void 0 : _node$left.type) !== 'VARIABLE_OR_LITERAL';\n          var rightParenthesis = ((_node$right = node.right) === null || _node$right === void 0 ? void 0 : _node$right.type) !== 'VARIABLE_OR_LITERAL'; // console.log(\"OPERATOR: \" + node.value);\n          // console.log(\"TYPEL: \" + node.left.type);\n          // console.log(\"TYPER: \" + node.right.type);\n          // console.log(`PAR.LEFT: ${leftParenthesis}, RIGHT. PAR: ${rightParenthesis}`);\n\n          var l = leftParenthesis ? \"(\".concat(left, \")\") : \"\".concat(left);\n          var r = rightParenthesis ? \"(\".concat(right, \")\") : \"\".concat(right); // console.log('RIGHT ' + r);\n\n          if (right && left) return \"\".concat(l).concat(node.value).concat(r);else return \"\".concat(node.value).concat(l);\n        }\n\n        if (node.type === 'FUNCTION') {\n          // console.log(\"ES F: \" + node.value);\n          var _left = this.nodeToString(node.left);\n\n          var _right = this.nodeToString(node.right); // console.log(`DEVUELVO ${left}${node.value}${right}`);\n\n\n          return \"\".concat(_left).concat(node.value).concat(_right);\n        }\n      }\n\n      return '';\n    }\n  }]);\n\n  return Polynomial;\n}();\n\nexport { Polynomial as default };","map":{"version":3,"names":["compareDependencies","nerdamer","Polynomial","p","coefMap","varOrder","pol","expand","toString","e","console","log","computeCoefficients","tree","q","product","keyP","keyQ","length","str","chars","i","includes","a","b","split","res","forEach","element","degs","Number","expGreater","node","nodeToString","vars","undefined","left","right","value","strContainsChar","pattern","test","coef","variable","writingCoef","slice","type","monomials","Object","keys","that","sort","exp","mon","nextMon","nextCoef","coefNull","isVariable","parseFloat","leftParenthesis","rightParenthesis","l","r"],"sources":["C:/Users/daniz/TFG/Aplicacion/src/Polynomial.js"],"sourcesContent":["import { compareDependencies } from 'mathjs';\r\nimport nerdamer from 'nerdamer';\r\n\r\nexport default class Polynomial {\r\n  coefMap = {};\r\n  varOrder = [];\r\n\r\n  constructor(p) {\r\n    var pol = null;\r\n    try {\r\n      pol = nerdamer(p).expand().toString();\r\n    } catch (e) {\r\n      console.log(`ERROR PARSING POLYNOMIAL ${p}`);\r\n    }\r\n\r\n    this.computeCoefficients(nerdamer.tree(pol));\r\n  }\r\n\r\n  multiply(q) {\r\n    let product = '';\r\n\r\n    for (let keyP in this.coefMap) {\r\n      for (let keyQ in q.coefMap) {\r\n        console.log(\r\n          `(${this.coefMap[keyP]}*${keyP}) * (${q.coefMap[keyQ]}*${keyQ})`\r\n        );\r\n        product += `${product.length > 0 ? '+' : ''} (${\r\n          this.coefMap[keyP]\r\n        }*${keyP}) * (${q.coefMap[keyQ]}*${keyQ})`;\r\n      }\r\n    }\r\n\r\n    product = nerdamer(product).expand().toString();\r\n    this.computeCoefficients(nerdamer.tree(product));\r\n    console.log('PRODUCT;');\r\n    console.log(product);\r\n  }\r\n\r\n  strContainsChar(str, chars) {\r\n    // console.log('COMPROBANDO ' + str);\r\n    for (let i = 0; i < str.length; i++) {\r\n      if (chars.includes(str[i])) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  expGreater(a, b) {\r\n    return (\r\n      a[0] > b[0] ||\r\n      (a[0] == b[0] && a[1] > b[1]) ||\r\n      (a[0] == b[0] && a[1] == b[1] && a[2] > a[2])\r\n    );\r\n  }\r\n\r\n  exp(p) {\r\n    const split = p.split(/[-+]+/); // separa por + o -\r\n    let res = [0, 0, 0];\r\n\r\n    split.forEach((element) => {\r\n      if (element === '') return;\r\n\r\n      let degs = [\r\n        Number(nerdamer(`deg(${element}, x)`).toString()),\r\n        Number(nerdamer(`deg(${element}, y)`).toString()),\r\n        Number(nerdamer(`deg(${element}, z)`).toString()),\r\n      ];\r\n\r\n      if (this.expGreater(degs, res)) res = degs;\r\n    });\r\n\r\n    return res;\r\n  }\r\n\r\n  computeCoefficients(node) {\r\n    const pol = this.nodeToString(node);\r\n    const vars = ['x', 'y', 'z'];\r\n\r\n    if (node === null || node === undefined) return;\r\n\r\n    if (!node.left && !node.right) {\r\n      if (['x', 'y', 'z'].includes(node.value)) this.coefMap[node.value] = '1';\r\n      else this.coefMap['1'] = pol;\r\n\r\n      return;\r\n    }\r\n\r\n    // console.log(pol);\r\n    if (!this.strContainsChar(pol, vars)) {\r\n      // console.log('AÃ‘ADO ' + pol);\r\n      this.coefMap['1'] = pol;\r\n      return;\r\n    }\r\n\r\n    // console.log(pol);\r\n    var pattern = /[+-]/;\r\n\r\n    if (!pattern.test(pol) && pol !== '') {\r\n      // const coef = this.nodeToString(node.left);\r\n      // const variable = this.nodeToString(node.right);\r\n\r\n      let coef = '';\r\n      let variable = '';\r\n      let writingCoef = true;\r\n\r\n      for (let i = 0; i < pol.length; i++) {\r\n        if (['x', 'y', 'z'].includes(pol[i])) {\r\n          writingCoef = false;\r\n\r\n          if (coef.length === 0) coef = '1';\r\n\r\n          // console.log('HOLA:' + coef[coef.length - 1]);\r\n          if (coef[coef.length - 1] === '*') coef = coef.slice(0, -1);\r\n        }\r\n\r\n        if (!['(', ')'].includes(pol[i])) {\r\n          if (writingCoef) coef += pol[i];\r\n          else variable += pol[i];\r\n        }\r\n      }\r\n\r\n      this.coefMap[variable] = coef;\r\n\r\n      // console.log(`COEF: ${coef}, VAR: ${variable}`);\r\n    } else {\r\n      this.computeCoefficients(node.left);\r\n      this.computeCoefficients(node.right);\r\n    }\r\n\r\n    if (node !== null && node !== undefined) {\r\n      if (node.type === 'OPERATOR' && node.value === '*') {\r\n        // console.log('PRODUC');\r\n        // console.log(node.left);\r\n        // console.log(node.right);\r\n      }\r\n    }\r\n\r\n    let monomials = Object.keys(this.coefMap);\r\n    var that = this;\r\n    monomials.sort(function (a, b) {\r\n      return that.expGreater(that.exp(a), that.exp(b)) ? -1 : 1;\r\n    });\r\n\r\n    this.varOrder = monomials;\r\n  }\r\n\r\n  toString() {\r\n    let res = '';\r\n\r\n    for (let i in this.varOrder) {\r\n      const mon = this.varOrder[i];\r\n      const coef = this.coefMap[mon];\r\n      const nextMon =\r\n        i < this.varOrder.length - 1 ? this.varOrder[i + 1] : null;\r\n      const nextCoef = nextMon ? this.coefMap[nextMon] : '';\r\n      const coefNull = coef !== '1';\r\n\r\n      res += `${coefNull ? coef : ''} ${coefNull ? '(' : ''}${mon}${\r\n        coefNull ? ')' : ''\r\n      } ${i < this.varOrder.length - 1 && nextCoef[0] != '-' ? '+' : ''} `;\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  nodeToString(node) {\r\n    // console.log(node);\r\n    if (node !== null && node !== undefined) {\r\n      if (node.type === 'VARIABLE_OR_LITERAL') {\r\n        const isVariable = ['x', 'y', 'z'].includes(node.value);\r\n        // console.log(\"ES LITERAL O VARIABLE: \" + node.value);\r\n        // console.log(node.value);\r\n        return isVariable ? node.value : parseFloat(node.value);\r\n      }\r\n\r\n      if (node.type === 'OPERATOR') {\r\n        let left = this.nodeToString(node.left);\r\n        let right = this.nodeToString(node.right);\r\n\r\n        // console.log(\"ES OPERATOR: \" + node.value);\r\n        // console.log(\"OPERATOR LEFT: \" + left);\r\n        // console.log(\"OPERATOR RIGHT: \" + right);\r\n        // console.log(`DEVUELVO ${(right && left) ? `${left}${node.value}${right}` : `${node.value}${left}`}`);\r\n\r\n        const leftParenthesis = node.left?.type !== 'VARIABLE_OR_LITERAL';\r\n        const rightParenthesis = node.right?.type !== 'VARIABLE_OR_LITERAL';\r\n\r\n        // console.log(\"OPERATOR: \" + node.value);\r\n        // console.log(\"TYPEL: \" + node.left.type);\r\n        // console.log(\"TYPER: \" + node.right.type);\r\n        // console.log(`PAR.LEFT: ${leftParenthesis}, RIGHT. PAR: ${rightParenthesis}`);\r\n        const l = leftParenthesis ? `(${left})` : `${left}`;\r\n        const r = rightParenthesis ? `(${right})` : `${right}`;\r\n        // console.log('RIGHT ' + r);\r\n        if (right && left) return `${l}${node.value}${r}`;\r\n        else return `${node.value}${l}`;\r\n      }\r\n\r\n      if (node.type === 'FUNCTION') {\r\n        // console.log(\"ES F: \" + node.value);\r\n        let left = this.nodeToString(node.left);\r\n        let right = this.nodeToString(node.right);\r\n\r\n        // console.log(`DEVUELVO ${left}${node.value}${right}`);\r\n        return `${left}${node.value}${right}`;\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
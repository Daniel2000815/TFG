{"ast":null,"code":"import { compareText as _compareText } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'compareText';\nvar dependencies = ['typed', 'matrix'];\n_compareText.signature = 'any, any';\nexport var createCompareText = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed: typed,\n    matrix: matrix\n  });\n  /**\r\n   * Compare two strings lexically. Comparison is case sensitive.\r\n   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.compareText(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.compareText('B', 'A')     // returns 1\r\n   *    math.compareText('2', '10')    // returns 1\r\n   *    math.compare('2', '10')        // returns -1\r\n   *    math.compareNatural('2', '10') // returns -1\r\n   *\r\n   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]\r\n   *\r\n   * See also:\r\n   *\r\n   *    equal, equalText, compare, compareNatural\r\n   *\r\n   * @param  {string | Array | DenseMatrix} x First string to compare\r\n   * @param  {string | Array | DenseMatrix} y Second string to compare\r\n   * @return {number | Array | DenseMatrix} Returns the result of the comparison:\r\n   *                                        1 when x > y, -1 when x < y, and 0 when x == y.\r\n   */\n\n  return typed(name, _compareText, matrixAlgorithmSuite({\n    elop: _compareText,\n    Ds: true\n  }));\n});\nexport var createCompareTextNumber = /* #__PURE__ */factory(name, ['typed'], function (_ref2) {\n  var typed = _ref2.typed;\n  return typed(name, _compareText);\n});","map":{"version":3,"names":["compareText","_compareText","factory","createMatrixAlgorithmSuite","name","dependencies","signature","createCompareText","_ref","typed","matrix","matrixAlgorithmSuite","elop","Ds","createCompareTextNumber","_ref2"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/mathjs/lib/esm/function/relational/compareText.js"],"sourcesContent":["import { compareText as _compareText } from '../../utils/string.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nvar name = 'compareText';\r\nvar dependencies = ['typed', 'matrix'];\r\n_compareText.signature = 'any, any';\r\nexport var createCompareText = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix\r\n  } = _ref;\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix\r\n  });\r\n  /**\r\n   * Compare two strings lexically. Comparison is case sensitive.\r\n   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.compareText(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.compareText('B', 'A')     // returns 1\r\n   *    math.compareText('2', '10')    // returns 1\r\n   *    math.compare('2', '10')        // returns -1\r\n   *    math.compareNatural('2', '10') // returns -1\r\n   *\r\n   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]\r\n   *\r\n   * See also:\r\n   *\r\n   *    equal, equalText, compare, compareNatural\r\n   *\r\n   * @param  {string | Array | DenseMatrix} x First string to compare\r\n   * @param  {string | Array | DenseMatrix} y Second string to compare\r\n   * @return {number | Array | DenseMatrix} Returns the result of the comparison:\r\n   *                                        1 when x > y, -1 when x < y, and 0 when x == y.\r\n   */\r\n\r\n  return typed(name, _compareText, matrixAlgorithmSuite({\r\n    elop: _compareText,\r\n    Ds: true\r\n  }));\r\n});\r\nexport var createCompareTextNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\r\n  var {\r\n    typed\r\n  } = _ref2;\r\n  return typed(name, _compareText);\r\n});"],"mappings":"AAAA,SAASA,WAAW,IAAIC,YAAxB,QAA4C,uBAA5C;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,0BAAT,QAA2C,iDAA3C;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,CAAnB;AACAJ,YAAY,CAACK,SAAb,GAAyB,UAAzB;AACA,OAAO,IAAIC,iBAAiB,GAAG,eAAeL,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAG,IAAI,EAAI;EAChF,IACEC,KADF,GAGID,IAHJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAGIF,IAHJ,CAEEE,MAFF;EAIA,IAAIC,oBAAoB,GAAGR,0BAA0B,CAAC;IACpDM,KAAK,EAALA,KADoD;IAEpDC,MAAM,EAANA;EAFoD,CAAD,CAArD;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOD,KAAK,CAACL,IAAD,EAAOH,YAAP,EAAqBU,oBAAoB,CAAC;IACpDC,IAAI,EAAEX,YAD8C;IAEpDY,EAAE,EAAE;EAFgD,CAAD,CAAzC,CAAZ;AAID,CA1CoD,CAA9C;AA2CP,OAAO,IAAIC,uBAAuB,GAAG,eAAeZ,OAAO,CAACE,IAAD,EAAO,CAAC,OAAD,CAAP,EAAkB,UAAAW,KAAK,EAAI;EACpF,IACEN,KADF,GAEIM,KAFJ,CACEN,KADF;EAGA,OAAOA,KAAK,CAACL,IAAD,EAAOH,YAAP,CAAZ;AACD,CAL0D,CAApD"},"metadata":{},"sourceType":"module"}
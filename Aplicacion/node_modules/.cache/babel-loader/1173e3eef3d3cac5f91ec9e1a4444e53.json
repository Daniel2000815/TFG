{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport nerdamer from \"nerdamer\";\n\nvar Polynomial = /*#__PURE__*/function () {\n  function Polynomial(p) {\n    _classCallCheck(this, Polynomial);\n\n    this.pol = \"0\";\n    this.lc = \"0\";\n\n    try {\n      this.pol = nerdamer(p).simplify().toString();\n    } catch (e) {\n      console.log(\"ERROR PARSING POLYNOMIAL \".concat(p));\n    }\n\n    console.log(this.pol);\n    this.traverseTree(nerdamer.tree(this.pol));\n    this.nodeToString(nerdamer.tree(this.pol));\n  }\n\n  _createClass(Polynomial, [{\n    key: \"nodeToString\",\n    value: function nodeToString(node) {\n      console.log(\"PASANDO A STRING\");\n\n      if (node) {\n        var left = this.traverseTree(node.left);\n        var right = this.traverseTree(node.right);\n        console.log(node);\n        console.log(\"LEFT: \" + left);\n        console.log(\"RIGHT: \" + right);\n        console.log(\"DEVOLVEMOS \".concat(left).concat(node.value).concat(right));\n        return \"\".concat(left).concat(node.value).concat(right);\n      }\n    }\n  }, {\n    key: \"traverseTree\",\n    value: function traverseTree(node) {\n      console.log(node);\n\n      if (node !== null && node !== undefined) {\n        console.log(\"A\");\n\n        if (node.type === 'VARIABLE_OR_LITERAL') {\n          var isVariable = ['x', 'y', 'z'].includes(node.value);\n          console.log(\"ES LITERAL O VARIABLE: \" + node.value);\n          console.log(node.value);\n          return isVariable ? node.value : parseFloat(node.value).toFixed(4);\n        }\n\n        if (node.type === 'OPERATOR') {\n          console.log(\"ES OPERATOR: \" + node.value);\n          var left = this.traverseTree(node.left);\n          var right = this.traverseTree(node.right);\n          if (right && left) return \"\".concat(left).concat(node.value).concat(right);else if (left) return \"\".concat(node.value, \"(\").concat(left, \")\");else return '????'; // return node.toString();\n        }\n\n        if (node.type === 'FUNCTION') {\n          var _left = this.traverseTree(node.left);\n\n          var _right = this.traverseTree(node.right);\n\n          console.log(\"ES F\");\n\n          if (node.value === '^') {\n            console.log(node);\n            return \"pow(\".concat(_left, \", \").concat(_right, \")\");\n          } else {\n            if (_right) return \"\".concat(node.value).concat(_right);else return '????';\n          }\n        }\n      }\n\n      return '';\n    }\n  }]);\n\n  return Polynomial;\n}();\n\nexport { Polynomial as default };","map":{"version":3,"names":["nerdamer","Polynomial","p","pol","lc","simplify","toString","e","console","log","traverseTree","tree","nodeToString","node","left","right","value","undefined","type","isVariable","includes","parseFloat","toFixed"],"sources":["C:/Users/daniz/TFG/Aplicacion/src/Polynomial.js"],"sourcesContent":["import nerdamer from \"nerdamer\";\r\n\r\nexport default class Polynomial {\r\n    pol = \"0\";\r\n    lc = \"0\";\r\n\r\n    constructor(p){\r\n        try{\r\n            this.pol = nerdamer(p).simplify().toString();\r\n        }catch(e){\r\n            console.log(`ERROR PARSING POLYNOMIAL ${p}`);\r\n        }\r\n\r\n        console.log(this.pol);\r\n        this.traverseTree(nerdamer.tree(this.pol));\r\n        this.nodeToString(nerdamer.tree(this.pol));\r\n    }\r\n\r\n    nodeToString(node){\r\n        console.log(\"PASANDO A STRING\");\r\n        if(node){\r\n            let left = this.traverseTree(node.left);\r\n            let right = this.traverseTree(node.right);\r\n            console.log(node);\r\n            console.log(\"LEFT: \" + left);\r\n            console.log(\"RIGHT: \" + right);\r\n\r\n            console.log(`DEVOLVEMOS ${left}${node.value}${right}`)\r\n            return `${left}${node.value}${right}`;\r\n        }\r\n    }\r\n\r\n    traverseTree(node) {\r\n        console.log(node);\r\n        if (node!==null && node!==undefined) {\r\n            console.log(\"A\");\r\n          if (node.type === 'VARIABLE_OR_LITERAL') {\r\n            const isVariable = ['x', 'y', 'z'].includes(node.value);\r\n            console.log(\"ES LITERAL O VARIABLE: \" + node.value);\r\n            console.log(node.value);\r\n            return isVariable ? node.value : parseFloat(node.value).toFixed(4);\r\n          }\r\n          if (node.type === 'OPERATOR') {\r\n            console.log(\"ES OPERATOR: \" + node.value);\r\n            let left = this.traverseTree(node.left);\r\n            let right = this.traverseTree(node.right);\r\n\r\n            \r\n    \r\n      \r\n              if (right && left) return `${left}${node.value}${right}`;\r\n              else if (left) return `${node.value}(${left})`;\r\n              else return '????';\r\n            \r\n    \r\n            // return node.toString();\r\n          }\r\n          if (node.type === 'FUNCTION') {\r\n            let left = this.traverseTree(node.left);\r\n            let right = this.traverseTree(node.right);\r\n            console.log(\"ES F\");\r\n            if (node.value === '^') {\r\n              \r\n              console.log(node);\r\n              return `pow(${left}, ${right})`;\r\n            } else {\r\n              if (right) return `${node.value}${right}`;\r\n              else return '????';\r\n            }\r\n          }\r\n        }\r\n\r\n        return '';\r\n      };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
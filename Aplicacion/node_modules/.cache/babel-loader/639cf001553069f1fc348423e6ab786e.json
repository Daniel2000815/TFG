{"ast":null,"code":"import { primitives } from \"./primitives\";\nexport var fs = function fs(sdf) {\n  return \"\\n    \\n    // https://thebookofshaders.com/03/?lan=es\\n  // https://thebookofshaders.com/03/\\n  // http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#putting-it-all-together\\n  // https://www.shadertoy.com/view/llt3R4\\n  \\n  // camera\\n  // https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-ray-tracing/how-does-it-work\\n  // http://www.codinglabs.net/article_world_view_projection_matrix.aspx\\n  // https://iopscience.iop.org/article/10.1088/0031-9155/52/12/006/meta\\n  // https://www.ingebook.com/ib/NPcd/IB_BooksVis?cod_primaria=1000187&codigo_libro=6575\\n  \\n  #ifdef GL_ES\\n  precision mediump float;\\n  #endif\\n  \\n  const int AA = 3;\\n  const int MAX_MARCHING_STEPS = 255;\\n  const float EPSILON = 0.0001;\\n  const float MIN_DIST = 0.0;\\n  const float MAX_DIST = 100.0;\\n\\n  uniform bool leftClick;\\n\\n  \".concat(primitives(), \"\\n\\n  struct Material\\n  {\\n      vec3 specular;\\n      vec3 diffuse;\\n      vec3 ambient;\\n      float smoothness;\\n  };\\n  \\n  float map( in vec3 p )\\n  {\\n    return \").concat(sdf, \";\\n  }\\n  \\n  \\n  vec3 rayDirection(vec2 size, vec2 fragCoord) {\\n      const float fov = 45.0;\\n  \\n      vec2 xy = fragCoord - size / 2.0;\\n      float z = size.y / tan(radians(fov) / 2.0);\\n  \\n      return normalize(vec3(xy, -z));\\n  }\\n  \\n  vec3 normal(vec3 p) {\\n      return normalize(vec3(\\n          map(vec3(p.x + EPSILON, p.y, p.z)) - map(vec3(p.x - EPSILON, p.y, p.z)),\\n          map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\\n          map(vec3(p.x, p.y, p.z  + EPSILON)) - map(vec3(p.x, p.y, p.z - EPSILON))\\n      ));\\n  }\\n  \\n  vec3 lighting(vec3 p, vec3 n, vec3 eye, Material mat){\\n      vec3 ambient = vec3(0.5);\\n  \\n      vec3 lights_pos[2];\\n      lights_pos[0] = vec3(4.0, 2.0, 2.0);\\n      lights_pos[1] = vec3(-4.0, -2.0, -2.0);\\n  \\n      vec3 lights_color[2];\\n      lights_color[0] = vec3(1.0, 1.0, 1.0);\\n      lights_color[1] = vec3(1.0, 1.0, 1.0);\\n  \\n      vec3 Ip = mat.ambient * ambient;\\n  \\n      for(int i=0; i<2; i++){\\n          vec3 Lm = normalize(lights_pos[i] - p);\\n          vec3 Rm = normalize(2.0*(dot(Lm,n))*n - Lm);    // reflect(-Lm, n)\\n          vec3 V  = normalize(eye - p);\\n  \\n          float LN = dot(Lm, n);\\n          float RV = dot(Rm, V);\\n  \\n          if (LN < 0.0)   // Light not visible\\n              Ip += vec3(0.0, 0.0, 0.0);\\n          else if (RV < 0.0)  // opposite direction as viewer, apply only diffuse\\n              Ip += lights_color[i] * (mat.diffuse * LN);\\n          else\\n              Ip += lights_color[i] * (mat.diffuse*LN + mat.specular*pow(RV, mat.smoothness));\\n      }\\n  \\n      return Ip;\\n  }\\n  \\n  mat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\\n      // Based on gluLookAt man page\\n      vec3 f = normalize(center - eye);\\n      vec3 s = normalize(cross(f, up));\\n      vec3 u = cross(s, f);\\n      return mat4(\\n          vec4(s, 0.0),\\n          vec4(u, 0.0),\\n          vec4(-f, 0.0),\\n          vec4(0.0, 0.0, 0.0, 1)\\n      );\\n  }\\n  \\n  float clamp(float val){\\n    if(val < 0.0)   return 0.0;\\n    if(val >1.0)    return 1.0;\\n\\n    return val;\\n}\\n\\n  void main() {\\n      Material mat_yellow = Material(\\n          vec3(1.0, 1.0, 1.0),    // specular\\n          vec3(1.0, 1.0,0.0),        // diffuse\\n          vec3(0.2),              // ambient\\n          10.0                    // shiness\\n      );\\n      vec3 cameraPos                    = vec3(10.0, 1.0, 10.0);\\n      const vec3 backGroundColor  = vec3(0.7);\\n      vec2 mouseStartPos, mouseCurrPos;\\n      vec2 mouse = iMouse.xy / iResolution.xy;\\n\\n      if(iMouse.z > 0.0){\\n        \\n        vec3 cameraAt \\t= vec3(0.0);\\n\\n        float angleX = 6.28 * mouse.x;\\n        float angleY =  mouse.y * 6.28 ;\\n        cameraPos\\t= 12.0 * (vec3(sin(angleX)*cos(angleY), sin(angleY), cos(angleX)*cos(angleY)));\\n      }\\n\\n      for( int m=0; m<AA; m++ ){\\n          for( int n=0; n<AA; n++ ){\\n              float depth = MIN_DIST;\\n  \\n              // create view ray\\n              vec3 ray = rayDirection(iResolution.xy, gl_FragCoord.xy);\\n              mat4 viewToWorld = viewMatrix(cameraPos, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\\n              vec3 worldDir = (viewToWorld * vec4(ray, 0.0)).xyz;\\n  \\n              // raytracing\\n              for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\\n                  float dist = map(cameraPos + depth * worldDir);\\n                  if (dist < EPSILON) {\\n                      vec3 p = cameraPos + depth * worldDir;\\n                      vec3 n = normal(p);\\n  \\n                      gl_FragColor = vec4(lighting(p, n, cameraPos, mat_yellow), 1.0);\\n                      return;\\n                  }\\n  \\n                  depth += dist;\\n  \\n                  if (depth >= MAX_DIST) {\\n                      gl_FragColor = vec4(backGroundColor.xyz, 1.0);\\n                      return;\\n                  }\\n              }\\n          }\\n      }\\n  }\\n\\n  \\n  \");\n};","map":{"version":3,"names":["primitives","fs","sdf"],"sources":["C:/Users/daniz/TFG/Aplicacion/src/fragmentShaderMovable.js"],"sourcesContent":["import { primitives } from \"./primitives\";\r\n\r\nexport const fs = (sdf) => {\r\n    return `\r\n    \r\n    // https://thebookofshaders.com/03/?lan=es\r\n  // https://thebookofshaders.com/03/\r\n  // http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#putting-it-all-together\r\n  // https://www.shadertoy.com/view/llt3R4\r\n  \r\n  // camera\r\n  // https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-ray-tracing/how-does-it-work\r\n  // http://www.codinglabs.net/article_world_view_projection_matrix.aspx\r\n  // https://iopscience.iop.org/article/10.1088/0031-9155/52/12/006/meta\r\n  // https://www.ingebook.com/ib/NPcd/IB_BooksVis?cod_primaria=1000187&codigo_libro=6575\r\n  \r\n  #ifdef GL_ES\r\n  precision mediump float;\r\n  #endif\r\n  \r\n  const int AA = 3;\r\n  const int MAX_MARCHING_STEPS = 255;\r\n  const float EPSILON = 0.0001;\r\n  const float MIN_DIST = 0.0;\r\n  const float MAX_DIST = 100.0;\r\n\r\n  uniform bool leftClick;\r\n\r\n  ${primitives()}\r\n\r\n  struct Material\r\n  {\r\n      vec3 specular;\r\n      vec3 diffuse;\r\n      vec3 ambient;\r\n      float smoothness;\r\n  };\r\n  \r\n  float map( in vec3 p )\r\n  {\r\n    return ${sdf};\r\n  }\r\n  \r\n  \r\n  vec3 rayDirection(vec2 size, vec2 fragCoord) {\r\n      const float fov = 45.0;\r\n  \r\n      vec2 xy = fragCoord - size / 2.0;\r\n      float z = size.y / tan(radians(fov) / 2.0);\r\n  \r\n      return normalize(vec3(xy, -z));\r\n  }\r\n  \r\n  vec3 normal(vec3 p) {\r\n      return normalize(vec3(\r\n          map(vec3(p.x + EPSILON, p.y, p.z)) - map(vec3(p.x - EPSILON, p.y, p.z)),\r\n          map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\r\n          map(vec3(p.x, p.y, p.z  + EPSILON)) - map(vec3(p.x, p.y, p.z - EPSILON))\r\n      ));\r\n  }\r\n  \r\n  vec3 lighting(vec3 p, vec3 n, vec3 eye, Material mat){\r\n      vec3 ambient = vec3(0.5);\r\n  \r\n      vec3 lights_pos[2];\r\n      lights_pos[0] = vec3(4.0, 2.0, 2.0);\r\n      lights_pos[1] = vec3(-4.0, -2.0, -2.0);\r\n  \r\n      vec3 lights_color[2];\r\n      lights_color[0] = vec3(1.0, 1.0, 1.0);\r\n      lights_color[1] = vec3(1.0, 1.0, 1.0);\r\n  \r\n      vec3 Ip = mat.ambient * ambient;\r\n  \r\n      for(int i=0; i<2; i++){\r\n          vec3 Lm = normalize(lights_pos[i] - p);\r\n          vec3 Rm = normalize(2.0*(dot(Lm,n))*n - Lm);    // reflect(-Lm, n)\r\n          vec3 V  = normalize(eye - p);\r\n  \r\n          float LN = dot(Lm, n);\r\n          float RV = dot(Rm, V);\r\n  \r\n          if (LN < 0.0)   // Light not visible\r\n              Ip += vec3(0.0, 0.0, 0.0);\r\n          else if (RV < 0.0)  // opposite direction as viewer, apply only diffuse\r\n              Ip += lights_color[i] * (mat.diffuse * LN);\r\n          else\r\n              Ip += lights_color[i] * (mat.diffuse*LN + mat.specular*pow(RV, mat.smoothness));\r\n      }\r\n  \r\n      return Ip;\r\n  }\r\n  \r\n  mat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\r\n      // Based on gluLookAt man page\r\n      vec3 f = normalize(center - eye);\r\n      vec3 s = normalize(cross(f, up));\r\n      vec3 u = cross(s, f);\r\n      return mat4(\r\n          vec4(s, 0.0),\r\n          vec4(u, 0.0),\r\n          vec4(-f, 0.0),\r\n          vec4(0.0, 0.0, 0.0, 1)\r\n      );\r\n  }\r\n  \r\n  float clamp(float val){\r\n    if(val < 0.0)   return 0.0;\r\n    if(val >1.0)    return 1.0;\r\n\r\n    return val;\r\n}\r\n\r\n  void main() {\r\n      Material mat_yellow = Material(\r\n          vec3(1.0, 1.0, 1.0),    // specular\r\n          vec3(1.0, 1.0,0.0),        // diffuse\r\n          vec3(0.2),              // ambient\r\n          10.0                    // shiness\r\n      );\r\n      vec3 cameraPos                    = vec3(10.0, 1.0, 10.0);\r\n      const vec3 backGroundColor  = vec3(0.7);\r\n      vec2 mouseStartPos, mouseCurrPos;\r\n      vec2 mouse = iMouse.xy / iResolution.xy;\r\n\r\n      if(iMouse.z > 0.0){\r\n        \r\n        vec3 cameraAt \t= vec3(0.0);\r\n\r\n        float angleX = 6.28 * mouse.x;\r\n        float angleY =  mouse.y * 6.28 ;\r\n        cameraPos\t= 12.0 * (vec3(sin(angleX)*cos(angleY), sin(angleY), cos(angleX)*cos(angleY)));\r\n      }\r\n\r\n      for( int m=0; m<AA; m++ ){\r\n          for( int n=0; n<AA; n++ ){\r\n              float depth = MIN_DIST;\r\n  \r\n              // create view ray\r\n              vec3 ray = rayDirection(iResolution.xy, gl_FragCoord.xy);\r\n              mat4 viewToWorld = viewMatrix(cameraPos, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\r\n              vec3 worldDir = (viewToWorld * vec4(ray, 0.0)).xyz;\r\n  \r\n              // raytracing\r\n              for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\r\n                  float dist = map(cameraPos + depth * worldDir);\r\n                  if (dist < EPSILON) {\r\n                      vec3 p = cameraPos + depth * worldDir;\r\n                      vec3 n = normal(p);\r\n  \r\n                      gl_FragColor = vec4(lighting(p, n, cameraPos, mat_yellow), 1.0);\r\n                      return;\r\n                  }\r\n  \r\n                  depth += dist;\r\n  \r\n                  if (depth >= MAX_DIST) {\r\n                      gl_FragColor = vec4(backGroundColor.xyz, 1.0);\r\n                      return;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n  }\r\n\r\n  \r\n  `;\r\n  };\r\n  "],"mappings":"AAAA,SAASA,UAAT,QAA2B,cAA3B;AAEA,OAAO,IAAMC,EAAE,GAAG,SAALA,EAAK,CAACC,GAAD,EAAS;EACvB,02BAyBAF,UAAU,EAzBV,sLAqCSE,GArCT;AAoKD,CArKI"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { secNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'sec';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createSec = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _BigNumber = _ref.BigNumber;\n  var trigUnit = createTrigUnit({\n    typed: typed\n  });\n  /**\r\n   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\r\n   *\r\n   * To avoid confusion with the matrix secant, this function does not\r\n   * apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sec(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sec(2)      // returns number -2.4029979617223822\r\n   *    1 / math.cos(2)  // returns number -2.4029979617223822\r\n   *\r\n   * See also:\r\n   *\r\n   *    cos, csc, cot\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit} x  Function input\r\n   * @return {number | BigNumber | Complex} Secant of x\r\n   */\n\n  return typed(name, {\n    number: secNumber,\n    Complex: function Complex(x) {\n      return x.sec();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x.cos());\n    }\n  }, trigUnit);\n});","map":{"version":3,"names":["factory","secNumber","createTrigUnit","name","dependencies","createSec","_ref","typed","_BigNumber","BigNumber","trigUnit","number","Complex","x","sec","div","cos"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/mathjs/lib/esm/function/trigonometry/sec.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { secNumber } from '../../plain/number/index.js';\r\nimport { createTrigUnit } from './trigUnit.js';\r\nvar name = 'sec';\r\nvar dependencies = ['typed', 'BigNumber'];\r\nexport var createSec = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    BigNumber: _BigNumber\r\n  } = _ref;\r\n  var trigUnit = createTrigUnit({\r\n    typed\r\n  });\r\n  /**\r\n   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\r\n   *\r\n   * To avoid confusion with the matrix secant, this function does not\r\n   * apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sec(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sec(2)      // returns number -2.4029979617223822\r\n   *    1 / math.cos(2)  // returns number -2.4029979617223822\r\n   *\r\n   * See also:\r\n   *\r\n   *    cos, csc, cot\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit} x  Function input\r\n   * @return {number | BigNumber | Complex} Secant of x\r\n   */\r\n\r\n  return typed(name, {\r\n    number: secNumber,\r\n    Complex: x => x.sec(),\r\n    BigNumber: x => new _BigNumber(1).div(x.cos())\r\n  }, trigUnit);\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACxE,IACEC,KADF,GAGID,IAHJ,CACEC,KADF;EAAA,IAEaC,UAFb,GAGIF,IAHJ,CAEEG,SAFF;EAIA,IAAIC,QAAQ,GAAGR,cAAc,CAAC;IAC5BK,KAAK,EAALA;EAD4B,CAAD,CAA7B;EAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOA,KAAK,CAACJ,IAAD,EAAO;IACjBQ,MAAM,EAAEV,SADS;IAEjBW,OAAO,EAAE,iBAAAC,CAAC;MAAA,OAAIA,CAAC,CAACC,GAAF,EAAJ;IAAA,CAFO;IAGjBL,SAAS,EAAE,mBAAAI,CAAC;MAAA,OAAI,IAAIL,UAAJ,CAAe,CAAf,EAAkBO,GAAlB,CAAsBF,CAAC,CAACG,GAAF,EAAtB,CAAJ;IAAA;EAHK,CAAP,EAITN,QAJS,CAAZ;AAKD,CApC4C,CAAtC"},"metadata":{},"sourceType":"module"}
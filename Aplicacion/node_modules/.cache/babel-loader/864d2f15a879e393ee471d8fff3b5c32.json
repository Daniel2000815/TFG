{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.evaluate = exports.parse = exports.ParseDeps = exports.Parser = void 0;\nvar Collection_1 = require(\"./Collection\");\nvar Slice_1 = require(\"./Slice\");\nvar Token_1 = require(\"./Token\");\nvar Trig_1 = require(\"../Functions/Trig\");\nvar Trig_hyperbolic_1 = require(\"../Functions/Trig.hyperbolic\");\nvar Symbol_1 = require(\"../Types/Symbol\");\nvar Settings_1 = require(\"../Settings\");\nvar RPN_1 = require(\"./RPN\");\nvar Utils_1 = require(\"../Core/Utils\");\nvar Groups_1 = require(\"../Types/Groups\");\nvar LaTeX_1 = require(\"../LaTeX/LaTeX\");\nvar Vector_1 = require(\"../Types/Vector\");\nvar Errors_1 = require(\"../Core/Errors\");\nvar Core_1 = require(\"../Functions/Core\");\n//Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm\nvar Parser = /*#__PURE__*/function () {\n  function Parser(tokenizer, operators, functionProvider, variables, peekers, units) {\n    var _this = this;\n    _classCallCheck(this, Parser);\n    // exports for back compatibility\n    this.classes = {\n      Collection: Collection_1.Collection,\n      Slice: Slice_1.Slice,\n      Token: Token_1.Token\n    };\n    this.trig = Trig_1.Trig;\n    this.trigh = Trig_hyperbolic_1.TrigHyperbolic;\n    this.error = Errors_1.err;\n    this.symfunction = Symbol_1.symfunction;\n    this.bin = {};\n    // private\n    this.remove_redundant_powers = function (arr) {\n      // The filtered array\n      var narr = [];\n      while (arr.length) {\n        // Remove the element from the front\n        var e = arr.shift();\n        var next = arr[0];\n        var next_is_array = (0, Utils_1.isArray)(next);\n        var next_is_minus = next === '-';\n        // Remove redundant plusses\n        if (e === '^') {\n          if (next === '+') {\n            arr.shift();\n          } else if (next_is_array && next[0] === '+') {\n            next.shift();\n          }\n          // Remove redundant parentheses\n          if (next_is_array && next.length === 1) {\n            arr.unshift(arr.shift()[0]);\n          }\n        }\n        // Check if it's a negative power\n        if (e === '^' && (next_is_array && next[0] === '-' || next_is_minus)) {\n          // If so:\n          // - Remove it from the new array, place a one and a division sign in that array and put it back\n          var last = narr.pop();\n          // Check if it's something multiplied by\n          var before = narr[narr.length - 1];\n          var before_last = '1';\n          if (before === '*') {\n            narr.pop();\n            // For simplicity we just pop it.\n            before_last = narr.pop();\n          }\n          // Implied multiplication\n          else if ((0, Utils_1.isArray)(before)) {\n            before_last = narr.pop();\n          }\n          narr.push(before_last, '/', last, e);\n          // Remove the negative sign from the power\n          if (next_is_array) {\n            next.shift();\n          } else {\n            arr.shift();\n          }\n          // Remove it from the array so we don't end up with redundant parentheses if we can\n          if (next_is_array && next.length === 1) {\n            narr.push(arr.shift()[0]);\n          }\n        } else {\n          narr.push(e);\n        }\n      }\n      return narr;\n    };\n    this.tokenizer = tokenizer;\n    this.operators = operators;\n    this.functionProvider = functionProvider;\n    this.variables = variables;\n    this.peekers = peekers;\n    this.units = units;\n    operators.injectOperatorsDeps({\n      registerOperator: function registerOperator(name, operation) {\n        return _this.setAction(name, operation);\n      }\n    });\n  }\n  _createClass(Parser, [{\n    key: \"getAction\",\n    value: function getAction(name) {\n      // return this.actions[name];\n      return this[name];\n    }\n  }, {\n    key: \"setAction\",\n    value: function setAction(name, func) {\n      // this.actions[name] = func;\n      this[name] = func;\n    }\n  }, {\n    key: \"setOperator\",\n    value: function setOperator(operator) {\n      var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      var shift = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      this.operators.setOperator(operator, action, shift);\n    }\n    //delay setting of constants until Settings is ready\n  }, {\n    key: \"initConstants\",\n    value: function initConstants() {\n      this.variables.setConstant('E', new Symbol_1.Symbol(Settings_1.Settings.E));\n      this.variables.setConstant('PI', new Symbol_1.Symbol(Settings_1.Settings.PI));\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(e) {\n      var substitutions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var tokens = this.tokenizer.tokenize(e, true);\n      var rpn = this.toRPN(tokens);\n      return this.parseRPN(rpn, substitutions);\n    }\n    /**\n     * Tokenizes the string\n     * @param {String} e\n     * @returns {Token[]}\n     */\n  }, {\n    key: \"tokenize\",\n    value: function tokenize(e) {\n      return this.tokenizer.tokenize(e, false);\n    }\n    /**\n     * Puts token array in Reverse Polish Notation\n     * @param {Token[]} tokens\n     * @returns {Token[]}\n     */\n  }, {\n    key: \"toRPN\",\n    value: function toRPN(tokens) {\n      return RPN_1.RPN.TokensToRPN(tokens);\n    }\n    /**\n     * Parses the tokens\n     * @param {Token[]} rpn\n     * @param {object} substitutions\n     * @returns {Symbol}\n     */\n  }, {\n    key: \"parseRPN\",\n    value: function parseRPN(rpn, substitutions) {\n      var _this2 = this;\n      var rpnDeps = {\n        callfunction: function callfunction() {\n          return _this2.callfunction.apply(_this2, arguments);\n        },\n        getAction: function getAction(action) {\n          return _this2.getAction(action).bind(_this2);\n        }\n      };\n      var rpnParser = new RPN_1.RPN(rpnDeps, this.variables, this.peekers);\n      return rpnParser.parseRPN(rpn, substitutions);\n    }\n    /**\n     * This method is supposed to behave similarly to the override method but it does not override\n     * the existing function rather it only extends it\n     * @param {String} what\n     * @param {Function} with_what\n     * @param {boolean} force_call\n     */\n  }, {\n    key: \"extend\",\n    value: function extend(what, with_what, force_call) {\n      var _this3 = this;\n      var extended = this.getAction(what);\n      if (typeof extended === 'function' && typeof with_what === 'function') {\n        var f = extended;\n        this.setAction(what, function (a, b) {\n          if ((0, Utils_1.isSymbol)(a) && (0, Utils_1.isSymbol)(b) && !force_call) {\n            return f.call(_this3, a, b);\n          } else {\n            return with_what.call(_this3, a, b, f);\n          }\n        });\n      }\n    }\n    /**\n     * This method gives the ability to override operators with new methods.\n     * @param {String} which\n     * @param {Function} with_what\n     */\n  }, {\n    key: \"override\",\n    value: function override(which, with_what) {\n      if (!this.bin[which]) {\n        this.bin[which] = [];\n      }\n      this.bin[which].push(this[which]);\n      this[which] = with_what;\n    }\n    /**\n     * Restores a previously overridden operator\n     * @param {String} what\n     */\n  }, {\n    key: \"restore\",\n    value: function restore(what) {\n      if (this[what]) {\n        this[what] = this.bin[what].pop();\n      }\n    }\n  }, {\n    key: \"clean\",\n    value: function clean(symbol) {\n      var _this4 = this;\n      // handle functions with numeric values\n      // handle denominator within denominator\n      // handle trig simplifications\n      var g = symbol.group,\n        retval;\n      //Now let's get to work\n      if (g === Groups_1.Groups.CP) {\n        var num = symbol.getNum(),\n          den = symbol.getDenom() || new Symbol_1.Symbol(1),\n          p = Number(symbol.power),\n          factor = new Symbol_1.Symbol(1);\n        if (Math.abs(p) === 1) {\n          den.each(function (x) {\n            if (x.group === Groups_1.Groups.CB) {\n              factor = (0, Core_1.multiply)(factor, _this4.clean(x.getDenom()));\n            } else if (x.power.lessThan(0)) {\n              factor = (0, Core_1.multiply)(factor, _this4.clean(x.clone().toUnitMultiplier()));\n            }\n          });\n          var new_den = new Symbol_1.Symbol(0);\n          //now divide out the factor and add to new den\n          den.each(function (x) {\n            new_den = (0, Core_1.add)((0, Core_1.divide)(x, factor.clone()), new_den);\n          });\n          factor.invert(); //invert so it can be added to the top\n          var new_num;\n          if (num.isComposite()) {\n            new_num = new Symbol_1.Symbol(0);\n            num.each(function (x) {\n              new_num = (0, Core_1.add)((0, Core_1.multiply)(_this4.clean(x), factor.clone()), new_num);\n            });\n          } else new_num = (0, Core_1.multiply)(factor, num);\n          retval = (0, Core_1.divide)(new_num, new_den);\n        }\n      } else if (g === Groups_1.Groups.CB) {\n        retval = new Symbol_1.Symbol(1);\n        symbol.each(function (x) {\n          retval = (0, Core_1.multiply)(retval, _this4.clean(x));\n        });\n      } else if (g === Groups_1.Groups.FN) {\n        if (symbol.args.length === 1 && symbol.args[0].isConstant()) retval = (0, Utils_1.block)('PARSE2NUMBER', function () {\n          return _this4.parse(symbol);\n        }, true);\n      }\n      if (!retval) retval = symbol;\n      return retval;\n    }\n    /**\n     * An internal function call for the Parser. This will either trigger a real\n     * function call if it can do so or just return a symbolic representation of the\n     * function using symfunction.\n     * @param {String} fn_name\n     * @param {Array} args\n     * @param {int} allowed_args\n     * @returns {Symbol}\n     */\n  }, {\n    key: \"callfunction\",\n    value: function callfunction(fn_name, args) {\n      var allowed_args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      var fn_settings = this.functionProvider.getFunctionDescriptor(fn_name);\n      if (!fn_settings) (0, Errors_1.err)('Nerdamer currently does not support the function ' + fn_name);\n      var num_allowed_args = fn_settings[1] || allowed_args,\n        //get the number of allowed arguments\n        fn = fn_settings[0],\n        //get the mapped function\n        retval;\n      //We want to be able to call apply on the arguments or create a symfunction. Both require\n      //an array so make sure to wrap the argument in an array.\n      if (!(args instanceof Array)) args = args !== undefined ? [args] : [];\n      if (num_allowed_args !== -1) {\n        var is_array = (0, Utils_1.isArray)(num_allowed_args),\n          min_args = is_array ? num_allowed_args[0] : num_allowed_args,\n          max_args = is_array ? num_allowed_args[1] : num_allowed_args,\n          num_args = args.length;\n        var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';\n        if (num_args < min_args) (0, Errors_1.err)((0, Utils_1.format)(error_msg, 'minimum', min_args, num_args));\n        if (num_args > max_args) (0, Errors_1.err)((0, Utils_1.format)(error_msg, 'maximum', max_args, num_args));\n      }\n      /*\n       * The following are very important to the how nerdamer constructs functions!\n       * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This\n       *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry\n       * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics\n       * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then\n       *     they are expecting a symbolic output.\n       */\n      //check if arguments are all numers\n      var numericArgs = (0, Utils_1.allNumbers)(args);\n      //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary\n      //            if (Settings.USE_BIG && numericArgs) {\n      //                retval = Big[fn_name].apply(undefined, args);\n      //            }\n      //            else {\n      if (!fn) {\n        //Remember assumption 1. No function defined so it MUST be numeric in nature\n        fn = this.functionProvider.findFunction(fn_name);\n        if (Settings_1.Settings.PARSE2NUMBER && numericArgs) retval = (0, Symbol_1.bigConvert)(fn.apply(fn, args));else retval = (0, Symbol_1.symfunction)(fn_name, args);\n      } else {\n        //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values\n        var thisArg = fn_settings[2] || {};\n        thisArg.parser = this;\n        retval = fn.apply(thisArg, args);\n      }\n      //            }\n      return retval;\n    }\n  }, {\n    key: \"getFunction\",\n    value:\n    //TODO: Utilize the function below instead of the linked function\n    function getFunction(name) {\n      return this.functionProvider.getFunctionDescriptors(name)[0];\n    }\n    /**\n     * TODO: Switch to Parser.tokenize for this method\n     * Reads a string into an array of Symbols and operators\n     * @param {String} expression_string\n     * @returns {Array}\n     */\n  }, {\n    key: \"toObject\",\n    value: function toObject(expression_string) {\n      var objectify = function objectify(tokens) {\n        var output = [];\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n          var v = token.value;\n          if (token.type === Token_1.Token.VARIABLE_OR_LITERAL) {\n            output.push(new Symbol_1.Symbol(v));\n          } else if (token.type === Token_1.Token.FUNCTION) {\n            //jump ahead since the next object are the arguments\n            i++;\n            //create a symbolic function and stick it on output\n            var f = (0, Symbol_1.symfunction)(v, objectify(tokens[i]));\n            f.isConversion = true;\n            output.push(f);\n          } else if (token.type === Token_1.Token.OPERATOR) {\n            output.push(v);\n          } else {\n            output.push(objectify(token));\n          }\n        }\n        return output;\n      };\n      return objectify(this.tokenize(expression_string));\n    }\n    // A helper method for toTeX\n    // private\n  }, {\n    key: \"chunkAtCommas\",\n    value: function chunkAtCommas(arr) {\n      var chunks = [[]];\n      for (var j = 0, k = 0, l = arr.length; j < l; j++) {\n        if (arr[j] === ',') {\n          k++;\n          chunks[k] = [];\n        } else {\n          chunks[k].push(arr[j]);\n        }\n      }\n      return chunks;\n    }\n    // Helper method for toTeX\n    // private\n  }, {\n    key: \"rem_brackets\",\n    value: function rem_brackets(str) {\n      return str.replace(/^\\\\left\\((.+)\\\\right\\)$/g, function (str, a) {\n        if (a) {\n          return a;\n        }\n        return str;\n      });\n    }\n    /**\n     * Convert expression or object to LaTeX\n     * @param {string} expression_or_obj\n     * @param {ConvertToLaTeXOptions} opt\n     * @returns {string}\n     */\n  }, {\n    key: \"toTeX\",\n    value: function toTeX(expression_or_obj, opt) {\n      var _this5 = this;\n      opt = opt || {};\n      // Add decimal option as per issue #579. Consider passing an object to Latex.latex as option instead of string\n      var decimals = opt.decimals === true ? 'decimals' : undefined;\n      var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,\n        TeX = [],\n        cdot = typeof opt.cdot === 'undefined' ? '\\\\cdot' : opt.cdot; //set omit cdot to true by default\n      // Remove negative powers as per issue #570\n      obj = this.remove_redundant_powers(obj);\n      if ((0, Utils_1.isArray)(obj)) {\n        var nobj = [],\n          a,\n          b;\n        //first handle ^\n        for (var i = 0; i < obj.length; i++) {\n          a = obj[i];\n          if (obj[i + 1] === '^') {\n            b = obj[i + 2];\n            nobj.push(LaTeX_1.LaTeX.braces(this.toTeX([a])) + '^' + LaTeX_1.LaTeX.braces(this.toTeX([b])));\n            i += 2;\n          } else {\n            nobj.push(a);\n          }\n        }\n        obj = nobj;\n      }\n      for (var _i = 0, l = obj.length; _i < l; _i++) {\n        var e = obj[_i];\n        // Convert * to cdot\n        if (e === '*') {\n          e = cdot;\n        }\n        if ((0, Utils_1.isSymbol)(e)) {\n          if (e.group === Groups_1.Groups.FN) {\n            var fname = e.fname,\n              f = void 0;\n            if (fname === Settings_1.Settings.SQRT) f = '\\\\sqrt' + LaTeX_1.LaTeX.braces(this.toTeX(e.args));else if (fname === Settings_1.Settings.ABS) f = LaTeX_1.LaTeX.brackets(this.toTeX(e.args), 'abs');else if (fname === Settings_1.Settings.PARENTHESIS) f = LaTeX_1.LaTeX.brackets(this.toTeX(e.args), 'parens');else if (fname === Settings_1.Settings.LOG10) {\n              f = '\\\\' + Settings_1.Settings.LOG10_LATEX + '\\\\left( ' + this.toTeX(e.args) + '\\\\right)';\n            } else if (fname === 'integrate') {\n              /* Retrive [Expression, x] */\n              var chunks = this.chunkAtCommas(e.args);\n              /* Build TeX */\n              var expr = LaTeX_1.LaTeX.braces(this.toTeX(chunks[0])),\n                dx = this.toTeX(chunks[1]);\n              f = '\\\\int ' + expr + '\\\\, d' + dx;\n            } else if (fname === 'defint') {\n              var _chunks = this.chunkAtCommas(e.args),\n                _expr = LaTeX_1.LaTeX.braces(this.toTeX(_chunks[0])),\n                _dx = this.toTeX(_chunks[3]),\n                lb = this.toTeX(_chunks[1]),\n                ub = this.toTeX(_chunks[2]);\n              f = '\\\\int\\\\limits_{' + lb + '}^{' + ub + '} ' + _expr + '\\\\, d' + _dx;\n            } else if (fname === 'diff') {\n              var _chunks2 = this.chunkAtCommas(e.args);\n              var _dx2 = '',\n                _expr2 = LaTeX_1.LaTeX.braces(this.toTeX(_chunks2[0]));\n              /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */\n              if (_chunks2.length === 1) {\n                var vars = [];\n                for (var j = 0; j < _chunks2[0].length; j++) {\n                  if (_chunks2[0][j].group === 3) {\n                    vars.push(_chunks2[0][j].value);\n                  }\n                }\n                vars.sort();\n                _dx2 = vars.length > 0 ? '\\\\frac{d}{d ' + vars[0] + '}' : '\\\\frac{d}{d x}';\n              }\n              /* If two arguments, we have expression and variable, we assume n = 1 */else if (_chunks2.length === 2) {\n                _dx2 = '\\\\frac{d}{d ' + _chunks2[1] + '}';\n              }\n              /* If we have more than 2 arguments, we assume we've got everything */else {\n                _dx2 = '\\\\frac{d^{' + _chunks2[2] + '}}{d ' + this.toTeX(_chunks2[1]) + '^{' + _chunks2[2] + '}}';\n              }\n              f = _dx2 + '\\\\left(' + _expr2 + '\\\\right)';\n            } else if (fname === 'sum' || fname === 'product') {\n              // Split e.args into 4 parts based on locations of , symbols.\n              var argSplit = [[], [], [], []],\n                _j = 0,\n                _i2 = void 0;\n              for (_i2 = 0; _i2 < e.args.length; _i2++) {\n                if (e.args[_i2] === ',') {\n                  _j++;\n                  continue;\n                }\n                argSplit[_j].push(e.args[_i2]);\n              }\n              // Then build TeX string.\n              f = (fname === 'sum' ? '\\\\sum_' : '\\\\prod_') + LaTeX_1.LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));\n              f += '^' + LaTeX_1.LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX_1.LaTeX.braces(this.toTeX(argSplit[0]));\n            } else if (fname === 'limit') {\n              var args = this.chunkAtCommas(e.args).map(function (x) {\n                if (Array.isArray(x)) return _this5.toTeX(x.join(''));\n                return _this5.toTeX(String(x));\n              });\n              f = '\\\\lim_' + LaTeX_1.LaTeX.braces(args[1] + '\\\\to ' + args[2]) + ' ' + LaTeX_1.LaTeX.braces(args[0]);\n            } else if (fname === Settings_1.Settings.FACTORIAL || fname === Settings_1.Settings.DOUBLEFACTORIAL) f = this.toTeX(e.args) + (fname === Settings_1.Settings.FACTORIAL ? '!' : '!!');else {\n              f = LaTeX_1.LaTeX.latex(e, decimals);\n              //f = '\\\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');\n            }\n\n            TeX.push(f);\n          } else {\n            TeX.push(LaTeX_1.LaTeX.latex(e, decimals));\n          }\n        } else if ((0, Utils_1.isArray)(e)) {\n          TeX.push(LaTeX_1.LaTeX.brackets(this.toTeX(e)));\n        } else {\n          if (e === '/') TeX.push(LaTeX_1.LaTeX.frac(this.rem_brackets(TeX.pop()), this.rem_brackets(this.toTeX([obj[++_i]]))));else TeX.push(e);\n        }\n      }\n      return TeX.join(' ');\n    }\n  }, {\n    key: \"isOperator\",\n    value: function isOperator(name) {\n      return this.operators.isOperator();\n    }\n  }, {\n    key: \"getOperatorsClass\",\n    value: function getOperatorsClass() {\n      return this.operators;\n    }\n  }, {\n    key: \"getBrackets\",\n    value: function getBrackets() {\n      return this.operators.getBrackets();\n    }\n  }, {\n    key: \"functions\",\n    get: function get() {\n      return this.getFunctions();\n    }\n  }, {\n    key: \"getFunctions\",\n    value: function getFunctions() {\n      return this.functionProvider.getFunctionDescriptors();\n    }\n  }, {\n    key: \"getFunctionProvider\",\n    value: function getFunctionProvider() {\n      return this.functionProvider;\n    }\n    // Gets called when the parser finds the , operator.\n    // Commas return a Collector object which is roughly an array\n  }, {\n    key: \"comma\",\n    value: function comma(a, b) {\n      if (!(a instanceof Collection_1.Collection)) a = Collection_1.Collection.create(a);\n      a.append(b);\n      return a;\n    }\n    // Used to slice elements from arrays\n  }, {\n    key: \"slice\",\n    value: function slice(a, b) {\n      return new Slice_1.Slice(a, b);\n    }\n    // The equality setter\n  }, {\n    key: \"equals\",\n    value: function equals(a, b) {\n      // Equality can only be set for group S so complain it's not\n      if (a.group !== Groups_1.Groups.S && !a.isLinear()) {\n        (0, Errors_1.err)('Cannot set equality for ' + a.toString());\n      }\n      this.variables.setVar(a.value, b.clone());\n      return b;\n    }\n    // Percent\n  }, {\n    key: \"percent\",\n    value: function percent(a) {\n      return (0, Core_1.divide)(a, new Symbol_1.Symbol(100));\n    }\n    // Set variable\n  }, {\n    key: \"assign\",\n    value: function assign(a, b) {\n      var _this6 = this;\n      if (a instanceof Collection_1.Collection && b instanceof Collection_1.Collection) {\n        a.elements.map(function (x, i) {\n          return _this6.assign(x, b.elements[i]);\n        });\n        return Vector_1.Vector.fromArray(b.elements);\n      }\n      if (a.parent) {\n        // It's referring to the parent instead. The current item can be discarded\n        var e = a.parent;\n        e.elements[e.getter] = b;\n        delete e.getter;\n        return e;\n      }\n      if (a.group !== Groups_1.Groups.S) {\n        throw new Errors_1.NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);\n      }\n      this.variables.setVar(a.value, b);\n      return b;\n    }\n  }, {\n    key: \"function_assign\",\n    value: function function_assign(a, b) {\n      var f = a.elements.pop();\n      return this.setFunction(f, a.elements, b);\n    }\n    // Function to quickly convert bools to Symbols\n  }, {\n    key: \"bool2Symbol\",\n    value: function bool2Symbol(x) {\n      return new Symbol_1.Symbol(x === true ? 1 : 0);\n    }\n    //check for equality\n  }, {\n    key: \"eq\",\n    value: function eq(a, b) {\n      return this.bool2Symbol(a.equals(b));\n    }\n    //checks for greater than\n  }, {\n    key: \"gt\",\n    value: function gt(a, b) {\n      return this.bool2Symbol(a.gt(b));\n    }\n    //checks for greater than equal\n  }, {\n    key: \"gte\",\n    value: function gte(a, b) {\n      return this.bool2Symbol(a.gte(b));\n    }\n    //checks for less than\n  }, {\n    key: \"lt\",\n    value: function lt(a, b) {\n      return this.bool2Symbol(a.lt(b));\n    }\n    //checks for less than equal\n  }, {\n    key: \"lte\",\n    value: function lte(a, b) {\n      return this.bool2Symbol(a.lte(b));\n    }\n    // wraps the factorial\n  }, {\n    key: \"factorial\",\n    value: function factorial(a) {\n      return (0, Symbol_1.symfunction)(Settings_1.Settings.FACTORIAL, [a]);\n    }\n    // wraps the double factorial\n  }, {\n    key: \"dfactorial\",\n    value: function dfactorial(a) {\n      return (0, Symbol_1.symfunction)(Settings_1.Settings.DOUBLEFACTORIAL, [a]);\n    }\n    //Link the functions to the parse so they're available outside of the library.\n    //This is strictly for convenience and may be deprecated.\n  }, {\n    key: \"expand\",\n    value: function expand(symbol) {\n      var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      return (0, Core_1.expand)(symbol, opt);\n    }\n  }, {\n    key: \"round\",\n    value: function round(x, s) {\n      return (0, Core_1.round)(x, s);\n    }\n  }, {\n    key: \"cbrt\",\n    value: function cbrt(symbol) {\n      return (0, Core_1.cbrt)(symbol);\n    }\n  }, {\n    key: \"abs\",\n    value: function abs(symbol) {\n      return (0, Core_1.abs)(symbol);\n    }\n  }, {\n    key: \"log\",\n    value: function log(symbol, base) {\n      return (0, Core_1.log)(symbol, base);\n    }\n  }, {\n    key: \"rationalize\",\n    value: function rationalize(symbol) {\n      return (0, Core_1.rationalize)(symbol);\n    }\n  }, {\n    key: \"nthroot\",\n    value: function nthroot(num, p, prec, asbig) {\n      return (0, Core_1.nthroot)(num, p, prec, asbig);\n    }\n  }, {\n    key: \"arg\",\n    value: function arg(symbol) {\n      return (0, Core_1.arg)(symbol);\n    }\n  }, {\n    key: \"conjugate\",\n    value: function conjugate(symbol) {\n      return (0, Core_1.conjugate)(symbol);\n    }\n  }, {\n    key: \"imagpart\",\n    value: function imagpart(symbol) {\n      return (0, Core_1.imagpart)(symbol);\n    }\n  }, {\n    key: \"realpart\",\n    value: function realpart(symbol) {\n      return (0, Core_1.realpart)(symbol);\n    }\n  }, {\n    key: \"sqrt\",\n    value: function sqrt(symbol) {\n      return (0, Core_1.sqrt)(symbol);\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(a, b) {\n      return (0, Core_1.multiply)(a, b);\n    }\n  }, {\n    key: \"divide\",\n    value: function divide(a, b) {\n      return (0, Core_1.divide)(a, b);\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(a, b) {\n      return (0, Core_1.subtract)(a, b);\n    }\n  }, {\n    key: \"add\",\n    value: function add(a, b) {\n      return (0, Core_1.add)(a, b);\n    }\n  }, {\n    key: \"pow\",\n    value: function pow(a, b) {\n      return (0, Core_1.pow)(a, b);\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(symbol1, symbol2) {\n      return (0, Core_1.mod)(symbol1, symbol2);\n    }\n  }, {\n    key: \"tree\",\n    value: function tree(expression) {\n      var tokens = this.tokenize(expression);\n      tokens = this.toRPN(tokens);\n      return this.tokenizer.tree(tokens);\n    }\n  }, {\n    key: \"setFunction\",\n    value: function setFunction(name, params_array, body) {\n      (0, Utils_1.validateName)(name);\n      if (!this.variables.isReserved(name)) {\n        params_array = params_array || this.parse(body).variables();\n        // The function gets set to PARSER.mapped function which is just\n        // a generic function call.\n        //The loader for functions which are not part of Math2\n        var mapped_function = function mapped_function() {\n          var subs = {},\n            params = this.params;\n          for (var i = 0; i < params.length; i++) {\n            subs[params[i]] = String(arguments[i]);\n          }\n          return this.parser.parse(this.body, subs);\n        };\n        this.functionProvider.setFunctionDescriptor(name, [mapped_function, params_array.length, {\n          name: name,\n          params: params_array,\n          body: body\n        }]);\n        return body;\n      }\n      return null;\n    }\n  }]);\n  return Parser;\n}();\nexports.Parser = Parser;\n// type ParseDepsType = {\n//     parser: Parser | null;\n// }\n/**\n *\n * @type {{parser: Parser}}\n */\nexports.ParseDeps = {\n  parser: null\n};\n/**\n *\n * @param {string | Symbol} e\n * @param {object} substitutions\n * @return {*}\n */\nfunction parse(e) {\n  var substitutions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return exports.ParseDeps.parser.parse(e, substitutions);\n}\nexports.parse = parse;\n/**\n * As the name states. It forces evaluation of the expression\n * @param {string} expression\n * @param {Symbol} o\n * @deprecated use Utils.evaluate instead\n */\nfunction evaluate(expression) {\n  var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  return (0, Utils_1.block)('PARSE2NUMBER', function () {\n    return parse(expression, o);\n  }, true);\n}\nexports.evaluate = evaluate;","map":{"version":3,"mappings":"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","names":["Parser","tokenizer","operators","functionProvider","variables","peekers","units","Collection","Collection_1","Slice","Slice_1","Token","Token_1","Trig_1","Trig_hyperbolic_1","Errors_1","Symbol_1","arr","narr","length","e","shift","next","next_is_array","next_is_minus","unshift","last","pop","before","before_last","push","injectOperatorsDeps","registerOperator","name","operation","setAction","func","operator","action","undefined","setOperator","setConstant","Settings_1","E","PI","substitutions","tokens","tokenize","rpn","toRPN","parseRPN","RPN_1","TokensToRPN","rpnDeps","callfunction","getAction","bind","rpnParser","what","with_what","force_call","extended","f","a","b","call","which","bin","symbol","g","group","retval","Groups_1","CP","num","getNum","den","getDenom","p","Number","power","factor","Math","abs","each","x","CB","clean","lessThan","clone","toUnitMultiplier","new_den","invert","new_num","isComposite","FN","args","isConstant","parse","fn_name","allowed_args","fn_settings","getFunctionDescriptor","num_allowed_args","fn","Array","is_array","min_args","max_args","num_args","error_msg","numericArgs","findFunction","PARSE2NUMBER","apply","thisArg","parser","getFunctionDescriptors","expression_string","objectify","output","i","l","token","v","value","type","VARIABLE_OR_LITERAL","FUNCTION","isConversion","OPERATOR","chunks","j","k","str","replace","expression_or_obj","opt","decimals","obj","toObject","TeX","cdot","remove_redundant_powers","nobj","LaTeX_1","braces","toTeX","fname","SQRT","ABS","brackets","PARENTHESIS","LOG10","LOG10_LATEX","chunkAtCommas","expr","dx","lb","ub","vars","sort","argSplit","map","isArray","join","String","FACTORIAL","DOUBLEFACTORIAL","latex","frac","rem_brackets","isOperator","getBrackets","getFunctions","create","append","S","isLinear","toString","setVar","elements","assign","Vector_1","fromArray","parent","getter","setFunction","bool2Symbol","equals","gt","gte","lt","lte","s","base","prec","asbig","symbol1","symbol2","expression","tree","params_array","body","isReserved","mapped_function","subs","params","arguments","setFunctionDescriptor","exports","evaluate","o"],"sourceRoot":"","sources":["../../src/Parser/Parser.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
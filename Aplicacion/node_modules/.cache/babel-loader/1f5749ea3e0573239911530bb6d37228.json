{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nthroot = void 0;\n\nvar Utils_1 = require(\"../../../Core/Utils\");\n\nvar abs_1 = require(\"./abs\");\n\nvar Frac_1 = require(\"../../../Types/Frac\");\n\nvar Math2_1 = require(\"../../Math2\");\n\nvar Symbol_1 = require(\"../../../Types/Symbol\");\n\nvar Errors_1 = require(\"../../../Core/Errors\");\n\nvar index_1 = require(\"../index\");\n\nvar Groups_1 = require(\"../../../Types/Groups\");\n\nvar Parser_1 = require(\"../../../Parser/Parser\");\n/**\n *\n * @param {Symbol} num - the number being raised\n * @param {Symbol} p - the exponent\n * @param {type} prec - the precision wanted\n * @param {bool} asbig - true if a bigDecimal is wanted\n * @returns {Symbol}\n */\n\n\nfunction nthroot(num, p, prec, asbig) {\n  //clone p and convert to a number if possible\n  p = (0, Parser_1.evaluate)((0, Parser_1.parse)(p)); //cannot calculate if p = 0. nthroot(0, 0) => 0^(1/0) => undefined\n\n  if (p.equals(0)) {\n    throw new Errors_1.UndefinedError('Unable to calculate nthroots of zero');\n  } //Stop computation if it negative and even since we have an imaginary result\n\n\n  if (num < 0 && (0, Utils_1.even)(p)) throw new Error('Cannot calculate nthroot of negative number for even powers'); //return non numeric values unevaluated\n\n  if (!num.isConstant(true)) {\n    return (0, Symbol_1.symfunction)('nthroot', arguments);\n  } //evaluate numeric values\n\n\n  if (num.group !== Groups_1.Groups.N) {\n    num = (0, Parser_1.evaluate)(num);\n  } //default is to return a big value\n\n\n  if (typeof asbig === 'undefined') asbig = true;\n  prec = prec || 25;\n  var sign = num.sign();\n  var ans;\n\n  if (sign < 0) {\n    num = (0, abs_1.abs)(num); //remove the sign\n  }\n\n  if ((0, Utils_1.isInt)(num) && p.isConstant()) {\n    if (num < 18446744073709551616) {\n      //2^64\n      ans = Frac_1.Frac.create(Math.pow(num, 1 / p));\n    } else {\n      ans = Math2_1.Math2.nthroot(num, p);\n    }\n\n    var retval;\n\n    if (asbig) {\n      // FIXME: unused retval\n      retval = new Symbol_1.Symbol(ans);\n    }\n\n    retval = new Symbol_1.Symbol(ans.toDecimal(prec));\n    return (0, index_1.multiply)(new Symbol_1.Symbol(sign), retval);\n  }\n}\n\nexports.nthroot = nthroot;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;AAEA;;;;;;;;;;AAQA,SAAgBA,OAAhB,CAAwBC,GAAxB,EAA6BC,CAA7B,EAAgCC,IAAhC,EAAsCC,KAAtC,EAA2C;EACvC;EACAF,CAAC,GAAG,uBAAS,oBAAMA,CAAN,CAAT,CAAJ,CAFuC,CAIvC;;EACA,IAAIA,CAAC,CAACG,MAAF,CAAS,CAAT,CAAJ,EAAiB;IACb,MAAM,IAAIC,uBAAJ,CAAmB,sCAAnB,CAAN;EACH,CAPsC,CASvC;;;EACA,IAAIL,GAAG,GAAG,CAAN,IAAW,kBAAKC,CAAL,CAAf,EACI,MAAM,IAAIK,KAAJ,CAAU,6DAAV,CAAN,CAXmC,CAavC;;EACA,IAAI,CAACN,GAAG,CAACO,UAAJ,CAAe,IAAf,CAAL,EAA2B;IACvB,OAAO,0BAAY,SAAZ,EAAuBC,SAAvB,CAAP;EACH,CAhBsC,CAkBvC;;;EACA,IAAIR,GAAG,CAACS,KAAJ,KAAcC,gBAAOC,CAAzB,EAA4B;IACxBX,GAAG,GAAG,uBAASA,GAAT,CAAN;EACH,CArBsC,CAuBvC;;;EACA,IAAI,OAAOG,KAAP,KAAiB,WAArB,EACIA,KAAK,GAAG,IAAR;EAEJD,IAAI,GAAGA,IAAI,IAAI,EAAf;EAEA,IAAIU,IAAI,GAAGZ,GAAG,CAACY,IAAJ,EAAX;EACA,IAAIC,GAAJ;;EAEA,IAAID,IAAI,GAAG,CAAX,EAAc;IACVZ,GAAG,GAAG,eAAIA,GAAJ,CAAN,CADU,CACM;EACnB;;EAED,IAAI,mBAAMA,GAAN,KAAcC,CAAC,CAACM,UAAF,EAAlB,EAAkC;IAE9B,IAAIP,GAAG,GAAG,oBAAV,EAAgC;MAC5B;MACAa,GAAG,GAAGC,YAAKC,MAAL,CAAYC,IAAI,CAACC,GAAL,CAASjB,GAAT,EAAc,IAAIC,CAAlB,CAAZ,CAAN;IACH,CAHD,MAIK;MACDY,GAAG,GAAGK,cAAMnB,OAAN,CAAcC,GAAd,EAAmBC,CAAnB,CAAN;IACH;;IAED,IAAIkB,MAAJ;;IACA,IAAIhB,KAAJ,EAAW;MACP;MACAgB,MAAM,GAAG,IAAIC,eAAJ,CAAWP,GAAX,CAAT;IACH;;IACDM,MAAM,GAAG,IAAIC,eAAJ,CAAWP,GAAG,CAACQ,SAAJ,CAAcnB,IAAd,CAAX,CAAT;IAEA,OAAO,sBAAS,IAAIkB,eAAJ,CAAWR,IAAX,CAAT,EAA2BO,MAA3B,CAAP;EACH;AACJ;;AAvDDG","names":["nthroot","num","p","prec","asbig","equals","Errors_1","Error","isConstant","arguments","group","Groups_1","N","sign","ans","Frac_1","create","Math","pow","Math2_1","retval","Symbol_1","toDecimal","exports"],"sourceRoot":"","sources":["../../../../src/Functions/Core/math/nthroot.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Settings = void 0;\n// noinspection NonAsciiCharacters\nexports.Settings = {\n  //Enables/Disables call peekers. False means callPeekers are disabled and true means callPeekers are enabled.\n  callPeekers: false,\n  //the max number up to which to cache primes. Making this too high causes performance issues\n  init_primes: 1000,\n  exclude: [],\n  //If you don't care about division by zero for example then this can be set to true.\n  //Has some nasty side effects so choose carefully.\n  suppress_errors: false,\n  //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns\n  //cos(9) for convenience but parse to number will always try to return a number if set to true.\n  PARSE2NUMBER: false,\n  //this flag forces the a clone to be returned when add, subtract, etc... is called\n  SAFE: false,\n  //the symbol to use for imaginary symbols\n  IMAGINARY: 'i',\n  //the modules used to link numeric function holders\n  FUNCTION_MODULES: [Math],\n  //Allow certain characters\n  ALLOW_CHARS: ['π'],\n  //Allow nerdamer to convert multi-character variables\n  USE_MULTICHARACTER_VARS: true,\n  //Allow changing of power operator\n  POWER_OPERATOR: '^',\n  //The variable validation regex\n  //VALIDATION_REGEX: /^[a-z_][a-z\\d\\_]*$/i\n  VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,\n  // The regex used to determine which characters should be included in implied multiplication\n  IMPLIED_MULTIPLICATION_REGEX: /([+\\-\\/*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[+\\-\\/*]*)/gi,\n  //Aliases\n  ALIASES: {\n    'π': 'pi',\n    '∞': 'Infinity'\n  },\n  POSITIVE_MULTIPLIERS: false,\n  //Cached items\n  CACHE: {\n    roots: {}\n  },\n  //Print out warnings or not\n  SILENCE_WARNINGS: false,\n  //Precision\n  PRECISION: 21,\n  //function mappings\n  VECTOR: 'vector',\n  PARENTHESIS: 'parens',\n  SQRT: 'sqrt',\n  ABS: 'abs',\n  FACTORIAL: 'factorial',\n  DOUBLEFACTORIAL: 'dfactorial',\n  //reference pi and e\n  LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' + '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',\n  LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' + '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',\n  PI: Math.PI,\n  E: Math.E,\n  LOG: 'log',\n  LOG10: 'log10',\n  LOG10_LATEX: 'log_{10}',\n  LOG_FNS: {\n    log: null,\n    log10: null\n  },\n  MAX_EXP: 200000,\n  //The number of scientific place to round to\n  SCIENTIFIC_MAX_DECIMAL_PLACES: 14,\n  //True if ints should not be converted to\n  SCIENTIFIC_IGNORE_ZERO_EXPONENTS: true,\n  CONST_HASH: '#',\n  /// SOLVE\n  // The search radius for the roots\n  SOLVE_RADIUS: 1000,\n  // The maximum number to fish for on each side of the zero\n  ROOTS_PER_SIDE: 10,\n  // Covert the number to multiples of pi if possible\n  make_pi_conversions: false,\n  // The step size\n  STEP_SIZE: 0.1,\n  // The epsilon size\n  EPSILON: 1e-13,\n  //the maximum iterations for Newton's method\n  MAX_NEWTON_ITERATIONS: 200,\n  //the maximum number of time non-linear solve tries another jump point\n  MAX_NON_LINEAR_TRIES: 12,\n  //the amount of iterations the function will start to jump at\n  NON_LINEAR_JUMP_AT: 50,\n  //the size of the jump\n  NON_LINEAR_JUMP_SIZE: 100,\n  //the original starting point for nonlinear solving\n  NON_LINEAR_START: 0.01,\n  //When points are generated as starting points for Newton's method, they are sliced into small\n  //slices to make sure that we have convergence on the right point. This defines the\n  //size of the slice\n  NEWTON_SLICES: 200,\n  //The epsilon used in Newton's iteration\n  NEWTON_EPSILON: Number.EPSILON * 2,\n  //The distance in which two solutions are deemed the same\n  SOLUTION_PROXIMITY: 1e-14,\n  //Indicate wheter to filter the solutions are not\n  FILTER_SOLUTIONS: true,\n  //the maximum number of recursive calls\n  MAX_SOLVE_DEPTH: 10,\n  // The tolerance that's considered close enough to zero\n  ZERO_EPSILON: 1e-9,\n  // The maximum iteration for the bisection method incase of some JS strangeness\n  MAX_BISECTION_ITER: 2000,\n  // The tolerance for the bisection method\n  BI_SECTION_EPSILON: 1e-12,\n  SHOW_WARNINGS: false,\n  USE_BIG: false,\n  E_TO_EXP: false,\n  SYMBOLIC_MIN_MAX: false,\n  IGNORE_E: false\n};","map":{"version":3,"mappings":";;;;;;AAmHA;AACWA,gBAAQ,GAAiB;EAChC;EACAC,WAAW,EAAE,KAAK;EAElB;EACAC,WAAW,EAAE,IAAI;EAEjBC,OAAO,EAAE,EAAE;EACX;EACA;EACAC,eAAe,EAAE,KAAK;EACtB;EACA;EACAC,YAAY,EAAE,KAAK;EACnB;EACAC,IAAI,EAAE,KAAK;EACX;EACAC,SAAS,EAAE,GAAG;EACd;EACAC,gBAAgB,EAAE,CAACC,IAAI,CAAC;EACxB;EACAC,WAAW,EAAE,CAAC,GAAG,CAAC;EAClB;EACAC,uBAAuB,EAAE,IAAI;EAC7B;EACAC,cAAc,EAAE,GAAG;EACnB;EACA;EACAC,gBAAgB,EAAE,sHAAsH;EACxI;EACAC,4BAA4B,EAAE,uFAAuF;EACrH;EACAC,OAAO,EAAE;IACL,GAAG,EAAE,IAAI;IACT,GAAG,EAAE;GACR;EACDC,oBAAoB,EAAE,KAAK;EAC3B;EACAC,KAAK,EAAE;IAAEC,KAAK,EAAE;EAAE,CAAE;EACpB;EACAC,gBAAgB,EAAE,KAAK;EACvB;EACAC,SAAS,EAAE,EAAE;EACb;EACAC,MAAM,EAAE,QAAQ;EAChBC,WAAW,EAAE,QAAQ;EACrBC,IAAI,EAAE,MAAM;EACZC,GAAG,EAAE,KAAK;EACVC,SAAS,EAAE,WAAW;EACtBC,eAAe,EAAE,YAAY;EAC7B;EACAC,OAAO,EAAE,4GAA4G,GACjH,kGAAkG;EACtGC,MAAM,EAAE,6GAA6G,GACjH,iGAAiG;EACrGC,EAAE,EAAEpB,IAAI,CAACoB,EAAE;EACXC,CAAC,EAAErB,IAAI,CAACqB,CAAC;EACTC,GAAG,EAAE,KAAK;EACVC,KAAK,EAAE,OAAO;EACdC,WAAW,EAAE,UAAU;EAEvBC,OAAO,EAAE;IAAEC,GAAG,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAI,CAAE;EAEnCC,OAAO,EAAE,MAAM;EACf;EACAC,6BAA6B,EAAE,EAAE;EACjC;EACAC,gCAAgC,EAAE,IAAI;EAEtCC,UAAU,EAAE,GAAG;EAEnB;EAEI;EACAC,YAAY,EAAE,IAAI;EAClB;EACAC,cAAc,EAAE,EAAE;EAClB;EACAC,mBAAmB,EAAE,KAAK;EAC1B;EACAC,SAAS,EAAE,GAAG;EACd;EACAC,OAAO,EAAE,KAAK;EACd;EACAC,qBAAqB,EAAE,GAAG;EAC1B;EACAC,oBAAoB,EAAE,EAAE;EACxB;EACAC,kBAAkB,EAAE,EAAE;EACtB;EACAC,oBAAoB,EAAE,GAAG;EACzB;EACAC,gBAAgB,EAAE,IAAI;EACtB;EACA;EACA;EACAC,aAAa,EAAE,GAAG;EAClB;EACAC,cAAc,EAAEC,MAAM,CAACR,OAAO,GAAG,CAAC;EAClC;EACAS,kBAAkB,EAAE,KAAK;EACzB;EACAC,gBAAgB,EAAE,IAAI;EACtB;EACAC,eAAe,EAAE,EAAE;EACnB;EACAC,YAAY,EAAE,IAAI;EAClB;EACAC,kBAAkB,EAAE,IAAI;EACxB;EACAC,kBAAkB,EAAE,KAAK;EAEzBC,aAAa,EAAE,KAAK;EACpBC,OAAO,EAAE,KAAK;EACdC,QAAQ,EAAE,KAAK;EACfC,gBAAgB,EAAE,KAAK;EACvBC,QAAQ,EAAE;CACb","names":["exports","callPeekers","init_primes","exclude","suppress_errors","PARSE2NUMBER","SAFE","IMAGINARY","FUNCTION_MODULES","Math","ALLOW_CHARS","USE_MULTICHARACTER_VARS","POWER_OPERATOR","VALIDATION_REGEX","IMPLIED_MULTIPLICATION_REGEX","ALIASES","POSITIVE_MULTIPLIERS","CACHE","roots","SILENCE_WARNINGS","PRECISION","VECTOR","PARENTHESIS","SQRT","ABS","FACTORIAL","DOUBLEFACTORIAL","LONG_PI","LONG_E","PI","E","LOG","LOG10","LOG10_LATEX","LOG_FNS","log","log10","MAX_EXP","SCIENTIFIC_MAX_DECIMAL_PLACES","SCIENTIFIC_IGNORE_ZERO_EXPONENTS","CONST_HASH","SOLVE_RADIUS","ROOTS_PER_SIDE","make_pi_conversions","STEP_SIZE","EPSILON","MAX_NEWTON_ITERATIONS","MAX_NON_LINEAR_TRIES","NON_LINEAR_JUMP_AT","NON_LINEAR_JUMP_SIZE","NON_LINEAR_START","NEWTON_SLICES","NEWTON_EPSILON","Number","SOLUTION_PROXIMITY","FILTER_SOLUTIONS","MAX_SOLVE_DEPTH","ZERO_EPSILON","MAX_BISECTION_ITER","BI_SECTION_EPSILON","SHOW_WARNINGS","USE_BIG","E_TO_EXP","SYMBOLIC_MIN_MAX","IGNORE_E"],"sourceRoot":"","sources":["../src/Settings.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
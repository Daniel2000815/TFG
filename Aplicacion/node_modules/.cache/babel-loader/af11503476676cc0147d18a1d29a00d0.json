{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"G:\\\\gitlab\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar utils = require('@motionone/utils');\n\nvar inset = require('./inset.cjs.js');\n\nvar presets = require('./presets.cjs.js');\n\nvar offset = require('./offset.cjs.js');\n\nvar point = {\n  x: 0,\n  y: 0\n};\n\nfunction resolveOffsets(container, info, options) {\n  var _options$offset = options.offset,\n      offsetDefinition = _options$offset === void 0 ? presets.ScrollOffset.All : _options$offset;\n  var _options$target = options.target,\n      target = _options$target === void 0 ? container : _options$target,\n      _options$axis = options.axis,\n      axis = _options$axis === void 0 ? \"y\" : _options$axis;\n  var lengthLabel = axis === \"y\" ? \"height\" : \"width\";\n  var inset$1 = target !== container ? inset.calcInset(target, container) : point;\n  /**\r\n   * Measure the target and container. If they're the same thing then we\r\n   * use the container's scrollWidth/Height as the target, from there\r\n   * all other calculations can remain the same.\r\n   */\n\n  var targetSize = target === container ? {\n    width: container.scrollWidth,\n    height: container.scrollHeight\n  } : {\n    width: target.clientWidth,\n    height: target.clientHeight\n  };\n  var containerSize = {\n    width: container.clientWidth,\n    height: container.clientHeight\n  };\n  /**\r\n   * Reset the length of the resolved offset array rather than creating a new one.\r\n   * TODO: More reusable data structures for targetSize/containerSize would also be good.\r\n   */\n\n  info[axis].offset.length = 0;\n  /**\r\n   * Populate the offset array by resolving the user's offset definition into\r\n   * a list of pixel scroll offets.\r\n   */\n\n  var hasChanged = !info[axis].interpolate;\n  var numOffsets = offsetDefinition.length;\n\n  for (var i = 0; i < numOffsets; i++) {\n    var offset$1 = offset.resolveOffset(offsetDefinition[i], containerSize[lengthLabel], targetSize[lengthLabel], inset$1[axis]);\n\n    if (!hasChanged && offset$1 !== info[axis].interpolatorOffsets[i]) {\n      hasChanged = true;\n    }\n\n    info[axis].offset[i] = offset$1;\n  }\n  /**\r\n   * If the pixel scroll offsets have changed, create a new interpolator function\r\n   * to map scroll value into a progress.\r\n   */\n\n\n  if (hasChanged) {\n    info[axis].interpolate = utils.interpolate(utils.defaultOffset(numOffsets), info[axis].offset);\n    info[axis].interpolatorOffsets = _toConsumableArray(info[axis].offset);\n  }\n\n  info[axis].progress = info[axis].interpolate(info[axis].current);\n}\n\nexports.resolveOffsets = resolveOffsets;","map":{"version":3,"names":["Object","defineProperty","exports","value","utils","require","inset","presets","offset","point","x","y","resolveOffsets","container","info","options","offsetDefinition","ScrollOffset","All","target","axis","lengthLabel","inset$1","calcInset","targetSize","width","scrollWidth","height","scrollHeight","clientWidth","clientHeight","containerSize","length","hasChanged","interpolate","numOffsets","i","offset$1","resolveOffset","interpolatorOffsets","defaultOffset","progress","current"],"sources":["G:/gitlab/TFG/Aplicacion/node_modules/@motionone/dom/dist/gestures/scroll/offsets/index.cjs.js"],"sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\nvar utils = require('@motionone/utils');\r\nvar inset = require('./inset.cjs.js');\r\nvar presets = require('./presets.cjs.js');\r\nvar offset = require('./offset.cjs.js');\r\n\r\nconst point = { x: 0, y: 0 };\r\nfunction resolveOffsets(container, info, options) {\r\n    let { offset: offsetDefinition = presets.ScrollOffset.All } = options;\r\n    const { target = container, axis = \"y\" } = options;\r\n    const lengthLabel = axis === \"y\" ? \"height\" : \"width\";\r\n    const inset$1 = target !== container ? inset.calcInset(target, container) : point;\r\n    /**\r\n     * Measure the target and container. If they're the same thing then we\r\n     * use the container's scrollWidth/Height as the target, from there\r\n     * all other calculations can remain the same.\r\n     */\r\n    const targetSize = target === container\r\n        ? { width: container.scrollWidth, height: container.scrollHeight }\r\n        : { width: target.clientWidth, height: target.clientHeight };\r\n    const containerSize = {\r\n        width: container.clientWidth,\r\n        height: container.clientHeight,\r\n    };\r\n    /**\r\n     * Reset the length of the resolved offset array rather than creating a new one.\r\n     * TODO: More reusable data structures for targetSize/containerSize would also be good.\r\n     */\r\n    info[axis].offset.length = 0;\r\n    /**\r\n     * Populate the offset array by resolving the user's offset definition into\r\n     * a list of pixel scroll offets.\r\n     */\r\n    let hasChanged = !info[axis].interpolate;\r\n    const numOffsets = offsetDefinition.length;\r\n    for (let i = 0; i < numOffsets; i++) {\r\n        const offset$1 = offset.resolveOffset(offsetDefinition[i], containerSize[lengthLabel], targetSize[lengthLabel], inset$1[axis]);\r\n        if (!hasChanged && offset$1 !== info[axis].interpolatorOffsets[i]) {\r\n            hasChanged = true;\r\n        }\r\n        info[axis].offset[i] = offset$1;\r\n    }\r\n    /**\r\n     * If the pixel scroll offsets have changed, create a new interpolator function\r\n     * to map scroll value into a progress.\r\n     */\r\n    if (hasChanged) {\r\n        info[axis].interpolate = utils.interpolate(utils.defaultOffset(numOffsets), info[axis].offset);\r\n        info[axis].interpolatorOffsets = [...info[axis].offset];\r\n    }\r\n    info[axis].progress = info[axis].interpolate(info[axis].current);\r\n}\r\n\r\nexports.resolveOffsets = resolveOffsets;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
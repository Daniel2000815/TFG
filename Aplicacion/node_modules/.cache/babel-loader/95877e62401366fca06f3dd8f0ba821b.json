{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.vectrim = void 0;\n\nvar index_1 = require(\"../../index\");\n\nvar Parser_1 = require(\"../../../../Parser/Parser\");\n/**\n * Removes duplicates from a vector\n * @param {Vector} vector\n * @param {Number} tolerance\n * @returns {Vector}\n */\n\n\nfunction vectrim(vector, tolerance) {\n  tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\n  vector = vector.clone();\n  tolerance = Number(tolerance); //place algebraic solutions first\n\n  vector.elements.sort(function (a, b) {\n    return b.group - a.group;\n  }); //depending on the start point we may have duplicates so we need to clean those up a bit.\n  //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\n\n  vector.elements = removeDuplicates(vector.elements, function (a, b) {\n    var diff = Number((0, index_1.subtract)((0, Parser_1.evaluate)(a), (0, Parser_1.evaluate)(b)).abs());\n    return diff <= tolerance;\n  });\n  return vector;\n}\n\nexports.vectrim = vectrim;\n/**\n * Removes duplicates from an array. Returns a new array\n * @param {Array} arr\n * @param {Function} condition\n */\n\nfunction removeDuplicates(arr, condition) {\n  var conditionType = typeof condition;\n\n  if (conditionType !== 'function' || conditionType === 'undefined') {\n    condition = function condition(a, b) {\n      return a === b;\n    };\n  }\n\n  var seen = [];\n\n  while (arr.length) {\n    var a = arr[0]; //only one element left so we're done\n\n    if (arr.length === 1) {\n      seen.push(a);\n      break;\n    }\n\n    var temp = [];\n    seen.push(a); //we already scanned these\n\n    for (var i = 1; i < arr.length; i++) {\n      var b = arr[i]; //if the number is outside the specified tolerance\n\n      if (!condition(a, b)) temp.push(b);\n    } //start over with the remainder\n\n\n    arr = temp;\n  }\n\n  return seen;\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;AAEA;;;;;;;;AAMA,SAAgBA,OAAhB,CAAwBC,MAAxB,EAAgCC,SAAhC,EAAyC;EACrCA,SAAS,GAAG,OAAOA,SAAP,KAAqB,WAArB,GAAmC,KAAnC,GAA2CA,SAAvD;EAEAD,MAAM,GAAGA,MAAM,CAACE,KAAP,EAAT;EAEAD,SAAS,GAAGE,MAAM,CAACF,SAAD,CAAlB,CALqC,CAMrC;;EACAD,MAAM,CAACI,QAAP,CAAgBC,IAAhB,CAAqB,UAAUC,CAAV,EAAaC,CAAb,EAAc;IAC/B,OAAOA,CAAC,CAACC,KAAF,GAAUF,CAAC,CAACE,KAAnB;EACH,CAFD,EAPqC,CAUrC;EACA;;EACAR,MAAM,CAACI,QAAP,GAAkBK,gBAAgB,CAACT,MAAM,CAACI,QAAR,EAAkB,UAAUE,CAAV,EAAaC,CAAb,EAAc;IAC9D,IAAIG,IAAI,GAAGP,MAAM,CAAC,sBAAS,uBAASG,CAAT,CAAT,EAAsB,uBAASC,CAAT,CAAtB,EAAmCI,GAAnC,EAAD,CAAjB;IACA,OAAOD,IAAI,IAAIT,SAAf;EACH,CAHiC,CAAlC;EAKA,OAAOD,MAAP;AACH;;AAlBDY;AAoBA;;;;;;AAKA,SAASH,gBAAT,CAA0BI,GAA1B,EAA+BC,SAA/B,EAAwC;EACpC,IAAIC,aAAa,GAAG,OAAOD,SAA3B;;EAEA,IAAIC,aAAa,KAAK,UAAlB,IAAgCA,aAAa,KAAK,WAAtD,EAAmE;IAC/DD,SAAS,GAAG,mBAAUR,CAAV,EAAaC,CAAb,EAAc;MACtB,OAAOD,CAAC,KAAKC,CAAb;IACH,CAFD;EAGH;;EAED,IAAIS,IAAI,GAAG,EAAX;;EAEA,OAAMH,GAAG,CAACI,MAAV,EAAkB;IACd,IAAIX,CAAC,GAAGO,GAAG,CAAC,CAAD,CAAX,CADc,CAEd;;IACA,IAAIA,GAAG,CAACI,MAAJ,KAAe,CAAnB,EAAsB;MAClBD,IAAI,CAACE,IAAL,CAAUZ,CAAV;MACA;IACH;;IACD,IAAIa,IAAI,GAAG,EAAX;IACAH,IAAI,CAACE,IAAL,CAAUZ,CAAV,EARc,CAQA;;IACd,KAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,GAAG,CAACI,MAAxB,EAAgCG,CAAC,EAAjC,EAAqC;MACjC,IAAIb,CAAC,GAAGM,GAAG,CAACO,CAAD,CAAX,CADiC,CAEjC;;MACA,IAAI,CAACN,SAAS,CAACR,CAAD,EAAIC,CAAJ,CAAd,EACIY,IAAI,CAACD,IAAL,CAAUX,CAAV;IACP,CAda,CAed;;;IACAM,GAAG,GAAGM,IAAN;EACH;;EAED,OAAOH,IAAP;AACH","names":["vectrim","vector","tolerance","clone","Number","elements","sort","a","b","group","removeDuplicates","diff","abs","exports","arr","condition","conditionType","seen","length","push","temp","i"],"sourceRoot":"","sources":["../../../../../src/Functions/Core/matrix_vector/vector/vectrim.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sqrt = void 0;\nvar Symbol_1 = require(\"../../../Types/Symbol\");\nvar Groups_1 = require(\"../../../Types/Groups\");\nvar Settings_1 = require(\"../../../Settings\");\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\nvar Complex_1 = require(\"../../Complex\");\nvar multiply_1 = require(\"../operations/multiply\");\nvar Frac_1 = require(\"../../../Types/Frac\");\nvar Utils_1 = require(\"../../../Core/Utils\");\nvar Math2_1 = require(\"../../Math2\");\nvar pfactor_1 = require(\"./pfactor\");\nvar pow_1 = require(\"../operations/pow\");\nvar divide_1 = require(\"../operations/divide\");\nvar Parser_1 = require(\"../../../Parser/Parser\");\n/**\n * The square root function\n * @param {Symbol} symbol\n * @returns {Symbol}\n */\nfunction sqrt(symbol) {\n  if (!(0, Utils_1.isSymbol)(symbol)) {\n    symbol = (0, Parser_1.parse)(symbol);\n  }\n  // Exit early for Groups.EX\n  if (symbol.group === Groups_1.Groups.EX) {\n    return (0, Symbol_1.symfunction)(Settings_1.Settings.SQRT, [symbol]);\n  }\n  if (symbol.fname === '' && symbol.power.equals(1)) symbol = symbol.args[0];\n  var is_negative = symbol.multiplier.sign() < 0;\n  if (Settings_1.Settings.PARSE2NUMBER) {\n    if (symbol.isConstant() && !is_negative) {\n      return new Symbol_1.Symbol(decimal_js_1.default.sqrt(symbol.multiplier.toDecimal()));\n    } else if (symbol.isImaginary()) {\n      return Complex_1.Complex.sqrt(symbol);\n    } else if (symbol.group === Groups_1.Groups.S) {\n      return (0, Symbol_1.symfunction)('sqrt', [symbol]);\n    }\n  }\n  var img,\n    retval,\n    isConstant = symbol.isConstant();\n  if (symbol.group === Groups_1.Groups.CB && symbol.isLinear()) {\n    var m = sqrt(new Symbol_1.Symbol(symbol.multiplier));\n    for (var s in symbol.symbols) {\n      var x = symbol.symbols[s];\n      m = (0, multiply_1.multiply)(m, sqrt(x));\n    }\n    retval = m;\n  }\n  //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\n  else if (symbol.fname === Settings_1.Settings.SQRT) {\n    var s = symbol.args[0];\n    var ms = symbol.multiplier;\n    s.setPower(symbol.power.multiply(new Frac_1.Frac(0.25)));\n    retval = s;\n    //grab the multiplier\n    if (!ms.equals(1)) retval = (0, multiply_1.multiply)(sqrt((0, Parser_1.parse)(ms)), retval);\n  }\n  //if the symbol is a fraction then we don't keep can unwrap it. For instance\n  //no need to keep sqrt(x^(1/3))\n  else if (!symbol.power.isInteger()) {\n    symbol.setPower(symbol.power.multiply(new Frac_1.Frac(0.5)));\n    retval = symbol;\n  } else if (symbol.multiplier < 0 && symbol.group === Groups_1.Groups.S) {\n    var a = (0, Parser_1.parse)(symbol.multiplier).negate();\n    var b = (0, Parser_1.parse)(symbol).toUnitMultiplier().negate();\n    retval = (0, multiply_1.multiply)((0, Symbol_1.symfunction)(Settings_1.Settings.SQRT, [b]), sqrt(a));\n  } else {\n    //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\n    //to sqrt(a)*sqrt(b)^1 for better simplification\n    //the sign of the power\n    var sign = symbol.power.sign();\n    //remove the sign\n    symbol.power = symbol.power.abs();\n    //if the symbols is imagary then we place in the imaginary part. We'll return it\n    //as a product\n    if (isConstant && symbol.multiplier.lessThan(0)) {\n      img = Symbol_1.Symbol.imaginary();\n      symbol.multiplier = symbol.multiplier.abs();\n    }\n    var q = symbol.multiplier.toDecimal(),\n      qa = Math.abs(q),\n      t = Math.sqrt(qa);\n    var m;\n    //it's a perfect square so take the square\n    if ((0, Utils_1.isInt)(t)) {\n      m = new Symbol_1.Symbol(t);\n    } else if ((0, Utils_1.isInt)(q)) {\n      var factors = Math2_1.Math2.ifactor(q);\n      var tw = 1;\n      for (var x in factors) {\n        var n = factors[x],\n          nn = n - n % 2; //get out the whole numbers\n        if (nn) {\n          //if there is a whole number ...\n          var w = Math.pow(x, nn);\n          tw *= Math.pow(x, nn / 2); //add to total wholes\n          q /= w; //reduce the number by the wholes\n        }\n      }\n\n      m = (0, multiply_1.multiply)((0, Symbol_1.symfunction)(Settings_1.Settings.SQRT, [new Symbol_1.Symbol(q)]), new Symbol_1.Symbol(tw));\n    } else {\n      //reduce the numerator and denominator using prime factorization\n      var c = [new Symbol_1.Symbol(symbol.multiplier.num), new Symbol_1.Symbol(symbol.multiplier.den)];\n      var r = [new Symbol_1.Symbol(1), new Symbol_1.Symbol(1)];\n      var sq = [new Symbol_1.Symbol(1), new Symbol_1.Symbol(1)];\n      for (var i = 0; i < 2; i++) {\n        var n = c[i];\n        //get the prime factors and loop through each.\n        (0, pfactor_1.pfactor)(n).each(function (x) {\n          x = Symbol_1.Symbol.unwrapPARENS(x);\n          var b = x.clone().toLinear();\n          var p = Number(x.power);\n          //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\n          var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\n          var w = (p - rem) / 2; //get the whole numbers of n/2\n          r[i] = (0, multiply_1.multiply)(r[i], (0, pow_1.pow)(b, new Symbol_1.Symbol(w)));\n          sq[i] = (0, multiply_1.multiply)(sq[i], sqrt((0, pow_1.pow)(b, new Symbol_1.Symbol(rem))));\n        });\n      }\n      m = (0, divide_1.divide)((0, multiply_1.multiply)(r[0], sq[0]), (0, multiply_1.multiply)(r[1], sq[1]));\n    }\n    //strip the multiplier since we already took the sqrt\n    symbol = symbol.toUnitMultiplier(true);\n    //if the symbol is one just return one and not the sqrt function\n    if (symbol.isOne()) {\n      retval = symbol;\n    } else if ((0, Utils_1.even)(symbol.power.toString())) {\n      //just raise it to the 1/2\n      retval = (0, pow_1.pow)(symbol.clone(), new Symbol_1.Symbol(0.5));\n    } else {\n      retval = (0, Symbol_1.symfunction)(Settings_1.Settings.SQRT, [symbol]);\n    }\n    //put back the sign that was removed earlier\n    if (sign < 0) retval.power.negate();\n    if (m) retval = (0, multiply_1.multiply)(m, retval);\n    if (img) retval = (0, multiply_1.multiply)(img, retval);\n  }\n  if (is_negative && Settings_1.Settings.PARSE2NUMBER) return (0, Parser_1.parse)(retval);\n  return retval;\n}\nexports.sqrt = sqrt;","map":{"version":3,"mappings":"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","names":["sqrt","symbol","group","Groups_1","EX","Settings_1","SQRT","fname","power","equals","args","is_negative","multiplier","sign","PARSE2NUMBER","isConstant","Symbol_1","decimal_js_1","toDecimal","isImaginary","Complex_1","S","img","retval","CB","isLinear","m","s","symbols","x","ms","setPower","multiply","Frac_1","isInteger","a","negate","b","toUnitMultiplier","abs","lessThan","imaginary","q","qa","Math","t","factors","Math2_1","ifactor","tw","n","nn","w","pow","c","num","den","r","sq","i","each","unwrapPARENS","clone","toLinear","p","Number","rem","isOne","toString","exports"],"sourceRoot":"","sources":["../../../../src/Functions/Core/math/sqrt.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
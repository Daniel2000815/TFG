{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport nerdamer from \"nerdamer\";\nimport { isGetAccessor } from \"typescript\";\n\nvar Polynomial = /*#__PURE__*/function () {\n  function Polynomial(p) {\n    _classCallCheck(this, Polynomial);\n\n    this.pol = \"0\";\n    this.lc = \"0\";\n\n    try {\n      this.pol = nerdamer(p).simplify().toString();\n    } catch (e) {\n      console.log(\"ERROR PARSING POLYNOMIAL \".concat(p));\n    }\n\n    console.log(this.pol); // this.traverseTree(nerdamer.tree(this.pol));\n\n    console.log(\"CHECK STRING 2*x + y -z\");\n    console.log(this.traverseTree(nerdamer.tree('2*x + y - z')));\n    console.log(\"CHECK STRING 2*x^2 + x*y -z*y + 2*x*y\");\n    console.log(this.traverseTree(nerdamer.tree('2*x^2 + x*y -z*y + 2*x*y')));\n    console.log(\"CHECK STRING (2+4)*x + (x+y)*z + x*y*z + y*z + z*y\");\n    console.log(this.traverseTree(nerdamer.tree('(2+4)*x + (x+y)*z')));\n  }\n\n  _createClass(Polynomial, [{\n    key: \"nodeToString\",\n    value: function nodeToString(node) {\n      if (node) {\n        var left = this.traverseTree(node.left);\n        var right = this.traverseTree(node.right);\n        console.log(node);\n        console.log(\"LEFT: \" + left);\n        console.log(\"RIGHT: \" + right);\n\n        if (node.type === \"OPERATOR\") {\n          if (right && left) return \"(\".concat(left, \")\").concat(node.value, \"(\").concat(right, \")\");else return \"\".concat(node.value, \"(\").concat(left, \")\");\n        } else return \"\".concat(left).concat(node.value).concat(right);\n      }\n    }\n  }, {\n    key: \"traverseTree\",\n    value: function traverseTree(node) {\n      // console.log(node);\n      if (node !== null && node !== undefined) {\n        if (node.type === 'VARIABLE_OR_LITERAL') {\n          var isVariable = ['x', 'y', 'z'].includes(node.value); // console.log(\"ES LITERAL O VARIABLE: \" + node.value);\n          // console.log(node.value);\n\n          return isVariable ? node.value : parseFloat(node.value).toFixed(4);\n        }\n\n        if (node.type === 'OPERATOR') {\n          var left = this.traverseTree(node.left);\n          var right = this.traverseTree(node.right); // console.log(\"ES OPERATOR: \" + node.value);\n          // console.log(\"OPERATOR LEFT: \" + left);\n          // console.log(\"OPERATOR RIGHT: \" + right);\n          // console.log(`DEVUELVO ${(right && left) ? `${left}${node.value}${right}` : `${node.value}${left}`}`);\n\n          var leftParenthesis = node.left.type !== \"VARIABLE_OR_LITERAL\";\n          var rightParenthesis = node.right.type !== \"VARIABLE_OR_LITERAL\"; // console.log(\"OPERATOR: \" + node.value);\n          // console.log(\"TYPEL: \" + node.left.type);\n          // console.log(\"TYPER: \" + node.right.type);\n          // console.log(`PAR.LEFT: ${leftParenthesis}, RIGHT. PAR: ${rightParenthesis}`);\n\n          var l = leftParenthesis ? \"(\".concat(left, \")\") : \"\".concat(left);\n          var r = rightParenthesis ? \"(\".concat(right, \")\") : \"\".concat(right);\n          if (right && left) return \"\".concat(l).concat(node.value).concat(r);else return \"\".concat(node.value).concat(l);\n        }\n\n        if (node.type === 'FUNCTION') {\n          // console.log(\"ES F: \" + node.value);\n          var _left = this.traverseTree(node.left);\n\n          var _right = this.traverseTree(node.right); // console.log(`DEVUELVO ${left}${node.value}${right}`);\n\n\n          return \"\".concat(_left).concat(node.value).concat(_right);\n        }\n      }\n\n      return '';\n    }\n  }]);\n\n  return Polynomial;\n}();\n\nexport { Polynomial as default };","map":{"version":3,"names":["nerdamer","isGetAccessor","Polynomial","p","pol","lc","simplify","toString","e","console","log","traverseTree","tree","node","left","right","type","value","undefined","isVariable","includes","parseFloat","toFixed","leftParenthesis","rightParenthesis","l","r"],"sources":["C:/Users/daniz/TFG/Aplicacion/src/Polynomial.js"],"sourcesContent":["import nerdamer from \"nerdamer\";\r\nimport { isGetAccessor } from \"typescript\";\r\n\r\nexport default class Polynomial {\r\n    pol = \"0\";\r\n    lc = \"0\";\r\n\r\n    constructor(p){\r\n        try{\r\n            this.pol = nerdamer(p).simplify().toString();\r\n        }catch(e){\r\n            console.log(`ERROR PARSING POLYNOMIAL ${p}`);\r\n        }\r\n\r\n        console.log(this.pol);\r\n        // this.traverseTree(nerdamer.tree(this.pol));\r\n        console.log(\"CHECK STRING 2*x + y -z\")\r\n        console.log(this.traverseTree(nerdamer.tree('2*x + y - z')));\r\n\r\n        console.log(\"CHECK STRING 2*x^2 + x*y -z*y + 2*x*y\")\r\n        console.log(this.traverseTree(nerdamer.tree('2*x^2 + x*y -z*y + 2*x*y')));\r\n\r\n        console.log(\"CHECK STRING (2+4)*x + (x+y)*z + x*y*z + y*z + z*y\")\r\n        console.log(this.traverseTree(nerdamer.tree('(2+4)*x + (x+y)*z')));\r\n    }\r\n\r\n    nodeToString(node){\r\n        if(node){\r\n            let left = this.traverseTree(node.left);\r\n            let right = this.traverseTree(node.right);\r\n            console.log(node);\r\n            console.log(\"LEFT: \" + left);\r\n            console.log(\"RIGHT: \" + right);\r\n\r\n\r\n            if(node.type === \"OPERATOR\"){\r\n                if(right && left)   return `(${left})${node.value}(${right})`;\r\n                else                return `${node.value}(${left})`;\r\n            }    \r\n            else                            \r\n                return `${left}${node.value}${right}`\r\n        }\r\n    }\r\n\r\n    traverseTree(node) {\r\n        // console.log(node);\r\n        if (node!==null && node!==undefined) {\r\n\r\n          if (node.type === 'VARIABLE_OR_LITERAL') {\r\n            const isVariable = ['x', 'y', 'z'].includes(node.value);\r\n            // console.log(\"ES LITERAL O VARIABLE: \" + node.value);\r\n            // console.log(node.value);\r\n            return isVariable ? node.value : parseFloat(node.value).toFixed(4);\r\n          }\r\n\r\n          if (node.type === 'OPERATOR') {\r\n            \r\n            let left = this.traverseTree(node.left);\r\n            let right = this.traverseTree(node.right);\r\n\r\n            // console.log(\"ES OPERATOR: \" + node.value);\r\n            // console.log(\"OPERATOR LEFT: \" + left);\r\n            // console.log(\"OPERATOR RIGHT: \" + right);\r\n            // console.log(`DEVUELVO ${(right && left) ? `${left}${node.value}${right}` : `${node.value}${left}`}`);\r\n\r\n            const leftParenthesis = node.left.type!==\"VARIABLE_OR_LITERAL\";\r\n            const rightParenthesis = node.right.type!==\"VARIABLE_OR_LITERAL\";\r\n\r\n            // console.log(\"OPERATOR: \" + node.value);\r\n            // console.log(\"TYPEL: \" + node.left.type);\r\n            // console.log(\"TYPER: \" + node.right.type);\r\n            // console.log(`PAR.LEFT: ${leftParenthesis}, RIGHT. PAR: ${rightParenthesis}`);\r\n            const l = leftParenthesis ? `(${left})` : `${left}`;\r\n            const r = rightParenthesis ? `(${right})` : `${right}`;\r\n\r\n            if(right && left)   return `${l}${node.value}${r}`;\r\n            else                return `${node.value}${l}`;\r\n          }\r\n\r\n          if (node.type === 'FUNCTION') {\r\n            // console.log(\"ES F: \" + node.value);\r\n            let left = this.traverseTree(node.left);\r\n            let right = this.traverseTree(node.right);\r\n            \r\n            // console.log(`DEVUELVO ${left}${node.value}${right}`);\r\n            return `${left}${node.value}${right}`;\r\n            \r\n          }\r\n        }\r\n\r\n        return '';\r\n      };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
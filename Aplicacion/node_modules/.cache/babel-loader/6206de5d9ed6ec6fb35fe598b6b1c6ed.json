{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.text = void 0;\n\nvar bigInt_1 = __importDefault(require(\"../3rdparty/bigInt\"));\n\nvar Scientific_1 = __importDefault(require(\"../Types/Scientific\"));\n\nvar Settings_1 = require(\"../Settings\");\n\nvar Utils_1 = require(\"./Utils\");\n\nvar Groups_1 = require(\"../Types/Groups\");\n/**\n * This method will return a hash or a text representation of a Symbol, Matrix, or Vector.\n * If all else fails it *assumes* the object has a toString method and will call that.\n *\n * @param {Object} obj\n * @param {string | undefined} option get is as a hash\n * @param {int | undefined} useGroup\n * @param {int | undefined} decp\n * @returns {String}\n */\n\n\nfunction text(obj) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var useGroup = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  var decp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n  var asHash = option === 'hash',\n      //whether to wrap numbers in brackets\n  wrapCondition = undefined,\n      opt = asHash ? undefined : option,\n      asDecimal = opt === 'decimal' || opt === 'decimals';\n  if (asDecimal && typeof decp === 'undefined') decp = 16;\n\n  function toString(obj) {\n    switch (option) {\n      case 'decimals':\n      case 'decimal':\n        wrapCondition = wrapCondition || function (str) {\n          return false;\n        };\n\n        return obj.valueOf();\n\n      case 'recurring':\n        wrapCondition = wrapCondition || function (str) {\n          return str.indexOf(\"'\") !== -1;\n        };\n\n        var str = obj.toString(); //verify that the string is actually a fraction\n\n        var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n        if (frac.length === 0) return str; //split the fraction into the numerator and denominator\n\n        var parts = frac[0].split('/');\n        var negative = false;\n        var m = Number(parts[0]);\n\n        if (m < 0) {\n          m = -m;\n          negative = true;\n        }\n\n        var n = Number(parts[1]);\n        if (!n) n = 1; //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\n\n        var quotient = Math.floor(m / n),\n            c = 10 * (m - quotient * n);\n        quotient = quotient.toString() + \".\";\n\n        while (c && c < n) {\n          c *= 10;\n          quotient += \"0\";\n        }\n\n        var digits = \"\",\n            passed = [],\n            i = 0;\n\n        while (true) {\n          if (typeof passed[c] !== 'undefined') {\n            var prefix = digits.slice(0, passed[c]),\n                cycle = digits.slice(passed[c]),\n                result = quotient + prefix + \"'\" + cycle + \"'\";\n            return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\n          }\n\n          var q = Math.floor(c / n),\n              r = c - q * n;\n          passed[c] = i;\n          digits += q.toString();\n          i += 1;\n          c = 10 * r;\n        }\n\n      case 'mixed':\n        wrapCondition = wrapCondition || function (str) {\n          return str.indexOf('/') !== -1;\n        };\n\n        var str = obj.toString(); //verify that the string is actually a fraction\n\n        var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n        if (frac.length === 0) return str; //split the fraction into the numerator and denominator\n\n        var parts = frac[0].split('/');\n        var numer = new bigInt_1.default(parts[0]);\n        var denom = new bigInt_1.default(parts[1]);\n        if (denom.equals(0)) denom = new bigInt_1.default(1); //return the quotient plus the remainder\n\n        var divmod = numer.divmod(denom);\n        var quotient = divmod.quotient;\n        var remainder = divmod.remainder;\n        var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\n        return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : remainder.toString() + '/' + parts[1]);\n\n      case 'scientific':\n        wrapCondition = wrapCondition || function (str) {\n          return false;\n        };\n\n        return new Scientific_1.default(obj.valueOf()).toString(Settings_1.Settings.SCIENTIFIC_MAX_DECIMAL_PLACES);\n\n      default:\n        wrapCondition = wrapCondition || function (str) {\n          return str.indexOf('/') !== -1;\n        };\n\n        return obj.toString();\n    }\n  } //if the object is a symbol\n\n\n  if ((0, Utils_1.isSymbol)(obj)) {\n    var multiplier = '',\n        power = '',\n        sign = '',\n        group = obj.group || useGroup,\n        value = obj.value; //if the value is to be used as a hash then the power and multiplier need to be suppressed\n\n    if (!asHash) {\n      //use asDecimal to get the object back as a decimal\n      var om = toString(obj.multiplier);\n\n      if (om == '-1' && String(obj.multiplier) === '-1') {\n        sign = '-';\n        om = '1';\n      } //only add the multiplier if it's not 1\n\n\n      if (om != '1') multiplier = om; //use asDecimal to get the object back as a decimal\n\n      var p = obj.power ? toString(obj.power) : ''; //only add the multiplier\n\n      if (p != '1') {\n        //is it a symbol\n        if ((0, Utils_1.isSymbol)(p)) {\n          power = text(p, opt);\n        } else {\n          power = p;\n        }\n      }\n    }\n\n    switch (group) {\n      case Groups_1.Groups.N:\n        multiplier = ''; //round if requested\n\n        var m = decp && asDecimal ? obj.multiplier.toDecimal(decp) : toString(obj.multiplier); //if it's numerical then all we need is the multiplier\n\n        value = String(obj.multiplier) == '-1' ? '1' : m;\n        power = '';\n        break;\n\n      case Groups_1.Groups.PL:\n        value = obj.collectSymbols().map(function (x) {\n          var txt = text(x, opt, useGroup, decp);\n          if (txt == '0') txt = '';\n          return txt;\n        }).sort().join('+').replace(/\\+\\-/g, '-');\n        break;\n\n      case Groups_1.Groups.CP:\n        value = obj.collectSymbols().map(function (x) {\n          var txt = text(x, opt, useGroup, decp);\n          if (txt == '0') txt = '';\n          return txt;\n        }).sort().join('+').replace(/\\+\\-/g, '-');\n        break;\n\n      case Groups_1.Groups.CB:\n        value = obj.collectSymbols(function (symbol) {\n          var g = symbol.group; //both groups will already be in brackets if their power is greater than 1\n          //so skip it.\n\n          if ((g === Groups_1.Groups.PL || g === Groups_1.Groups.CP) && symbol.power.equals(1) && symbol.multiplier.equals(1)) {\n            return (0, Utils_1.inBrackets)(text(symbol, opt));\n          }\n\n          return text(symbol, opt);\n        }).join('*');\n        break;\n\n      case Groups_1.Groups.EX:\n        var pg = obj.previousGroup,\n            pwg = obj.power.group; //Groups.PL are the exception. It's simpler to just collect and set the value\n\n        if (pg === Groups_1.Groups.PL) value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\n\n        if (!(pg === Groups_1.Groups.N || pg === Groups_1.Groups.S || pg === Groups_1.Groups.FN) && !asHash) {\n          value = (0, Utils_1.inBrackets)(value);\n        }\n\n        if ((pwg === Groups_1.Groups.CP || pwg === Groups_1.Groups.CB || pwg === Groups_1.Groups.PL || obj.power.multiplier.toString() != '1') && power) {\n          power = (0, Utils_1.inBrackets)(power);\n        }\n\n        break;\n    }\n\n    if (group === Groups_1.Groups.FN) {\n      value = obj.fname + (0, Utils_1.inBrackets)(obj.args.map(function (symbol) {\n        return text(symbol, opt);\n      }).join(','));\n    }\n    /*\n     FIXME: Currently there is no way to set CUSTOM_OPERATORS outside of core, is this code still needed?\n     //TODO: Needs to be more efficient. Maybe.\n    if (group === Groups.FN && obj.fname in CUSTOM_OPERATORS) {\n        var a = text(obj.args[0]);\n        var b = text(obj.args[1]);\n        if (obj.args[0].isComposite()) //preserve the brackets\n            a = inBrackets(a);\n        if (obj.args[1].isComposite()) //preserve the brackets\n            b = inBrackets(b);\n        value = a + deps.CUSTOM_OPERATORS[obj.fname] + b;\n    }\n     */\n    //wrap the power since / is less than ^\n    //TODO: introduce method call isSimple\n\n\n    if (power && group !== Groups_1.Groups.EX && wrapCondition(power)) {\n      power = (0, Utils_1.inBrackets)(power);\n    } //the following groups are held together by plus or minus. They can be raised to a power or multiplied\n    //by a multiplier and have to be in brackets to preserve the order of precedence\n\n\n    if ((group === Groups_1.Groups.CP || group === Groups_1.Groups.PL) && (multiplier && multiplier != '1' || sign === '-') || (group === Groups_1.Groups.CB || group === Groups_1.Groups.CP || group === Groups_1.Groups.PL) && power && power != '1' || !asHash && group === Groups_1.Groups.P && value == -1 || obj.fname === Settings_1.Settings.PARENTHESIS) {\n      value = (0, Utils_1.inBrackets)(value);\n    }\n\n    if (decp && (option === 'decimal' || option === 'decimals' && multiplier)) {\n      multiplier = (0, Utils_1.nround)(multiplier, decp);\n    } //add the sign back\n\n\n    var c = sign + multiplier;\n    if (multiplier && wrapCondition(multiplier)) c = (0, Utils_1.inBrackets)(c);\n    if (power < 0) power = (0, Utils_1.inBrackets)(power); //add the multiplication back\n\n    if (multiplier) c = c + '*';\n\n    if (power) {\n      if (value === 'e' && Settings_1.Settings.E_TO_EXP) {\n        return c + 'exp' + (0, Utils_1.inBrackets)(power);\n      }\n\n      power = Settings_1.Settings.POWER_OPERATOR + power;\n    } //this needs serious rethinking. Must fix\n\n\n    if (group === Groups_1.Groups.EX && value.charAt(0) === '-') {\n      value = (0, Utils_1.inBrackets)(value);\n    }\n\n    var cv = c + value;\n\n    if (obj.parens) {\n      cv = (0, Utils_1.inBrackets)(cv);\n    }\n\n    return cv + power;\n  } else if ((0, Utils_1.isVector)(obj)) {\n    var l = obj.elements.length,\n        c = [];\n\n    for (var i = 0; i < l; i++) {\n      c.push(obj.elements[i].text(option));\n    }\n\n    return '[' + c.join(',') + ']';\n  } else {\n    try {\n      return obj.toString();\n    } catch (e) {\n      return '';\n    }\n  }\n}\n\nexports.text = text;","map":{"version":3,"mappings":"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","names":["text","obj","option","undefined","useGroup","decp","asHash","wrapCondition","opt","asDecimal","toString","str","valueOf","indexOf","frac","exec","length","parts","split","negative","m","Number","n","quotient","Math","floor","c","digits","passed","i","prefix","slice","cycle","result","replace","q","r","numer","bigInt_1","denom","equals","divmod","remainder","operator","Scientific_1","Settings_1","SCIENTIFIC_MAX_DECIMAL_PLACES","multiplier","power","sign","group","value","om","String","p","Groups_1","N","toDecimal","PL","collectSymbols","map","x","txt","sort","join","CP","CB","symbol","g","EX","pg","previousGroup","pwg","S","FN","fname","args","P","PARENTHESIS","E_TO_EXP","POWER_OPERATOR","charAt","cv","parens","l","elements","push","e","exports"],"sourceRoot":"","sources":["../../src/Core/Text.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { orNumber } from '../../plain/number/index.js';\nvar name = 'or';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createOr = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      DenseMatrix = _ref.DenseMatrix;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed: typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed: typed,\n    matrix: matrix\n  });\n  /**\r\n   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.or(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.or(2, 4)   // returns true\r\n   *\r\n   *    a = [2, 5, 0]\r\n   *    b = [0, 22, 0]\r\n   *    c = 0\r\n   *\r\n   *    math.or(a, b)   // returns [true, true, false]\r\n   *    math.or(b, c)   // returns [false, true, false]\r\n   *\r\n   * See also:\r\n   *\r\n   *    and, not, xor\r\n   *\r\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\r\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\r\n   * @return {boolean | Array | Matrix}\r\n   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\r\n   */\n\n  return typed(name, {\n    'number, number': orNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();\n    },\n    'Unit, Unit': typed.referToSelf(function (self) {\n      return function (x, y) {\n        return self(x.value || 0, y.value || 0);\n      };\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});","map":{"version":3,"names":["createMatAlgo03xDSf","createMatAlgo12xSfs","createMatAlgo05xSfSf","factory","createMatrixAlgorithmSuite","orNumber","name","dependencies","createOr","_ref","typed","matrix","equalScalar","DenseMatrix","matAlgo03xDSf","matAlgo05xSfSf","matAlgo12xSfs","matrixAlgorithmSuite","ComplexComplex","x","y","re","im","BigNumberBigNumber","isZero","isNaN","referToSelf","self","value","SS","DS","Ss"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/mathjs/lib/esm/function/logical/or.js"],"sourcesContent":["import { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nimport { orNumber } from '../../plain/number/index.js';\r\nvar name = 'or';\r\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\r\nexport var createOr = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    equalScalar,\r\n    DenseMatrix\r\n  } = _ref;\r\n  var matAlgo03xDSf = createMatAlgo03xDSf({\r\n    typed\r\n  });\r\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix\r\n  });\r\n  /**\r\n   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.or(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.or(2, 4)   // returns true\r\n   *\r\n   *    a = [2, 5, 0]\r\n   *    b = [0, 22, 0]\r\n   *    c = 0\r\n   *\r\n   *    math.or(a, b)   // returns [true, true, false]\r\n   *    math.or(b, c)   // returns [false, true, false]\r\n   *\r\n   * See also:\r\n   *\r\n   *    and, not, xor\r\n   *\r\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\r\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\r\n   * @return {boolean | Array | Matrix}\r\n   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\r\n   */\r\n\r\n  return typed(name, {\r\n    'number, number': orNumber,\r\n    'Complex, Complex': function ComplexComplex(x, y) {\r\n      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;\r\n    },\r\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\r\n      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();\r\n    },\r\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0))\r\n  }, matrixAlgorithmSuite({\r\n    SS: matAlgo05xSfSf,\r\n    DS: matAlgo03xDSf,\r\n    Ss: matAlgo12xSfs\r\n  }));\r\n});"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,oBAAT,QAAqC,2CAArC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,0BAAT,QAA2C,iDAA3C;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,IAAIC,IAAI,GAAG,IAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,aAApB,EAAmC,aAAnC,CAAnB;AACA,OAAO,IAAIC,QAAQ,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACvE,IACEC,KADF,GAKID,IALJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAKIF,IALJ,CAEEE,MAFF;EAAA,IAGEC,WAHF,GAKIH,IALJ,CAGEG,WAHF;EAAA,IAIEC,WAJF,GAKIJ,IALJ,CAIEI,WAJF;EAMA,IAAIC,aAAa,GAAGd,mBAAmB,CAAC;IACtCU,KAAK,EAALA;EADsC,CAAD,CAAvC;EAGA,IAAIK,cAAc,GAAGb,oBAAoB,CAAC;IACxCQ,KAAK,EAALA,KADwC;IAExCE,WAAW,EAAXA;EAFwC,CAAD,CAAzC;EAIA,IAAII,aAAa,GAAGf,mBAAmB,CAAC;IACtCS,KAAK,EAALA,KADsC;IAEtCG,WAAW,EAAXA;EAFsC,CAAD,CAAvC;EAIA,IAAII,oBAAoB,GAAGb,0BAA0B,CAAC;IACpDM,KAAK,EAALA,KADoD;IAEpDC,MAAM,EAANA;EAFoD,CAAD,CAArD;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOD,KAAK,CAACJ,IAAD,EAAO;IACjB,kBAAkBD,QADD;IAEjB,oBAAoB,SAASa,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;MAChD,OAAOD,CAAC,CAACE,EAAF,KAAS,CAAT,IAAcF,CAAC,CAACG,EAAF,KAAS,CAAvB,IAA4BF,CAAC,CAACC,EAAF,KAAS,CAArC,IAA0CD,CAAC,CAACE,EAAF,KAAS,CAA1D;IACD,CAJgB;IAKjB,wBAAwB,SAASC,kBAAT,CAA4BJ,CAA5B,EAA+BC,CAA/B,EAAkC;MACxD,OAAO,CAACD,CAAC,CAACK,MAAF,EAAD,IAAe,CAACL,CAAC,CAACM,KAAF,EAAhB,IAA6B,CAACL,CAAC,CAACI,MAAF,EAAD,IAAe,CAACJ,CAAC,CAACK,KAAF,EAApD;IACD,CAPgB;IAQjB,cAAcf,KAAK,CAACgB,WAAN,CAAkB,UAAAC,IAAI;MAAA,OAAI,UAACR,CAAD,EAAIC,CAAJ;QAAA,OAAUO,IAAI,CAACR,CAAC,CAACS,KAAF,IAAW,CAAZ,EAAeR,CAAC,CAACQ,KAAF,IAAW,CAA1B,CAAd;MAAA,CAAJ;IAAA,CAAtB;EARG,CAAP,EASTX,oBAAoB,CAAC;IACtBY,EAAE,EAAEd,cADkB;IAEtBe,EAAE,EAAEhB,aAFkB;IAGtBiB,EAAE,EAAEf;EAHkB,CAAD,CATX,CAAZ;AAcD,CAjE2C,CAArC"},"metadata":{},"sourceType":"module"}
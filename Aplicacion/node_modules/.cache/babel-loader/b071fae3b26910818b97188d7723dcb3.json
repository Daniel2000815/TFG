{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport nerdamer from 'nerdamer-ts';\nvar Polynomial = /*#__PURE__*/function () {\n  function Polynomial(p) {\n    _classCallCheck(this, Polynomial);\n    this.coefMap = new Map();\n    this.varOrder = [];\n    var pol = \"\";\n    try {\n      pol = nerdamer(p).expand().toString();\n    } catch (e) {\n      console.log(\"ERROR PARSING POLYNOMIAL \".concat(p));\n    }\n    this.computeCoefficients(nerdamer.tree(pol), true);\n  }\n\n  // === PUBLIC INSTANCE METHODS ===\n  /** Multiply this polynomial by q */\n  _createClass(Polynomial, [{\n    key: \"multiply\",\n    value: function multiply(q) {\n      var product = '';\n      for (var keyP in this.coefMap) {\n        for (var keyQ in q.coefMap) {\n          product += \"\".concat(product.length > 0 ? '+' : '', \" (\").concat(this.coefMap.get(keyP), \"*\").concat(keyP, \") * (\").concat(q.coefMap.get(keyQ), \"*\").concat(keyQ, \")\");\n        }\n      }\n      product = nerdamer(product).expand().toString();\n      this.computeCoefficients(nerdamer.tree(product), true);\n    }\n\n    /** Add q to this polynomial */\n  }, {\n    key: \"plus\",\n    value: function plus(q) {\n      var sum = '';\n      console.log(this.coefMap, q.coefMap);\n      for (var keyP in this.coefMap) {\n        sum += \"\".concat(sum.length > 0 ? '+' : '', \" (\").concat(this.coefMap.get(keyP), \"*\").concat(keyP, \")\");\n      }\n      var keyQ;\n      for (var _keyQ in q.coefMap) {\n        sum += \"+ (\".concat(q.coefMap.get(_keyQ), \"*\").concat(_keyQ, \")\");\n      }\n      sum = nerdamer(sum).expand().toString();\n      this.computeCoefficients(nerdamer.tree(sum), true);\n    }\n\n    /** Leader coefficient */\n  }, {\n    key: \"lc\",\n    value: function lc() {\n      return this.coefMap.get(this.varOrder[0]);\n    }\n\n    /** Leader monomial */\n  }, {\n    key: \"lm\",\n    value: function lm() {\n      return this.varOrder[0];\n    }\n\n    /** Leader term */\n  }, {\n    key: \"lt\",\n    value: function lt() {\n      var coefNull = this.lc() !== '1';\n      return \"\".concat(coefNull ? this.lc() : '').concat(coefNull ? '*' : '').concat(this.lm());\n    }\n  }, {\n    key: \"exp\",\n    value: function exp() {\n      return Polynomial.exp(this.varOrder[0]);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var res = '';\n      for (var i = 0; i < this.varOrder.length; i++) {\n        var mon = this.varOrder[i];\n        var coef = this.coefMap.get(mon);\n        console.log(i < this.varOrder.length - 1);\n        console.log(\"kk\", typeof i);\n        var nextMon = i < this.varOrder.length - 1 ? this.varOrder[i + 1] : null;\n        console.log(\"mon \", nextMon);\n        var nextCoef = nextMon ? this.coefMap.get(nextMon) : '';\n        var coefNeg = coef === '-1';\n        var needParentheses = coef !== '1' && !coefNeg;\n        console.log(\"next\", nextCoef[0] !== '-');\n        var sign = \"\".concat(coef === '-1' ? '-' : \"\".concat(coef[0] === '-' ? nextCoef : \"\".concat(i > 0 ? '+' : '')));\n        res += \"\".concat(sign, \" \").concat(needParentheses ? '(' : '').concat(mon).concat(needParentheses ? ')' : '', \" \");\n      }\n      return res;\n    }\n\n    // === PUBLIC STATIC METHODS ===\n\n    /** Exponent */\n  }, {\n    key: \"strContainsChar\",\n    value:\n    // === PRIVATE INSTANCE METHODS ===\n    function strContainsChar(str, chars) {\n      // console.log('COMPROBANDO ' + str);\n      for (var i = 0; i < str.length; i++) {\n        if (chars.includes(str[i])) return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"computeCoefficients\",\n    value: function computeCoefficients(node) {\n      var firstIt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (firstIt) this.coefMap.clear();\n      var pol = this.nodeToString(node);\n      var vars = ['x', 'y', 'z'];\n      console.log(\"pol \", pol);\n      if (node === null || node === undefined) return;\n      if (!node.left && !node.right) {\n        console.log(node.value);\n        if (['x', 'y', 'z'].includes(node.value)) this.coefMap.set(node.value, '1');else {\n          console.log(\"AQUI: \", pol);\n          this.coefMap.set('1', pol);\n        }\n        return;\n      }\n\n      // console.log(pol);\n      if (!this.strContainsChar(pol, vars)) {\n        console.log('AÃ‘ADO ' + pol);\n        this.coefMap.set('1', pol);\n        return;\n      }\n\n      // console.log(pol);\n      var pattern = /[+]/;\n      if (!pattern.test(pol) && pol !== '') {\n        // const coef = this.nodeToString(node.left);\n        // const variable = this.nodeToString(node.right);\n\n        var coef = '';\n        var variable = '';\n        var writingCoef = true;\n        console.log(pol);\n        for (var i = 0; i < pol.length; i++) {\n          if (['x', 'y', 'z'].includes(pol[i])) {\n            writingCoef = false;\n            if (coef.length === 0) coef = '1';\n\n            // console.log('HOLA:' + coef[coef.length - 1]);\n            if (coef[coef.length - 1] === '*') coef = coef.slice(0, -1);\n          }\n          if (!['(', ')'].includes(pol[i])) {\n            if (writingCoef) coef += pol[i];else variable += pol[i];\n          }\n        }\n        this.coefMap.set(variable, coef === '-' ? '-1' : coef);\n\n        // console.log(`COEF: ${coef}, VAR: ${variable}`);\n      } else {\n        this.computeCoefficients(node.left);\n        this.computeCoefficients(node.right);\n      }\n      if (node !== null && node !== undefined) {\n        if (node.type === 'OPERATOR' && node.value === '*') {\n          // console.log('PRODUC');\n          // console.log(node.left);\n          // console.log(node.right);\n        }\n      }\n      var monomials = Object.keys(this.coefMap);\n      monomials.sort(function (a, b) {\n        return Polynomial.expGreater(Polynomial.exp(a), Polynomial.exp(b)) ? -1 : 1;\n      });\n      this.varOrder = monomials;\n    }\n  }, {\n    key: \"nodeToString\",\n    value: function nodeToString(node) {\n      console.log(node);\n      if (node !== null && node !== undefined) {\n        if (node.type === 'VARIABLE_OR_LITERAL') {\n          var isVariable = ['x', 'y', 'z'].includes(node.value);\n          // console.log(\"ES LITERAL O VARIABLE: \" + node.value);\n          // console.log(node.value);\n          return isVariable ? node.value : parseFloat(node.value);\n        }\n        if (node.type === 'OPERATOR') {\n          var _node$left, _node$right, _node$left2, _node$right2;\n          var left = this.nodeToString(node.left);\n          var right = this.nodeToString(node.right);\n\n          // console.log(\"ES OPERATOR: \" + node.value);\n          // console.log(\"OPERATOR LEFT: \" + left);\n          // console.log(\"OPERATOR RIGHT: \" + right);\n          // console.log(`DEVUELVO ${(right && left) ? `${left}${node.value}${right}` : `${node.value}${left}`}`);\n\n          var leftParenthesis = ((_node$left = node.left) === null || _node$left === void 0 ? void 0 : _node$left.type) !== 'VARIABLE_OR_LITERAL';\n          var rightParenthesis = ((_node$right = node.right) === null || _node$right === void 0 ? void 0 : _node$right.type) !== 'VARIABLE_OR_LITERAL';\n          console.log(\"OPERATOR: \" + node.value);\n          console.log(node.value === '-');\n          console.log(\"TYPEL: \" + ((_node$left2 = node.left) === null || _node$left2 === void 0 ? void 0 : _node$left2.type));\n          console.log(\"TYPER: \" + ((_node$right2 = node.right) === null || _node$right2 === void 0 ? void 0 : _node$right2.type));\n          // console.log(`PAR.LEFT: ${leftParenthesis}, RIGHT. PAR: ${rightParenthesis}`);\n          var l = leftParenthesis ? \"(\".concat(left, \")\") : \"\".concat(left);\n          var r = rightParenthesis ? \"(\".concat(right, \")\") : \"\".concat(right);\n          // console.log('RIGHT ' + r);\n          if (node.value === '-') {\n            console.log(\"asi es:\", left, right);\n          }\n          if (right && left) return \"\".concat(l).concat(node.value).concat(r);else {\n            console.log(\"ASI ES\", \"\".concat(node.value).concat(l));\n            return \"\".concat(node.value).concat(l);\n          }\n        }\n        if (node.type === 'FUNCTION') {\n          // console.log(\"ES F: \" + node.value);\n          var _left = this.nodeToString(node.left);\n          var _right = this.nodeToString(node.right);\n\n          // console.log(`DEVUELVO ${left}${node.value}${right}`);\n          return \"\".concat(_left).concat(node.value).concat(_right);\n        }\n      }\n      return '';\n    }\n  }], [{\n    key: \"exp\",\n    value: function exp(p) {\n      var split = p.split(/[-+]+/); // separa por + o -\n      var res = [0, 0, 0];\n      split.forEach(function (element) {\n        if (element === '') return;\n        var degs = [Number(nerdamer(\"deg(\".concat(element, \", x)\")).toString()), Number(nerdamer(\"deg(\".concat(element, \", y)\")).toString()), Number(nerdamer(\"deg(\".concat(element, \", z)\")).toString())];\n        if (Polynomial.expGreater(degs, res)) res = degs;\n      });\n      return res;\n    }\n\n    // === PRIVATE STATIC METHODS (not private yet) ===\n  }, {\n    key: \"expGreater\",\n    value: function expGreater(a, b) {\n      return a[0] > b[0] || a[0] == b[0] && a[1] > b[1] || a[0] == b[0] && a[1] == b[1] && a[2] > a[2];\n    }\n  }]);\n  return Polynomial;\n}();\nexport { Polynomial as default };","map":{"version":3,"names":["nerdamer","Polynomial","p","coefMap","Map","varOrder","pol","expand","toString","e","console","log","computeCoefficients","tree","q","product","keyP","keyQ","length","get","sum","coefNull","lc","lm","exp","res","i","mon","coef","nextMon","nextCoef","coefNeg","needParentheses","sign","str","chars","includes","node","firstIt","clear","nodeToString","vars","undefined","left","right","value","set","strContainsChar","pattern","test","variable","writingCoef","slice","type","monomials","Object","keys","sort","a","b","expGreater","isVariable","parseFloat","leftParenthesis","rightParenthesis","l","r","split","forEach","element","degs","Number"],"sources":["C:/Users/daniz/TFG/Aplicacion/src/Polynomial.ts"],"sourcesContent":["import nerdamer from 'nerdamer-ts';\r\n\r\n\r\nexport default class Polynomial {\r\n  private coefMap : Map<string, string> = new Map();\r\n  private varOrder: string[] = [];\r\n\r\n  constructor(p: string) {\r\n    var pol = \"\";\r\n    try {\r\n      pol = nerdamer(p).expand().toString();\r\n    } catch (e) {\r\n      console.log(`ERROR PARSING POLYNOMIAL ${p}`);\r\n    }\r\n\r\n    this.computeCoefficients(nerdamer.tree(pol), true);\r\n  }\r\n\r\n  // === PUBLIC INSTANCE METHODS ===\r\n  /** Multiply this polynomial by q */\r\n  multiply(q: Polynomial) {\r\n    let product = '';\r\n    \r\n    for (let keyP in this.coefMap) {\r\n      for (let keyQ in q.coefMap) {\r\n        product += `${product.length > 0 ? '+' : ''} (${\r\n          this.coefMap.get(keyP)\r\n        }*${keyP}) * (${q.coefMap.get(keyQ)}*${keyQ})`;\r\n      }\r\n    }\r\n\r\n    product = nerdamer(product).expand().toString();\r\n    this.computeCoefficients(nerdamer.tree(product), true);\r\n  }\r\n\r\n  /** Add q to this polynomial */\r\n  plus(q: Polynomial){\r\n    let sum = '';\r\n    console.log(this.coefMap, q.coefMap);\r\n\r\n    for (let keyP in this.coefMap)\r\n      sum += `${sum.length > 0 ? '+' : ''} (${this.coefMap.get(keyP)}*${keyP})`;\r\n\r\n    let keyQ: keyof typeof q.coefMap;\r\n    for (let keyQ in q.coefMap)   \r\n      sum += `+ (${q.coefMap.get(keyQ)}*${keyQ})`;\r\n    \r\n    sum = nerdamer(sum).expand().toString();\r\n    this.computeCoefficients(nerdamer.tree(sum), true);\r\n  }\r\n\r\n  /** Leader coefficient */\r\n  lc(){\r\n    return this.coefMap.get(this.varOrder[0]);\r\n  }\r\n\r\n  /** Leader monomial */\r\n  lm(){\r\n    return this.varOrder[0];\r\n  }\r\n\r\n  /** Leader term */\r\n  lt(){\r\n    const coefNull = this.lc() !== '1';\r\n    return `${coefNull ? this.lc() : ''}${coefNull ? '*' : ''}${this.lm()}`;\r\n  }\r\n\r\n  exp(){\r\n    return Polynomial.exp(this.varOrder[0]);\r\n  }\r\n\r\n  toString() {\r\n    let res = '';\r\n\r\n    for (var i = 0; i < this.varOrder.length; i++) {\r\n      const mon = this.varOrder[i];\r\n      const coef = this.coefMap.get(mon);\r\n      \r\n      console.log(i < this.varOrder.length - 1);\r\n      console.log(\"kk\",  typeof(i));\r\n      const nextMon =\r\n        i < this.varOrder.length - 1 ? this.varOrder[i + 1] : null;\r\n        console.log(\"mon \", nextMon);\r\n      const nextCoef = nextMon ? this.coefMap.get(nextMon) : '';\r\n\r\n      const coefNeg = coef === '-1';\r\n      const needParentheses = coef !== '1' && !coefNeg;\r\n\r\n      console.log(\"next\", nextCoef![0] !=='-');\r\n\r\n      const sign = `${coef==='-1' ? '-' : `${coef![0]==='-' ? nextCoef : `${i>0 ? '+' : ''}`}`}`;\r\n      res += \r\n      `${sign} ${needParentheses ? '(' : ''}${mon}${needParentheses ? ')' : ''} `;\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  // === PUBLIC STATIC METHODS ===\r\n\r\n  /** Exponent */\r\n  static exp(p: string) {\r\n    const split = p.split(/[-+]+/); // separa por + o -\r\n    let res = [0, 0, 0];\r\n\r\n    split.forEach((element) => {\r\n      if (element === '') return;\r\n\r\n      let degs = [\r\n        Number(nerdamer(`deg(${element}, x)`).toString()),\r\n        Number(nerdamer(`deg(${element}, y)`).toString()),\r\n        Number(nerdamer(`deg(${element}, z)`).toString()),\r\n      ];\r\n\r\n      if (Polynomial.expGreater(degs, res)) res = degs;\r\n    });\r\n\r\n    return res;\r\n  }\r\n\r\n  // === PRIVATE STATIC METHODS (not private yet) ===\r\n  static expGreater(a: number[], b: number[]) {\r\n    return (\r\n      a[0] > b[0] ||\r\n      (a[0] == b[0] && a[1] > b[1]) ||\r\n      (a[0] == b[0] && a[1] == b[1] && a[2] > a[2])\r\n    );\r\n  }\r\n\r\n  // === PRIVATE INSTANCE METHODS ===\r\n  strContainsChar(str: string, chars: string[]) {\r\n    // console.log('COMPROBANDO ' + str);\r\n    for (let i = 0; i < str.length; i++) {\r\n      if (chars.includes(str[i])) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n\r\n  computeCoefficients(node: any, firstIt = false) {\r\n\r\n    if(firstIt)\r\n      this.coefMap.clear();\r\n\r\n    const pol = this.nodeToString(node);\r\n    const vars = ['x', 'y', 'z'];\r\n    console.log(\"pol \", pol);\r\n    if (node === null || node === undefined) return;\r\n\r\n    if (!node.left && !node.right) {\r\n      console.log(node.value);\r\n      if (['x', 'y', 'z'].includes(node.value)) \r\n        this.coefMap.set(node.value, '1');\r\n      else{\r\n        console.log(\"AQUI: \", pol);\r\n        this.coefMap.set('1', pol);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // console.log(pol);\r\n    if (!this.strContainsChar(pol, vars)) {\r\n      console.log('AÃ‘ADO ' + pol);\r\n      this.coefMap.set('1', pol);\r\n      return;\r\n    }\r\n\r\n    // console.log(pol);\r\n    var pattern = /[+]/;\r\n\r\n    if (!pattern.test(pol) && pol !== '') {\r\n      // const coef = this.nodeToString(node.left);\r\n      // const variable = this.nodeToString(node.right);\r\n\r\n      let coef = '';\r\n      let variable = '';\r\n      let writingCoef = true;\r\n      console.log(pol);\r\n      for (let i = 0; i < pol.length; i++) {\r\n        if (['x', 'y', 'z'].includes(pol[i])) {\r\n          writingCoef = false;\r\n\r\n          if (coef.length === 0) coef = '1';\r\n\r\n          // console.log('HOLA:' + coef[coef.length - 1]);\r\n          if (coef[coef.length - 1] === '*') coef = coef.slice(0, -1);\r\n        }\r\n\r\n        if (!['(', ')'].includes(pol[i])) {\r\n          if (writingCoef) coef += pol[i];\r\n          else variable += pol[i];\r\n        }\r\n      }\r\n\r\n      this.coefMap.set(variable, coef==='-' ? '-1' : coef);\r\n\r\n      // console.log(`COEF: ${coef}, VAR: ${variable}`);\r\n    } else {\r\n      this.computeCoefficients(node.left);\r\n      this.computeCoefficients(node.right);\r\n    }\r\n\r\n    if (node !== null && node !== undefined) {\r\n      if (node.type === 'OPERATOR' && node.value === '*') {\r\n        // console.log('PRODUC');\r\n        // console.log(node.left);\r\n        // console.log(node.right);\r\n      }\r\n    }\r\n\r\n    let monomials = Object.keys(this.coefMap);\r\n    monomials.sort(function (a, b) {\r\n      return Polynomial.expGreater(Polynomial.exp(a), Polynomial.exp(b)) ? -1 : 1;\r\n    });\r\n\r\n    this.varOrder = monomials;\r\n  }\r\n\r\n  nodeToString(node: any): string {\r\n    console.log(node);\r\n    if (node !== null && node !== undefined) {\r\n      if (node.type === 'VARIABLE_OR_LITERAL') {\r\n        const isVariable = ['x', 'y', 'z'].includes(node.value);\r\n        // console.log(\"ES LITERAL O VARIABLE: \" + node.value);\r\n        // console.log(node.value);\r\n        return isVariable ? node.value : parseFloat(node.value);\r\n      }\r\n\r\n      if (node.type === 'OPERATOR') {\r\n        let left = this.nodeToString(node.left);\r\n        let right = this.nodeToString(node.right);\r\n\r\n        // console.log(\"ES OPERATOR: \" + node.value);\r\n        // console.log(\"OPERATOR LEFT: \" + left);\r\n        // console.log(\"OPERATOR RIGHT: \" + right);\r\n        // console.log(`DEVUELVO ${(right && left) ? `${left}${node.value}${right}` : `${node.value}${left}`}`);\r\n\r\n        const leftParenthesis = node.left?.type !== 'VARIABLE_OR_LITERAL';\r\n        const rightParenthesis = node.right?.type !== 'VARIABLE_OR_LITERAL';\r\n\r\n        console.log(\"OPERATOR: \" + node.value);\r\n        console.log(node.value === '-');\r\n        console.log(\"TYPEL: \" + node.left?.type);\r\n        console.log(\"TYPER: \" + node.right?.type);\r\n        // console.log(`PAR.LEFT: ${leftParenthesis}, RIGHT. PAR: ${rightParenthesis}`);\r\n        const l = leftParenthesis ? `(${left})` : `${left}`;\r\n        const r = rightParenthesis ? `(${right})` : `${right}`;\r\n        // console.log('RIGHT ' + r);\r\n        if(node.value === '-'){\r\n          console.log(\"asi es:\", left, right);\r\n        }\r\n        if (right && left) return `${l}${node.value}${r}`;\r\n        else{ console.log(\"ASI ES\", `${node.value}${l}`);\r\n        return `${node.value}${l}`;}\r\n      }\r\n\r\n      if (node.type === 'FUNCTION') {\r\n        // console.log(\"ES F: \" + node.value);\r\n        let left = this.nodeToString(node.left);\r\n        let right = this.nodeToString(node.right);\r\n\r\n        // console.log(`DEVUELVO ${left}${node.value}${right}`);\r\n        return `${left}${node.value}${right}`;\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
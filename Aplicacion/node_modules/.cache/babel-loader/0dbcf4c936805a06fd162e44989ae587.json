{"ast":null,"code":"import React, { createRef, Component } from 'react';\nimport $ from 'jquery';\nimport 'mathquill/build/mathquill.css';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n} // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\n\n\nwindow.jQuery = $; // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\n\nrequire(\"mathquill/build/mathquill\"); // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\n// eslint-disable-next-line no-undef\n\n\nvar mathQuill = MathQuill.getInterface(2);\n/**\r\n * @typedef {EquationEditorProps} props\r\n * @prop {Function} onChange Triggered when content of the equation editor changes\r\n * @prop {string} value Content of the equation handler\r\n * @prop {boolean}[false] spaceBehavesLikeTab Whether spacebar should simulate tab behavior\r\n * @prop {string} autoCommands List of commands for which you only have to type the name of the\r\n * command with a \\ in front of it. Examples: pi theta rho sum\r\n * @prop {string} autoOperatorNames List of operators for which you only have to type the name of the\r\n * operator with a \\ in front of it. Examples: sin cos tan\r\n * @prop {Function} onEnter Triggered when enter is pressed in the equation editor\r\n * @extends {Component<EquationEditorProps>}\r\n */\n\nvar EquationEditor =\n/** @class */\nfunction (_super) {\n  __extends(EquationEditor, _super); // Element needs to be in the class format and thus requires a constructor. The steps that are run\n  // in the constructor is to make sure that React can succesfully communicate with the equation\n  // editor.\n\n\n  function EquationEditor(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.element = createRef();\n    _this.mathField = null; // MathJax apparently fire 2 edit events on startup.\n\n    _this.ignoreEditEvents = 2;\n    return _this;\n  }\n\n  EquationEditor.prototype.componentDidMount = function () {\n    var _this = this;\n\n    var _a = this.props,\n        onChange = _a.onChange,\n        value = _a.value,\n        spaceBehavesLikeTab = _a.spaceBehavesLikeTab,\n        autoCommands = _a.autoCommands,\n        autoOperatorNames = _a.autoOperatorNames,\n        onEnter = _a.onEnter;\n    var config = {\n      handlers: {\n        edit: function edit() {\n          if (_this.ignoreEditEvents > 0) {\n            _this.ignoreEditEvents -= 1;\n            return;\n          }\n\n          if (_this.mathField.latex() !== value) {\n            onChange(_this.mathField.latex());\n          }\n        },\n        enter: onEnter\n      },\n      spaceBehavesLikeTab: spaceBehavesLikeTab,\n      autoCommands: autoCommands,\n      autoOperatorNames: autoOperatorNames\n    };\n    this.mathField = mathQuill.MathField(this.element.current, config);\n    this.mathField.latex(value || \"\");\n  };\n\n  EquationEditor.prototype.render = function () {\n    return React.createElement(\"span\", {\n      ref: this.element,\n      style: {\n        border: \"0px\",\n        boxShadow: \"None\"\n      }\n    });\n  };\n\n  return EquationEditor;\n}(Component);\n\nexport default EquationEditor;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAQA;AACA;;;AACAA,MAAM,CAACC,MAAP,GAAgBC,CAAhB,C,CAEA;AACA;;AACAC,OAAO,CAAC,2BAAD,CAAP,C,CAEA;AACA;AACA;;;AACA,IAAMC,SAAS,GAAGC,SAAS,CAACC,YAAV,CAAuB,CAAvB,CAAlB;AAWA;;;;;;;;;;;;;;;;EAY6BC;;;;;EAQ3B,wBAAYC,KAAZ,EAAsC;IAAtC,YACEC,kBAAMD,KAAN,KAAY,IADd;;IAGEE,KAAI,CAACC,OAAL,GAAeC,SAAS,EAAxB;IACAF,KAAI,CAACG,SAAL,GAAiB,IAAjB,CAJoC;;IAOpCH,KAAI,CAACI,gBAAL,GAAwB,CAAxB;;EACD;;EAEDC;IAAA;;IACQ,SAOF,KAAKP,KAPH;IAAA,IACJQ,QAAQ,cADJ;IAAA,IAEJC,KAAK,WAFD;IAAA,IAGJC,mBAAmB,yBAHf;IAAA,IAIJC,YAAY,kBAJR;IAAA,IAKJC,iBAAiB,uBALb;IAAA,IAMJC,OAAO,aANH;IASN,IAAMC,MAAM,GAAG;MACbC,QAAQ,EAAE;QACRC,IAAI,EAAE;UACJ,IAAId,KAAI,CAACI,gBAAL,GAAwB,CAA5B,EAA+B;YAC7BJ,KAAI,CAACI,gBAAL,IAAyB,CAAzB;YACA;UACD;;UACD,IAAIJ,KAAI,CAACG,SAAL,CAAeY,KAAf,OAA2BR,KAA/B,EAAsC;YACpCD,QAAQ,CAACN,KAAI,CAACG,SAAL,CAAeY,KAAf,EAAD,CAAR;UACD;QACF,CATO;QAURC,KAAK,EAAEL;MAVC,CADG;MAabH,mBAAmB,qBAbN;MAcbC,YAAY,cAdC;MAebC,iBAAiB;IAfJ,CAAf;IAkBA,KAAKP,SAAL,GAAiBT,SAAS,CAACuB,SAAV,CAAoB,KAAKhB,OAAL,CAAaiB,OAAjC,EAA0CN,MAA1C,CAAjB;IACA,KAAKT,SAAL,CAAeY,KAAf,CAAqBR,KAAK,IAAI,EAA9B;EACD,CA9BD;;EAgCAF;IACE,OACEc;MAAMC,GAAG,EAAE,KAAKnB,OAAhB;MAAyBoB,KAAK,EAAE;QAAEC,MAAM,EAAE,KAAV;QAAiBC,SAAS,EAAE;MAA5B;IAAhC,EADF;EAGD,CAJD;;EAKF;AAvDA,EAA6BC","names":["window","jQuery","$","require","mathQuill","MathQuill","getInterface","__extends","props","_super","_this","element","createRef","mathField","ignoreEditEvents","EquationEditor","onChange","value","spaceBehavesLikeTab","autoCommands","autoOperatorNames","onEnter","config","handlers","edit","latex","enter","MathField","current","React","ref","style","border","boxShadow","Component"],"sources":["../src/index.tsx"],"sourcesContent":["import React, { Component, createRef } from \"react\";\n\n// Import JQuery, required for the functioning of the equation editor\nimport $ from \"jquery\";\n\n// Import the styles from the Mathquill editor\nimport \"mathquill/build/mathquill.css\";\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nwindow.jQuery = $;\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nrequire(\"mathquill/build/mathquill\");\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\n// eslint-disable-next-line no-undef\nconst mathQuill = MathQuill.getInterface(2);\n\ntype EquationEditorProps = {\n  onChange(latex: string): void;\n  value: string;\n  spaceBehavesLikeTab?: boolean;\n  autoCommands: string;\n  autoOperatorNames: string;\n  onEnter?(): void;\n};\n\n/**\n * @typedef {EquationEditorProps} props\n * @prop {Function} onChange Triggered when content of the equation editor changes\n * @prop {string} value Content of the equation handler\n * @prop {boolean}[false] spaceBehavesLikeTab Whether spacebar should simulate tab behavior\n * @prop {string} autoCommands List of commands for which you only have to type the name of the\n * command with a \\ in front of it. Examples: pi theta rho sum\n * @prop {string} autoOperatorNames List of operators for which you only have to type the name of the\n * operator with a \\ in front of it. Examples: sin cos tan\n * @prop {Function} onEnter Triggered when enter is pressed in the equation editor\n * @extends {Component<EquationEditorProps>}\n */\nclass EquationEditor extends Component<EquationEditorProps> {\n  element: any;\n  mathField: any;\n  ignoreEditEvents: number;\n\n  // Element needs to be in the class format and thus requires a constructor. The steps that are run\n  // in the constructor is to make sure that React can succesfully communicate with the equation\n  // editor.\n  constructor(props: EquationEditorProps) {\n    super(props);\n\n    this.element = createRef();\n    this.mathField = null;\n\n    // MathJax apparently fire 2 edit events on startup.\n    this.ignoreEditEvents = 2;\n  }\n\n  componentDidMount() {\n    const {\n      onChange,\n      value,\n      spaceBehavesLikeTab,\n      autoCommands,\n      autoOperatorNames,\n      onEnter,\n    } = this.props;\n\n    const config = {\n      handlers: {\n        edit: () => {\n          if (this.ignoreEditEvents > 0) {\n            this.ignoreEditEvents -= 1;\n            return;\n          }\n          if (this.mathField.latex() !== value) {\n            onChange(this.mathField.latex());\n          }\n        },\n        enter: onEnter,\n      },\n      spaceBehavesLikeTab,\n      autoCommands,\n      autoOperatorNames,\n    };\n\n    this.mathField = mathQuill.MathField(this.element.current, config);\n    this.mathField.latex(value || \"\");\n  }\n\n  render() {\n    return (\n      <span ref={this.element} style={{ border: \"0px\", boxShadow: \"None\" }} />\n    );\n  }\n}\n\nexport default EquationEditor;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.primeFactors = exports.pow = void 0;\nvar Symbol_1 = require(\"../../../Types/Symbol\");\nvar Groups_1 = require(\"../../../Types/Groups\");\nvar Settings_1 = require(\"../../../Settings\");\nvar Utils_1 = require(\"../../../Core/Utils\");\nvar Errors_1 = require(\"../../../Core/Errors\");\nvar add_1 = require(\"./add\");\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\nvar Frac_1 = require(\"../../../Types/Frac\");\nvar log_1 = require(\"../math/log\");\nvar expand_1 = require(\"../math/expand\");\nvar abs_1 = require(\"../math/abs\");\nvar Matrix_1 = require(\"../../../Types/Matrix\");\nvar Math_consts_1 = require(\"../../Math.consts\");\nvar index_1 = require(\"../index\");\nvar Trig_1 = require(\"../../Trig\");\nvar Parser_1 = require(\"../../../Parser/Parser\");\n/**\n * Gets called when the parser finds the ^ operator. See this.add\n * @param {Symbol} a\n * @param {Symbol} b\n * @returns {Symbol}\n */\nfunction pow(a, b) {\n  var aIsSymbol = (0, Utils_1.isSymbol)(a),\n    bIsSymbol = (0, Utils_1.isSymbol)(b);\n  if (aIsSymbol && bIsSymbol) {\n    //it has units then it's the Unit module's problem\n    if (a.unit || b.unit) {\n      return deps.Unit.pow(a, b);\n    }\n    // Handle abs\n    if (a.group === Groups_1.Groups.FN && a.fname === Settings_1.Settings.ABS && (0, Utils_1.even)(b)) {\n      var m = a.multiplier.clone();\n      var raised = pow(a.args[0], b);\n      raised.multiplier = m;\n      return raised;\n    }\n    // Handle infinity\n    if (a.isInfinity || b.isInfinity) {\n      if (a.isInfinity && b.isInfinity) throw new Errors_1.UndefinedError('(' + a + ')^(' + b + ') is undefined!');\n      if (a.isConstant() && b.isInfinity) {\n        if (a.equals(0)) {\n          if (b.lessThan(0)) throw new Errors_1.UndefinedError('0^Infinity is undefined!');\n          return new Symbol_1.Symbol(0);\n        }\n        if (a.equals(1)) throw new Errors_1.UndefinedError('1^' + b.toString() + ' is undefined!');\n        //a^-oo\n        if (b.lessThan(0)) return new Symbol_1.Symbol(0);\n        //a^oo\n        if (!a.lessThan(0)) return Symbol_1.Symbol.infinity();\n      }\n      if (a.isInfinity && b.isConstant()) {\n        if (b.equals(0)) throw new Errors_1.UndefinedError(a + '^0 is undefined!');\n        if (b.lessThan(0)) return new Symbol_1.Symbol(0);\n        return (0, index_1.multiply)(Symbol_1.Symbol.infinity(), pow(new Symbol_1.Symbol(a.sign()), b.clone()));\n      }\n    }\n    var aIsZero = a.equals(0);\n    var bIsZero = b.equals(0);\n    if (aIsZero && bIsZero) throw new Errors_1.UndefinedError('0^0 is undefined!');\n    // Return 0 right away if possible\n    if (aIsZero && b.isConstant() && b.multiplier.greaterThan(0)) return new Symbol_1.Symbol(0);\n    if (bIsZero) return new Symbol_1.Symbol(1);\n    var bIsConstant = b.isConstant(),\n      aIsConstant = a.isConstant(),\n      bIsInt = b.isInteger(),\n      m = a.multiplier,\n      result = a.clone();\n    // 0^0, 1/0, etc. Complain.\n    if (aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0)) throw new Errors_1.UndefinedError('Division by zero is not allowed!');\n    // Compute imaginary numbers right away\n    if (Settings_1.Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && (0, Utils_1.evenFraction)(b)) {\n      var k, re, im;\n      k = Math.PI * b;\n      re = new Symbol_1.Symbol(Math.cos(k));\n      im = (0, index_1.multiply)(Symbol_1.Symbol.imaginary(), new Symbol_1.Symbol(Math.sin(k)));\n      return (0, add_1.add)(re, im);\n    }\n    // Imaginary number under negative nthroot or to the n\n    if (Settings_1.Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && (0, Utils_1.isInt)(b) && !b.lessThan(0)) {\n      var re, im, r, theta, nre, nim, phi;\n      re = a.realpart();\n      im = a.imagpart();\n      if (re.isConstant('all') && im.isConstant('all')) {\n        phi = Settings_1.Settings.USE_BIG ? (0, Symbol_1.Symbol)(decimal_js_1.default.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal()).times(b.toString())) : Math.atan2(im, re) * b;\n        theta = new Symbol_1.Symbol(phi);\n        r = pow(Symbol_1.Symbol.hyp(re, im), b);\n        nre = (0, index_1.multiply)(r.clone(), Trig_1.Trig.cos(theta.clone()));\n        nim = (0, index_1.multiply)(r, Trig_1.Trig.sin(theta));\n        return (0, add_1.add)(nre, (0, index_1.multiply)(Symbol_1.Symbol.imaginary(), nim));\n      }\n    }\n    // Take care of the symbolic part\n    result.toUnitMultiplier();\n    //simpifly sqrt\n    if (result.group === Groups_1.Groups.FN && result.fname === Settings_1.Settings.SQRT && !bIsConstant) {\n      var s = result.args[0];\n      s.multiplyPower(new Symbol_1.Symbol(0.5));\n      s.multiplier.multiply(result.multiplier);\n      s.multiplyPower(b);\n      result = s;\n    } else {\n      var sign = m.sign();\n      //handle cases such as (-a^3)^(1/4)\n      if ((0, Utils_1.evenFraction)(b) && sign < 0) {\n        // Swaperoo\n        // First put the sign back on the symbol\n        result.negate();\n        // Wrap it in brackets\n        result = (0, Symbol_1.symfunction)(Settings_1.Settings.PARENTHESIS, [result]);\n        // Move the sign back the exterior and let nerdamer handle the rest\n        result.negate();\n      }\n      result.multiplyPower(b);\n    }\n    if (aIsConstant && bIsConstant && Settings_1.Settings.PARSE2NUMBER) {\n      var c;\n      //remove the sign\n      if (sign < 0) {\n        a.negate();\n        if (b.multiplier.den.equals(2))\n          //we know that the numerator has to be odd and therefore it's i\n          c = new Symbol_1.Symbol(Settings_1.Settings.IMAGINARY);else if ((0, Utils_1.isInt)(b.multiplier)) {\n          if ((0, Utils_1.even)(b.multiplier)) c = new Symbol_1.Symbol(1);else c = new Symbol_1.Symbol(-1);\n        } else if (!(0, Utils_1.even)(b.multiplier.den)) {\n          c = new Symbol_1.Symbol(Math.pow(sign, b.multiplier.num));\n        } else {\n          c = pow((0, Symbol_1.symfunction)(Settings_1.Settings.PARENTHESIS, [new Symbol_1.Symbol(sign)]), b.clone());\n        }\n      }\n      result = new Symbol_1.Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));\n      //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));\n      //put the back sign\n      if (c) result = (0, index_1.multiply)(result, c);\n    } else if (bIsInt && !m.equals(1)) {\n      var abs_b = b.abs();\n      // Provide fall back to JS until big number implementation is improved\n      if (abs_b.gt(Settings_1.Settings.MAX_EXP)) {\n        if (b.sign() < 0) return new Symbol_1.Symbol(0);\n        return Symbol_1.Symbol.infinity();\n      } else {\n        var p = b.multiplier.toDecimal();\n        var sgn = Math.sign(p);\n        p = Math.abs(p);\n        var multiplier = new Frac_1.Frac(1);\n        multiplier.num = m.num.pow(p);\n        multiplier.den = m.den.pow(p);\n        if (sgn < 0) multiplier.invert();\n        //multiplying is justified since after mulltiplyPower if it was of group Groups.P it will now be of group Groups.N\n        result.multiplier = result.multiplier.multiply(multiplier);\n      }\n    } else {\n      var sign = a.sign();\n      if (b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {\n        //we know the sign is negative so if the denominator for b == 2 then it's i\n        if (b.multiplier.den.equals(2)) {\n          var i = new Symbol_1.Symbol(Settings_1.Settings.IMAGINARY);\n          a.negate(); //remove the sign\n          //if the power is negative then i is negative\n          if (b.lessThan(0)) {\n            i.negate();\n            b.negate(); //remove the sign from the power\n          }\n          //pull the power normally and put back the imaginary\n          result = (0, index_1.multiply)(pow(a, b), i);\n        } else {\n          var aa = a.clone();\n          aa.multiplier.negate();\n          result = pow((0, Symbol_1.symfunction)(Settings_1.Settings.PARENTHESIS, [new Symbol_1.Symbol(sign)]), b.clone());\n          var _a = pow(new Symbol_1.Symbol(aa.multiplier.num), b.clone());\n          var _b = pow(new Symbol_1.Symbol(aa.multiplier.den), b.clone());\n          var r = (0, index_1.divide)(_a, _b);\n          result = (0, index_1.multiply)(result, r);\n        }\n      } else if (Settings_1.Settings.PARSE2NUMBER && b.isImaginary()) {\n        //4^(i + 2) = e^(- (2 - 4 i) Ï€ n + (2 + i) log(4))\n        var re = b.realpart();\n        var im = b.imagpart();\n        /*\n         if (b.group === CP && false) {\n         var ex = pow(a.clone(), re);\n         var xi = multiply(multiply(ex.clone(), trig.sin(im.clone())), Symbol.imaginary());\n         var xa = multiply(trig.cos(im), ex);\n         result = add(xi, xa);\n         }\n         else {\n         */\n        var aa = a.clone().toLinear();\n        var a1 = pow(aa.clone(), re);\n        var log_a = (0, log_1.log)(aa.clone());\n        var b1 = Trig_1.Trig.cos((0, index_1.multiply)(im.clone(), log_a));\n        var c1 = (0, index_1.multiply)(Trig_1.Trig.sin((0, index_1.multiply)(im, (0, log_1.log)(aa))), Symbol_1.Symbol.imaginary());\n        result = (0, index_1.multiply)(a1, (0, add_1.add)(b1, c1));\n        result = (0, expand_1.expand)((0, Parser_1.parse)(result));\n        /*\n         }\n         */\n      } else {\n        //b is a symbol\n        var neg_num = a.group === Groups_1.Groups.N && sign < 0,\n          num = testSQRT(new Symbol_1.Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),\n          den = testSQRT(new Symbol_1.Symbol(m.den).setPower(b.clone()).invert());\n        //eliminate imaginary if possible\n        if (a.imaginary) {\n          if (bIsInt) {\n            var s, p, n;\n            s = Math.sign(b);\n            p = (0, abs_1.abs)(b);\n            n = p % 4;\n            result = new Symbol_1.Symbol((0, Utils_1.even)(n) ? -1 : Settings_1.Settings.IMAGINARY);\n            if (n === 0 || s < 0 && n === 1 || s > 0 && n === 3) {\n              result.negate();\n            }\n          } else {\n            //assume i = sqrt(-1) -> (-1)^(1/2)\n            var nr = b.multiplier.multiply(Frac_1.Frac.quick(1, 2)),\n              //the denominator denotes the power so raise to it. It will turn positive it round\n              tn = Math.pow(-1, nr.num);\n            result = (0, Utils_1.even)(nr.den) ? new Symbol_1.Symbol(-1).setPower(nr, true) : new Symbol_1.Symbol(tn);\n          }\n        }\n        //ensure that the sign is carried by the symbol and not the multiplier\n        //this enables us to check down the line if the multiplier can indeed be transferred\n        if (sign < 0 && !neg_num) result.negate();\n        //retain the absolute value\n        if (bIsConstant && a.group !== Groups_1.Groups.EX) {\n          var evenr = (0, Utils_1.even)(b.multiplier.den),\n            evenp = (0, Utils_1.even)(a.power),\n            n = result.power.toDecimal(),\n            evennp = (0, Utils_1.even)(n);\n          if (evenr && evenp && !evennp) {\n            if (n === 1) result = (0, Symbol_1.symfunction)(Settings_1.Settings.ABS, [result]);else if (!(0, Utils_1.isInt)(n)) {\n              var p = result.power;\n              result = (0, Symbol_1.symfunction)(Settings_1.Settings.ABS, [result.toLinear()]).setPower(p);\n            } else {\n              result = (0, index_1.multiply)((0, Symbol_1.symfunction)(Settings_1.Settings.ABS, [result.clone().toLinear()]), result.clone().setPower(new Frac_1.Frac(n - 1)));\n            }\n            //quick workaround. Revisit\n            if (Settings_1.Settings.POSITIVE_MULTIPLIERS && result.fname === Settings_1.Settings.ABS) result = result.args[0];\n          }\n        }\n        //multiply out sqrt\n        if (b.equals(2) && result.group === Groups_1.Groups.CB) {\n          var _result = new Symbol_1.Symbol(1);\n          result.each(function (sym) {\n            _result = (0, index_1.multiply)(_result, pow(sym, b));\n          });\n          result = _result;\n        }\n      }\n    }\n    result = testSQRT(result);\n    // Don't multiply until we've tested the remaining symbol\n    if (num && den) {\n      result = (0, index_1.multiply)(result, testPow((0, index_1.multiply)(num, den)));\n    }\n    // Reduce square root\n    if (result.fname === Settings_1.Settings.SQRT) {\n      var isEX = result.group === Groups_1.Groups.EX;\n      var t = isEX ? result.power.multiplier.toString() : result.power.toString();\n      if ((0, Utils_1.even)(t)) {\n        var pt = isEX ? (0, index_1.divide)(result.power, new Symbol_1.Symbol(2)) : new Symbol_1.Symbol(result.power.divide(new Frac_1.Frac(2))),\n          m = result.multiplier;\n        result = pow(result.args[0], pt);\n        result.multiplier = result.multiplier.multiply(m);\n      }\n    }\n    // Detect Euler's identity\n    else if (!Settings_1.Settings.IGNORE_E && result.isE() && result.group === Groups_1.Groups.EX && result.power.contains('pi') && result.power.contains(Settings_1.Settings.IMAGINARY) && b.group === Groups_1.Groups.CB) {\n      var theta = b.stripVar(Settings_1.Settings.IMAGINARY);\n      result = (0, add_1.add)(Trig_1.Trig.cos(theta), (0, index_1.multiply)(Symbol_1.Symbol.imaginary(), Trig_1.Trig.sin(theta)));\n    }\n    return result;\n  } else {\n    if ((0, Utils_1.isVector)(a) && bIsSymbol) {\n      a = a.map(function (x) {\n        return pow(x, b.clone());\n      });\n    } else if ((0, Utils_1.isMatrix)(a) && bIsSymbol) {\n      var M = new Matrix_1.Matrix();\n      a.eachElement(function (x, i, j) {\n        M.set(i, j, pow(x, b.clone()));\n      });\n      a = M;\n    } else if (aIsSymbol && (0, Utils_1.isMatrix)(b)) {\n      var M = new Matrix_1.Matrix();\n      b.eachElement(function (x, i, j) {\n        M.set(i, j, pow(a.clone(), x));\n      });\n      a = M;\n    }\n    return a;\n  }\n}\nexports.pow = pow;\nfunction testSQRT(symbol) {\n  //wrap the symbol in sqrt. This eliminates one more check down the line.\n  if (!(0, Utils_1.isSymbol)(symbol.power) && symbol.power.absEquals(0.5)) {\n    var sign = symbol.power.sign();\n    //don't devide the power directly. Notice the use of toString. This makes it possible\n    //to use a bigNumber library in the future\n    var retval = (0, index_1.sqrt)(symbol.group === Groups_1.Groups.P ? new Symbol_1.Symbol(symbol.value) : symbol.toLinear());\n    //place back the sign of the power\n    if (sign < 0) retval.invert();\n    return retval;\n  }\n  return symbol;\n}\n//try to reduce a symbol by pulling its power\nfunction testPow(symbol) {\n  if (symbol.group === Groups_1.Groups.P) {\n    var v = symbol.value;\n    var fct = primeFactors(v)[0];\n    //safety\n    if (!fct) {\n      (0, Utils_1.warn)('Unable to compute prime factors. This should not happen. Please review and report.');\n      return symbol;\n    }\n    var n = new Frac_1.Frac(Math.log(v) / Math.log(fct)),\n      p = n.multiply(symbol.power);\n    //we don't want a more complex number than before\n    if (p.den > symbol.power.den) return symbol;\n    if ((0, Utils_1.isInt)(p)) symbol = new Symbol_1.Symbol(Math.pow(fct, p));else symbol = new Symbol_1.Symbol(fct).setPower(p);\n  }\n  return symbol;\n}\n/**\n * Calculates prime factors for a number. It first checks if the number\n * is a prime number. If it's not then it will calculate all the primes\n * for that number.\n * @param {int} num\n * @returns {Array}\n */\nfunction primeFactors(num) {\n  if ((0, Utils_1.isPrime)(num)) {\n    return [num];\n  }\n  var l = num,\n    i = 1,\n    factors = [],\n    epsilon = 2.2204460492503130808472633361816E-16;\n  while (i < l) {\n    var quotient = num / i;\n    var whole = Math.floor(quotient);\n    var remainder = quotient - whole;\n    if (remainder <= epsilon && i > 1) {\n      // If the prime wasn't found but calculated then save it and\n      // add it as a factor.\n      if ((0, Utils_1.isPrime)(i)) {\n        if (Math_consts_1.PRIMES.indexOf(i) === -1) {\n          Math_consts_1.PRIMES.push(i);\n        }\n        factors.push(i);\n      }\n      // Check if the remainder is a prime\n      if ((0, Utils_1.isPrime)(whole)) {\n        factors.push(whole);\n        break;\n      }\n      l = whole;\n    }\n    i++;\n  }\n  return factors.sort(function (a, b) {\n    return a - b;\n  });\n}\nexports.primeFactors = primeFactors;","map":{"version":3,"mappings":"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","names":["pow","a","b","aIsSymbol","bIsSymbol","unit","deps","Unit","group","Groups_1","FN","fname","Settings_1","ABS","m","multiplier","clone","raised","args","isInfinity","Errors_1","isConstant","equals","lessThan","Symbol_1","toString","infinity","sign","aIsZero","bIsZero","greaterThan","bIsConstant","aIsConstant","bIsInt","isInteger","result","PARSE2NUMBER","k","re","im","Math","PI","cos","imaginary","sin","isImaginary","r","theta","nre","nim","phi","realpart","imagpart","USE_BIG","decimal_js_1","atan2","i","toDecimal","times","hyp","Trig_1","toUnitMultiplier","SQRT","s","multiplyPower","multiply","negate","PARENTHESIS","c","den","IMAGINARY","num","abs_b","abs","gt","MAX_EXP","p","sgn","Frac_1","invert","aa","_a","_b","toLinear","a1","log_a","b1","c1","neg_num","N","testSQRT","setPower","n","nr","quick","tn","EX","evenr","evenp","power","evennp","POSITIVE_MULTIPLIERS","CB","_result","each","sym","testPow","isEX","t","pt","divide","IGNORE_E","isE","contains","stripVar","map","x","M","Matrix_1","eachElement","j","set","exports","symbol","absEquals","retval","P","value","v","fct","primeFactors","log","l","factors","epsilon","quotient","whole","floor","remainder","Math_consts_1","indexOf","push","sort"],"sourceRoot":"","sources":["../../../../src/Functions/Core/operations/pow.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\src\\\\Graph.js\";\nimport React from \"react\";\nimport { useCallback, useEffect } from \"react\";\nimport ReactFlow, { addEdge, Background, useNodesState, useEdgesState, MarkerType } from \"react-flow-renderer\";\nimport PrimitiveNode from \"./PrimitiveNode.js\";\nimport BooleanNode from \"./BooleanNode.js\";\nimport ButtonEdge from \"./ButtonEdge\";\nimport \"./styles.css\";\nimport { GraphProvider } from \"./GraphContext.js\";\nvar nodeTypes = {\n  primitiveNode: PrimitiveNode,\n  booleanNode: BooleanNode\n};\nvar edgeTypes = {\n  buttonEdge: ButtonEdge\n};\nvar initialNodes = [{\n  id: \"node-0\",\n  type: \"primitiveNode\",\n  position: {\n    x: -100,\n    y: 50\n  },\n  data: {\n    sdf: \"sphere(1.0)\",\n    children: []\n  }\n}, {\n  id: \"node-1\",\n  type: \"primitiveNode\",\n  position: {\n    x: 100,\n    y: 50\n  },\n  data: {\n    sdf: \"box(1.0, 1.0, 1.0)\",\n    children: []\n  }\n}, {\n  id: \"node-2\",\n  type: \"booleanNode\",\n  position: {\n    x: 0,\n    y: 550\n  },\n  data: {\n    sdfs: {},\n    children: []\n  }\n}];\nvar initialEdges = [];\n\nvar onInit = function onInit(reactFlowInstance) {\n  return console.log(\"flow loaded:\", reactFlowInstance);\n};\n\nexport default function Graph() {\n  var _useNodesState = useNodesState(initialNodes),\n      _useNodesState2 = _slicedToArray(_useNodesState, 3),\n      nodes = _useNodesState2[0],\n      setNodes = _useNodesState2[1],\n      onNodesChange = _useNodesState2[2];\n\n  var _useEdgesState = useEdgesState([]),\n      _useEdgesState2 = _slicedToArray(_useEdgesState, 3),\n      edges = _useEdgesState2[0],\n      setEdges = _useEdgesState2[1],\n      onEdgesChange = _useEdgesState2[2];\n\n  var _React$useState = React.useState(3),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      id = _React$useState2[0],\n      setId = _React$useState2[1];\n\n  var updateNodeSdf = function updateNodeSdf(id, newSdf) {\n    console.log(\"ACTUALIZADO SDF\");\n    setNodes(function (nds) {\n      return nds.map(function (node) {\n        if (node.id === id) {\n          node.data = _objectSpread(_objectSpread({}, node.data), {}, {\n            sdf: newSdf\n          });\n          node.data.children.forEach(function (child) {\n            nds.map(function (node) {\n              if (node.id === child) {\n                console.log(node);\n                var newSdfs = node.data.sdfs;\n                newSdfs[\"\".concat(id)] = newSdf;\n                console.log(\"HIJO: \" + child);\n                node.data = _objectSpread(_objectSpread({}, node.data), {}, {\n                  sdfs: newSdfs\n                });\n              }\n            });\n          });\n        }\n\n        return node;\n      });\n    });\n  };\n\n  var connectSdf = function connectSdf(sourceId, targetId, params) {\n    var sourceNode = nodes.find(function (n) {\n      return n.id === sourceId;\n    });\n    var newSdfs = nodes.find(function (n) {\n      return n.id === targetId;\n    }).data.sdfs;\n    newSdfs[\"\".concat(sourceId)] = sourceNode.data.sdf;\n    console.log(newSdfs);\n    setNodes(function (nds) {\n      return nds.map(function (node) {\n        if (node.id === targetId) {\n          console.log(\"FOUND\");\n          node.data = _objectSpread(_objectSpread({}, node.data), {}, {\n            sdfs: newSdfs\n          });\n        }\n\n        onNodesChange([node]);\n        return node;\n      });\n    });\n  };\n\n  var removeEdge = function removeEdge(edgeId) {\n    console.log(\"ASASA \" + edgeId);\n    var newEdges = edges.filter(function (edge) {\n      return edge.id != edgeId;\n    });\n    setEdges(newEdges);\n  };\n\n  var sharedFunctions = {\n    updateNodeSdf: updateNodeSdf,\n    connectSdf: connectSdf\n  };\n  var onConnect = useCallback(function (params) {\n    var sourceNode = nodes.find(function (n) {\n      return n.id === params.source;\n    });\n    setEdges(function (eds) {\n      return addEdge(_objectSpread(_objectSpread({}, params), {}, {\n        type: \"buttonEdge\",\n        animated: true,\n        markerEnd: {\n          type: MarkerType.Arrow,\n          color: \"#000\"\n        },\n        data: {\n          onRemoveEdge: removeEdge\n        }\n      }), eds);\n    });\n    var newChildren = nodes.find(function (n) {\n      return n.id === params.target;\n    }).data.children;\n    newChildren.push(params.target);\n    setNodes(function (nds) {\n      return nds.map(function (node) {\n        if (node.id === params.source) {\n          console.log(\"A\\xD1ADIDO HIJO \".concat(params.target, \" A \").concat(params.source));\n          node.data = _objectSpread(_objectSpread({}, node.data), {}, {\n            children: newChildren\n          });\n        }\n\n        onNodesChange([node]);\n        return node;\n      });\n    });\n  }, []);\n  useEffect(function () {\n    console.log(\"NODOS ACTUALIZADOS\");\n    console.log(nodes);\n  }, [nodes]);\n  useEffect(function () {\n    console.log(\"NUEVO EDGE:\");\n    console.log(edges);\n  }, [edges]);\n\n  var newPrimitiveNode = function newPrimitiveNode() {\n    setId(id + 1);\n    return {\n      id: \"node-\".concat(id),\n      type: \"primitiveNode\",\n      position: {\n        x: 0,\n        y: 0\n      },\n      data: {\n        sdf: \"sphere(1.0)\",\n        children: []\n      }\n    };\n  };\n\n  var newBooleanNode = function newBooleanNode() {\n    setId(id + 1);\n    return {\n      id: \"node-\".concat(id),\n      type: \"booleanNode\",\n      position: {\n        x: 0,\n        y: 0\n      },\n      data: {\n        sdfs: {},\n        children: []\n      }\n    };\n  };\n\n  var handleKey = function handleKey(e) {\n    // SPACE BAR\n    if (e.key === \"p\") {\n      var node = newPrimitiveNode();\n      nodes.push(node);\n      onNodesChange([node]); // Para actualizar\n    } else if (e.key === \"b\") {\n      var _node = newBooleanNode();\n\n      nodes.push(_node);\n      onNodesChange([_node]); // Para actualizar\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"100vh\"\n    },\n    tabIndex: \"0\",\n    onKeyDown: handleKey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GraphProvider, {\n    value: sharedFunctions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ReactFlow, {\n    nodes: nodes,\n    edges: edges,\n    onNodesChange: onNodesChange,\n    onEdgesChange: onEdgesChange,\n    onConnect: onConnect // onDisconnect={onDisconnect}\n    ,\n    nodeTypes: nodeTypes,\n    edgeTypes: edgeTypes,\n    onInit: onInit,\n    onEdgeClick: function onEdgeClick(ev, edge) {\n      return setEdges(edges.filter(function (e) {\n        return e.id != edge.id;\n      }));\n    },\n    snapToGrid: true,\n    fitView: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Background, {\n    color: \"#aaa\",\n    gap: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"names":["React","useCallback","useEffect","ReactFlow","addEdge","Background","useNodesState","useEdgesState","MarkerType","PrimitiveNode","BooleanNode","ButtonEdge","GraphProvider","nodeTypes","primitiveNode","booleanNode","edgeTypes","buttonEdge","initialNodes","id","type","position","x","y","data","sdf","children","sdfs","initialEdges","onInit","reactFlowInstance","console","log","Graph","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","useState","setId","updateNodeSdf","newSdf","nds","map","node","forEach","child","newSdfs","connectSdf","sourceId","targetId","params","sourceNode","find","n","removeEdge","edgeId","newEdges","filter","edge","sharedFunctions","onConnect","source","eds","animated","markerEnd","Arrow","color","onRemoveEdge","newChildren","target","push","newPrimitiveNode","newBooleanNode","handleKey","e","key","height","ev"],"sources":["C:/Users/daniz/TFG/Aplicacion/src/Graph.js"],"sourcesContent":["import React from \"react\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"react-flow-renderer\";\r\nimport PrimitiveNode from \"./PrimitiveNode.js\";\r\nimport BooleanNode from \"./BooleanNode.js\";\r\nimport ButtonEdge from \"./ButtonEdge\";\r\n\r\nimport \"./styles.css\";\r\nimport { GraphProvider } from \"./GraphContext.js\";\r\n\r\nconst nodeTypes = { primitiveNode: PrimitiveNode, booleanNode: BooleanNode };\r\nconst edgeTypes = { buttonEdge: ButtonEdge};\r\n\r\nconst initialNodes = [\r\n  {\r\n    id: \"node-0\",\r\n    type: \"primitiveNode\",\r\n    position: { x: -100, y: 50 },\r\n    data: { sdf: \"sphere(1.0)\", children: [] },\r\n  },\r\n  {\r\n    id: \"node-1\",\r\n    type: \"primitiveNode\",\r\n    position: { x: 100, y: 50 },\r\n    data: { sdf: \"box(1.0, 1.0, 1.0)\", children: [] },\r\n  },\r\n  {\r\n    id: \"node-2\",\r\n    type: \"booleanNode\",\r\n    position: { x: 0, y: 550 },\r\n    data: { sdfs: {}, children: [] },\r\n  },\r\n];\r\n\r\nconst initialEdges = [];\r\n\r\n\r\n\r\nconst onInit = (reactFlowInstance) =>\r\n  console.log(\"flow loaded:\", reactFlowInstance);\r\n\r\nexport default function Graph() {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const [id, setId] = React.useState(3);\r\n\r\n  const updateNodeSdf = (id, newSdf) => {\r\n    console.log(\"ACTUALIZADO SDF\");\r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === id) {\r\n          node.data = {\r\n            ...node.data,\r\n            sdf: newSdf,\r\n          };\r\n\r\n          node.data.children.forEach(child => {\r\n            nds.map((node) => {\r\n              if (node.id === child){\r\n                console.log(node);\r\n            var newSdfs = node.data.sdfs;\r\n            newSdfs[`${id}`] = newSdf;\r\n            console.log(\"HIJO: \" + child);\r\n            node.data = {\r\n               ...node.data,\r\n               sdfs: newSdfs\r\n              }\r\n              }\r\n            })\r\n            \r\n          });\r\n        }\r\n\r\n        return node;\r\n      })\r\n    );\r\n\r\n    \r\n  };\r\n\r\n  const connectSdf = (sourceId, targetId, params) => {\r\n    const sourceNode = nodes.find(n => n.id===sourceId);\r\n    var newSdfs = nodes.find(n => n.id===targetId).data.sdfs;\r\n    newSdfs[`${sourceId}`] = sourceNode.data.sdf;\r\n    \r\n    console.log(newSdfs);\r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === targetId) {\r\n          console.log(\"FOUND\");\r\n          node.data = {\r\n            ...node.data,\r\n            sdfs: newSdfs,\r\n          };\r\n        }\r\n\r\n        onNodesChange([node]);\r\n        return node;\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeEdge = (edgeId) => {\r\n    console.log(\"ASASA \" + edgeId);\r\n    var newEdges = edges.filter(edge => {\r\n      return edge.id != edgeId;\r\n    });\r\n\r\n    setEdges(newEdges);\r\n  }\r\n\r\n  const sharedFunctions = {\r\n    updateNodeSdf,\r\n    connectSdf,\r\n  };\r\n\r\n  const onConnect = useCallback((params) => {\r\n    const sourceNode = nodes.find((n) => n.id === params.source);\r\n\r\n    setEdges((eds) =>\r\n      addEdge(\r\n        {\r\n          ...params,\r\n          type: \"buttonEdge\",\r\n          animated: true,\r\n          markerEnd: { type: MarkerType.Arrow, color: \"#000\" },\r\n          data: {onRemoveEdge: removeEdge},\r\n        },\r\n        eds\r\n      )\r\n    );\r\n\r\n    var newChildren = nodes.find(n => n.id===params.target).data.children;\r\n    newChildren.push(params.target);\r\n\r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === params.source) {\r\n          console.log(`AÑADIDO HIJO ${params.target} A ${params.source}`);\r\n          node.data = {\r\n             ...node.data,\r\n             children: newChildren,\r\n           };\r\n        }\r\n\r\n        onNodesChange([node]);\r\n        return node;\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"NODOS ACTUALIZADOS\");\r\n    console.log(nodes);\r\n  }, [nodes]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"NUEVO EDGE:\");\r\n    console.log(edges);\r\n  }, [edges]);\r\n\r\n  const newPrimitiveNode = () => {\r\n    setId(id + 1);\r\n    return {\r\n      id: `node-${id}`,\r\n      type: \"primitiveNode\",\r\n      position: { x: 0, y: 0 },\r\n      data: { sdf: \"sphere(1.0)\", children: [] }\r\n    };\r\n  };\r\n\r\n  const newBooleanNode = () => {\r\n    setId(id + 1);\r\n    return {\r\n      id: `node-${id}`,\r\n      type: \"booleanNode\",\r\n      position: { x: 0, y: 0 },\r\n      data: { sdfs: {}, children: [] }\r\n    };\r\n  };\r\n\r\n  const handleKey = (e) => {\r\n    // SPACE BAR\r\n    if (e.key === \"p\") {\r\n      const node = newPrimitiveNode();\r\n      nodes.push(node);\r\n\r\n      onNodesChange([node]); // Para actualizar\r\n    } else if (e.key === \"b\") {\r\n      const node = newBooleanNode();\r\n      nodes.push(node);\r\n\r\n      onNodesChange([node]); // Para actualizar\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <div style={{ height: \"100vh\" }} tabIndex=\"0\" onKeyDown={handleKey}>\r\n      <GraphProvider value={sharedFunctions}>\r\n        <ReactFlow\r\n          nodes={nodes}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          // onDisconnect={onDisconnect}\r\n\r\n          nodeTypes={nodeTypes}\r\n          edgeTypes={edgeTypes}\r\n          onInit={onInit}\r\n          onEdgeClick={(ev, edge) =>\r\n            setEdges(edges.filter((e) => e.id != edge.id))\r\n          }\r\n          snapToGrid={true}\r\n          fitView\r\n        >\r\n          <Background color=\"#aaa\" gap={10} />\r\n        </ReactFlow>\r\n      </GraphProvider>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
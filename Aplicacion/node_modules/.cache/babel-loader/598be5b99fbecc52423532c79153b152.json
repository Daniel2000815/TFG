{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar utils = require('@motionone/utils');\n\nvar data = require('../data.cjs.js');\n/**\n * A list of all transformable axes. We'll use this list to generated a version\n * of each axes for each transform.\n */\n\n\nvar axes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * An ordered array of each transformable value. By default, transform values\n * will be sorted to this order.\n */\n\nvar order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\nvar transformAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\"\n};\nvar rotation = {\n  syntax: \"<angle>\",\n  initialValue: \"0deg\",\n  toDefaultUnit: function toDefaultUnit(v) {\n    return v + \"deg\";\n  }\n};\nvar baseTransformProperties = {\n  translate: {\n    syntax: \"<length-percentage>\",\n    initialValue: \"0px\",\n    toDefaultUnit: function toDefaultUnit(v) {\n      return v + \"px\";\n    }\n  },\n  rotate: rotation,\n  scale: {\n    syntax: \"<number>\",\n    initialValue: 1,\n    toDefaultUnit: utils.noopReturn\n  },\n  skew: rotation\n};\nvar transformDefinitions = new Map();\n\nvar asTransformCssVar = function asTransformCssVar(name) {\n  return \"--motion-\".concat(name);\n};\n/**\n * Generate a list of every possible transform key\n */\n\n\nvar transforms = [\"x\", \"y\", \"z\"];\norder.forEach(function (name) {\n  axes.forEach(function (axis) {\n    transforms.push(name + axis);\n    transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\n  });\n});\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\n\nvar compareTransformOrder = function compareTransformOrder(a, b) {\n  return transforms.indexOf(a) - transforms.indexOf(b);\n};\n/**\n * Provide a quick way to check if a string is the name of a transform\n */\n\n\nvar transformLookup = new Set(transforms);\n\nvar isTransform = function isTransform(name) {\n  return transformLookup.has(name);\n};\n\nvar addTransformToElement = function addTransformToElement(element, name) {\n  // Map x to translateX etc\n  if (transformAlias[name]) name = transformAlias[name];\n\n  var _data$getAnimationDat = data.getAnimationData(element),\n      transforms = _data$getAnimationDat.transforms;\n\n  utils.addUniqueItem(transforms, name);\n  /**\n   * TODO: An optimisation here could be to cache the transform in element data\n   * and only update if this has changed.\n   */\n\n  element.style.transform = buildTransformTemplate(transforms);\n};\n\nvar buildTransformTemplate = function buildTransformTemplate(transforms) {\n  return transforms.sort(compareTransformOrder).reduce(transformListToString, \"\").trim();\n};\n\nvar transformListToString = function transformListToString(template, name) {\n  return \"\".concat(template, \" \").concat(name, \"(var(\").concat(asTransformCssVar(name), \"))\");\n};\n\nexports.addTransformToElement = addTransformToElement;\nexports.asTransformCssVar = asTransformCssVar;\nexports.axes = axes;\nexports.buildTransformTemplate = buildTransformTemplate;\nexports.compareTransformOrder = compareTransformOrder;\nexports.isTransform = isTransform;\nexports.transformAlias = transformAlias;\nexports.transformDefinitions = transformDefinitions;","map":{"version":3,"names":["Object","defineProperty","exports","value","utils","require","data","axes","order","transformAlias","x","y","z","rotation","syntax","initialValue","toDefaultUnit","v","baseTransformProperties","translate","rotate","scale","noopReturn","skew","transformDefinitions","Map","asTransformCssVar","name","transforms","forEach","axis","push","set","compareTransformOrder","a","b","indexOf","transformLookup","Set","isTransform","has","addTransformToElement","element","getAnimationData","addUniqueItem","style","transform","buildTransformTemplate","sort","reduce","transformListToString","trim","template"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/@motionone/dom/dist/animate/utils/transforms.cjs.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('@motionone/utils');\nvar data = require('../data.cjs.js');\n\n/**\n * A list of all transformable axes. We'll use this list to generated a version\n * of each axes for each transform.\n */\nconst axes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * An ordered array of each transformable value. By default, transform values\n * will be sorted to this order.\n */\nconst order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\nconst transformAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n};\nconst rotation = {\n    syntax: \"<angle>\",\n    initialValue: \"0deg\",\n    toDefaultUnit: (v) => v + \"deg\",\n};\nconst baseTransformProperties = {\n    translate: {\n        syntax: \"<length-percentage>\",\n        initialValue: \"0px\",\n        toDefaultUnit: (v) => v + \"px\",\n    },\n    rotate: rotation,\n    scale: {\n        syntax: \"<number>\",\n        initialValue: 1,\n        toDefaultUnit: utils.noopReturn,\n    },\n    skew: rotation,\n};\nconst transformDefinitions = new Map();\nconst asTransformCssVar = (name) => `--motion-${name}`;\n/**\n * Generate a list of every possible transform key\n */\nconst transforms = [\"x\", \"y\", \"z\"];\norder.forEach((name) => {\n    axes.forEach((axis) => {\n        transforms.push(name + axis);\n        transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\n    });\n});\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\nconst compareTransformOrder = (a, b) => transforms.indexOf(a) - transforms.indexOf(b);\n/**\n * Provide a quick way to check if a string is the name of a transform\n */\nconst transformLookup = new Set(transforms);\nconst isTransform = (name) => transformLookup.has(name);\nconst addTransformToElement = (element, name) => {\n    // Map x to translateX etc\n    if (transformAlias[name])\n        name = transformAlias[name];\n    const { transforms } = data.getAnimationData(element);\n    utils.addUniqueItem(transforms, name);\n    /**\n     * TODO: An optimisation here could be to cache the transform in element data\n     * and only update if this has changed.\n     */\n    element.style.transform = buildTransformTemplate(transforms);\n};\nconst buildTransformTemplate = (transforms) => transforms\n    .sort(compareTransformOrder)\n    .reduce(transformListToString, \"\")\n    .trim();\nconst transformListToString = (template, name) => `${template} ${name}(var(${asTransformCssVar(name)}))`;\n\nexports.addTransformToElement = addTransformToElement;\nexports.asTransformCssVar = asTransformCssVar;\nexports.axes = axes;\nexports.buildTransformTemplate = buildTransformTemplate;\nexports.compareTransformOrder = compareTransformOrder;\nexports.isTransform = isTransform;\nexports.transformAlias = transformAlias;\nexports.transformDefinitions = transformDefinitions;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.separate = exports.scientificToDecimal = exports.nroots = exports.isNumericSymbol = exports.isNegative = exports.isFraction = exports.getCoeffs = exports.decompose_fn = void 0;\n\nvar Groups_1 = require(\"../Types/Groups\");\n\nvar expand_1 = require(\"../Functions/Core/math/expand\");\n\nvar Core_1 = require(\"../Functions/Core\");\n\nvar Symbol_1 = require(\"../Types/Symbol\");\n\nvar Utils_1 = require(\"./Utils\");\n\nvar Settings_1 = require(\"../Settings\");\n\nvar Vector_1 = require(\"../Types/Vector\");\n\nvar Math2_1 = require(\"../Functions/Math2\");\n\nvar Parser_1 = require(\"../Parser/Parser\");\n/**\n * TODO: Pick a more descriptive name and better description\n * Breaks a function down into it's parts wrt to a variable, mainly coefficients\n * Example a*x^2+b wrt x\n * @param {Symbol} fn\n * @param {String} wrt\n * @param {boolean} as_obj\n */\n\n\nfunction decompose_fn(fn, wrt, as_obj) {\n  wrt = String(wrt); //convert to string\n\n  var ax, a, x, b;\n\n  if (fn.group === Groups_1.Groups.CP) {\n    var t = (0, expand_1.expand)(fn.clone()).stripVar(wrt);\n    ax = (0, Core_1.subtract)(fn.clone(), t.clone());\n    b = t;\n  } else {\n    ax = fn.clone();\n  }\n\n  a = ax.stripVar(wrt);\n  x = (0, Core_1.divide)(ax.clone(), a.clone());\n  b = b || new Symbol_1.Symbol(0);\n  if (as_obj) return {\n    a: a,\n    x: x,\n    ax: ax,\n    b: b\n  };\n  return [a, x, ax, b];\n}\n\nexports.decompose_fn = decompose_fn;\n/**\n * Returns the coefficients of a symbol given a variable. Given ax^2+b^x+c, it divides\n * each nth term by x^n.\n * @param {Symbol} symbol\n * @param {Symbol} wrt\n */\n\nfunction getCoeffs(symbol, wrt, info) {\n  var coeffs = []; //we loop through the symbols and stick them in their respective\n  //containers e.g. y*x^2 goes to index 2\n\n  symbol.each(function (term) {\n    var coeff, p;\n\n    if (term.contains(wrt)) {\n      //we want only the coefficient which in this case will be everything but the variable\n      //e.g. a*b*x -> a*b if the variable to solve for is x\n      coeff = term.stripVar(wrt);\n      var x = (0, Core_1.divide)(term.clone(), coeff.clone());\n      p = x.power.toDecimal();\n    } else {\n      coeff = term;\n      p = 0;\n    }\n\n    var e = coeffs[p]; //if it exists just add it to it\n\n    coeffs[p] = e ? (0, Core_1.add)(e, coeff) : coeff;\n  }, true);\n\n  for (var i = 0; i < coeffs.length; i++) {\n    if (!coeffs[i]) coeffs[i] = new Symbol_1.Symbol(0);\n  } //fill the holes\n\n\n  return coeffs;\n}\n\nexports.getCoeffs = getCoeffs;\n/**\n * Checks to see if a number or Symbol is a fraction\n * @param {Number|Symbol} num\n * @returns {boolean}\n */\n\nfunction isFraction(num) {\n  if ((0, Utils_1.isSymbol)(num)) return isFraction(num.multiplier.toDecimal());\n  return num % 1 !== 0;\n}\n\nexports.isFraction = isFraction;\n/**\n * @param {Number|Symbol} obj\n * @returns {boolean}\n */\n\nfunction isNegative(obj) {\n  if ((0, Utils_1.isSymbol)(obj)) {\n    obj = obj.multiplier;\n  }\n\n  return obj.lessThan(0);\n}\n\nexports.isNegative = isNegative;\n/**\n * Checks to see if a symbol is in group N\n * @param {Symbol} symbol\n */\n\nfunction isNumericSymbol(symbol) {\n  return symbol.group === Groups_1.Groups.N || symbol.group === Groups_1.Groups.P;\n}\n\nexports.isNumericSymbol = isNumericSymbol;\n/**\n * Gets nth roots of a number\n * @param {Symbol} symbol\n * @returns {Vector}\n */\n\nfunction nroots(symbol) {\n  var a, b;\n\n  if (symbol.group === Groups_1.Groups.FN && symbol.fname === '') {\n    a = Symbol_1.Symbol.unwrapPARENS((0, Parser_1.parse)(symbol).toLinear());\n    b = (0, Parser_1.parse)(symbol.power);\n  } else if (symbol.group === Groups_1.Groups.P) {\n    a = (0, Parser_1.parse)(symbol.value);\n    b = (0, Parser_1.parse)(symbol.power);\n  }\n\n  if (a && b && a.group === Groups_1.Groups.N && b.group === Groups_1.Groups.N && a.multiplier.isNegative()) {\n    var _roots2 = [];\n    var parts = Symbol_1.Symbol.toPolarFormArray((0, Utils_1.evaluate)(symbol));\n    var r = parts[0]; //var r = parse(a).abs().toString();\n    //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n\n    var x = (0, Core_1.arg)(a);\n    var n = b.multiplier.den.toString();\n    var p = b.multiplier.num.toString();\n    var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\n\n    for (var i = 0; i < n; i++) {\n      var t = (0, Utils_1.evaluate)((0, Parser_1.parse)((0, Utils_1.format)(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n\n      _roots2.push((0, Utils_1.evaluate)((0, Parser_1.parse)((0, Utils_1.format)(formula, r, n, Settings_1.Settings.IMAGINARY, t, p))));\n    }\n\n    return Vector_1.Vector.fromArray(_roots2);\n  } else if (symbol.isConstant(true, true)) {\n    var sign = symbol.sign();\n    var x = (0, Utils_1.evaluate)(symbol.abs());\n    var root = (0, Core_1.sqrt)(x);\n    var _roots = [root.clone(), root.negate()];\n    if (sign < 0) _roots = _roots.map(function (x) {\n      return (0, Core_1.multiply)(x, Symbol_1.Symbol.imaginary());\n    });\n  } else {\n    _roots = [(0, Parser_1.parse)(symbol)];\n  }\n\n  return Vector_1.Vector.fromArray(_roots);\n}\n\nexports.nroots = nroots;\n/**\n * Convert number from scientific format to decimal format\n * @param value\n */\n\nfunction scientificToDecimal(value) {\n  return Math2_1.Math2.scientificToDecimal(value);\n}\n\nexports.scientificToDecimal = scientificToDecimal;\n/**\n * Separates out the variables into terms of variabls.\n * e.g. x+y+x*y+sqrt(2)+pi returns\n * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\n * @param {type} symbol\n * @param {type} o\n * @returns {undefined}\n * @throws {Error} for expontentials\n */\n\nfunction separate(symbol, o) {\n  symbol = (0, expand_1.expand)(symbol);\n  o = o || {};\n\n  var insert = function insert(key, sym) {\n    if (!o[key]) o[key] = new Symbol_1.Symbol(0);\n    o[key] = (0, Core_1.add)(o[key], sym.clone());\n  };\n\n  symbol.each(function (x) {\n    if (x.isConstant('all')) {\n      insert('constants', x);\n    } else if (x.group === Groups_1.Groups.S) {\n      insert(x.value, x);\n    } else if (x.group === Groups_1.Groups.FN && (x.fname === Settings_1.Settings.ABS || x.fname === '')) {\n      separate(x.args[0]);\n    } else if (x.group === Groups_1.Groups.EX || x.group === Groups_1.Groups.FN) {\n      throw new Error('Unable to separate. Term cannot be a function!');\n    } else {\n      insert((0, Utils_1.isSymbol)(x) ? x.variables().join(' ') : '', x);\n    }\n  });\n  return o;\n}\n\nexports.separate = separate;","map":{"version":3,"mappings":"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","names":["decompose_fn","fn","wrt","as_obj","String","ax","a","x","b","group","Groups_1","CP","t","clone","stripVar","Symbol_1","exports","getCoeffs","symbol","info","coeffs","each","term","coeff","p","contains","power","toDecimal","e","i","length","isFraction","num","multiplier","isNegative","obj","lessThan","isNumericSymbol","N","P","nroots","FN","fname","unwrapPARENS","toLinear","value","_roots","parts","toPolarFormArray","r","n","den","toString","formula","push","Settings_1","IMAGINARY","Vector_1","fromArray","isConstant","sign","abs","root","negate","map","imaginary","scientificToDecimal","Math2_1","separate","o","insert","key","sym","S","ABS","args","EX","Error","variables","join"],"sourceRoot":"","sources":["../../src/Core/Utils-js.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
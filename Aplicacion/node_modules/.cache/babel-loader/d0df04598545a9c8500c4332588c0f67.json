{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.range = exports.isVector = exports.isVariableSymbol = exports.remove = exports.warn = exports.WARNINGS = exports.validateName = exports.nround = exports.knownVariable = exports.isNumber = exports.isPrime = exports.isInt = exports.isSymbol = exports.isExpression = exports.isMatrix = exports.isArray = exports.inBrackets = exports.generatePrimes = exports.format = exports.firstObject = exports.fillHoles = exports.evenFraction = exports.even = exports.evaluate = exports.each = exports.customType = exports.convertToVector = exports.compare = exports.comboSort = exports.build = exports.block = exports.arrayUnique = exports.arrayEqual = exports.arrayMin = exports.arrayMax = exports.arrayGetVariables = exports.arrayClone = exports.arrayAddSlices = exports.arguments2Array = exports.allNumeric = exports.allSame = exports.separate = exports.scientificToDecimal = exports.nroots = exports.isNumericSymbol = exports.isNegative = exports.isFraction = exports.getCoeffs = exports.arraySum = exports.decompose_fn = void 0;\nexports.variables = exports.keys = exports.text = exports.stringReplace = exports.sameSign = exports.allConstants = exports.allNumbers = exports.pretty_print = void 0;\nvar Settings_1 = require(\"../Settings\");\nvar Groups_1 = require(\"../Types/Groups\");\nvar Symbol_1 = require(\"../Types/Symbol\");\nvar Build_1 = require(\"../Parser/Build\");\nvar Vector_1 = require(\"../Types/Vector\");\nvar Utils_js_1 = require(\"./Utils-js\");\nObject.defineProperty(exports, \"decompose_fn\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.decompose_fn;\n  }\n});\nObject.defineProperty(exports, \"getCoeffs\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.getCoeffs;\n  }\n});\nObject.defineProperty(exports, \"isFraction\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.isFraction;\n  }\n});\nObject.defineProperty(exports, \"isNegative\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.isNegative;\n  }\n});\nObject.defineProperty(exports, \"isNumericSymbol\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.isNumericSymbol;\n  }\n});\nObject.defineProperty(exports, \"nroots\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.nroots;\n  }\n});\nObject.defineProperty(exports, \"scientificToDecimal\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.scientificToDecimal;\n  }\n});\nObject.defineProperty(exports, \"separate\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.separate;\n  }\n});\nvar Utils_Symbol_1 = require(\"./Utils.Symbol\");\nObject.defineProperty(exports, \"arraySum\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_Symbol_1.arraySum;\n  }\n});\nvar Math_consts_1 = require(\"../Functions/Math.consts\");\nvar Matrix_1 = require(\"../Types/Matrix\");\nvar Expression_1 = require(\"../Parser/Expression\");\nvar Errors_1 = require(\"./Errors\");\nvar Text_1 = require(\"./Text\");\nvar Parser_1 = require(\"../Parser/Parser\");\n/**\n * Checks to see that all symbols in array are the same\n * @param {{ equals() }[]} arr\n * @returns {boolean}\n */\nfunction allSame(arr) {\n  var last = arr[0];\n  for (var i = 1, l = arr.length; i < l; i++) {\n    if (!arr[i].equals(last)) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.allSame = allSame;\n/**\n * Checks to see if an array contains only numeric values\n * @param {Array} arr\n */\nfunction allNumeric(arr) {\n  for (var i = 0; i < arr.length; i++) {\n    if (!isNumber(arr[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.allNumeric = allNumeric;\n/**\n * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\n * @deprecated Just use rest syntax: ...args!\n * @param {Array|object} obj\n */\nfunction arguments2Array(obj) {\n  return [].slice.call(obj);\n}\nexports.arguments2Array = arguments2Array;\n/**\n * Fills numbers between array values\n * @param {number[]} arr\n * @param {Integer} slices\n */\nfunction arrayAddSlices(arr, slices) {\n  slices = slices || 20;\n  var retval = [];\n  var c, delta, e;\n  retval.push(arr[0]); //push the beginning\n  for (var i = 0; i < arr.length - 1; i++) {\n    c = arr[i];\n    delta = arr[i + 1] - c; //get the difference\n    e = delta / slices; //chop it up in the desired number of slices\n    for (var j = 0; j < slices; j++) {\n      c += e; //add the mesh to the last slice\n      retval.push(c);\n    }\n  }\n  return retval;\n}\nexports.arrayAddSlices = arrayAddSlices;\n/**\n * Clones array with clonable items\n * @param {Array} arr\n * @returns {Array}\n */\nfunction arrayClone(arr) {\n  var new_array = [],\n    l = arr.length;\n  for (var i = 0; i < l; i++) {\n    new_array[i] = arr[i].clone();\n  }\n  return new_array;\n}\nexports.arrayClone = arrayClone;\n/**\n * Gets all the variables in an array of Symbols\n * @param {Symbol[]} arr\n */\nfunction arrayGetVariables(arr) {\n  var vars = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (!isSymbol(arr[i])) {\n      continue;\n    }\n    vars = vars.concat(arr[i].variables());\n  }\n  //remove duplicates\n  vars = arrayUnique(vars).sort();\n  //done\n  return vars;\n}\nexports.arrayGetVariables = arrayGetVariables;\n/**\n * Returns the minimum number in an array\n * @param {Array} arr\n * @returns {Number}\n */\nfunction arrayMax(arr) {\n  return Math.max.apply(Math, _toConsumableArray(arr));\n}\nexports.arrayMax = arrayMax;\n/**\n * Returns the maximum number in an array\n * @param {Array} arr\n * @returns {Number}\n */\nfunction arrayMin(arr) {\n  return Math.min.apply(Math, _toConsumableArray(arr));\n}\nexports.arrayMin = arrayMin;\n/**\n * Checks to see if two arrays are equal\n * @param {Array} arr1\n * @param {Array} arr2\n */\nfunction arrayEqual(arr1, arr2) {\n  arr1.sort();\n  arr2.sort();\n  // The must be of the same length\n  if (arr1.length === arr2.length) {\n    for (var i = 0; i < arr1.length; i++) {\n      // If any two items don't match we're done\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n    // Otherwise they're equal\n    return true;\n  }\n  return false;\n}\nexports.arrayEqual = arrayEqual;\n/**\n * Strips duplicates out of an array\n * @param {Array} arr\n */\nfunction arrayUnique(arr) {\n  var l = arr.length,\n    a = [];\n  for (var i = 0; i < l; i++) {\n    var item = arr[i];\n    if (a.indexOf(item) === -1) {\n      a.push(item);\n    }\n  }\n  return a;\n}\nexports.arrayUnique = arrayUnique;\n/**\n * Creates a temporary block in which one of the global settings is temporarily modified while\n * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\n * answer for a period you would set PARSE2NUMBER to true in the block.\n * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\n * @param settingsName\n * @param {Function} f\n * @param {boolean} opt - The value of the setting in the block\n * @param {string} obj - The obj of interest. Usually a Symbol but could be any object\n */\nfunction block(settingsName, f, opt, obj) {\n  var current_setting = Settings_1.Settings[settingsName];\n  Settings_1.Settings[settingsName] = opt === undefined ? true : !!opt;\n  var retVal = f.call(obj);\n  Settings_1.Settings[settingsName] = current_setting;\n  return retVal;\n}\nexports.block = block;\nfunction build(symbol, arg_array) {\n  return Build_1.Build.build(symbol, arg_array);\n}\nexports.build = build;\n/**\n * Sorts and array given 2 parameters\n * @param {String} a\n * @param {String} b\n */\nfunction comboSort(a, b) {\n  var l = a.length;\n  var combined = []; //the linker\n  for (var i = 0; i < a.length; i++) {\n    combined.push([a[i], b[i]]); //create the map\n  }\n\n  combined.sort(function (x, y) {\n    return x[0] - y[0];\n  });\n  var na = [],\n    nb = [];\n  for (var _i = 0; _i < l; _i++) {\n    na.push(combined[_i][0]);\n    nb.push(combined[_i][1]);\n  }\n  return [na, nb];\n}\nexports.comboSort = comboSort;\n/**\n * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\n * @param {Symbol} sym1\n * @param {Symbol} sym2\n * @param {string[]} vars - an optional array of variables to use\n * @returns {boolean}\n */\nfunction compare(sym1, sym2, vars) {\n  var n = 5; //a random number between 1 and 5 is good enough\n  var scope = {}; // scope object with random numbers generated using vars\n  var comparison;\n  for (var i = 0; i < vars.length; i++) {\n    scope[vars[i]] = new Symbol_1.Symbol(Math.floor(Math.random() * n) + 1);\n  }\n  block('PARSE2NUMBER', function () {\n    comparison = (0, Parser_1.parse)(sym1, scope).equals((0, Parser_1.parse)(sym2, scope));\n  }, false);\n  return comparison;\n}\nexports.compare = compare;\nfunction convertToVector(x) {\n  if (isArray(x)) {\n    var vector = new Vector_1.Vector([]);\n    for (var i = 0; i < x.length; i++) {\n      vector.elements.push(convertToVector(x[i]));\n    }\n    return vector;\n  }\n  //Ensure that a nerdamer ready object is returned\n  if (!isSymbol(x)) {\n    return (0, Parser_1.parse)(x);\n  }\n  return x;\n}\nexports.convertToVector = convertToVector;\n/**\n * the Parser uses this to check if it's allowed to convert the obj to type Symbol\n * @param {Object} obj\n * @returns {boolean}\n */\nfunction customType(obj) {\n  return obj !== undefined && obj.custom;\n}\nexports.customType = customType;\n/**\n * Loops through each item in object and calls function with item as param\n * @param {Object|Array} obj\n * @param {Function} fn\n */\nfunction each(obj, fn) {\n  if (isArray(obj)) {\n    var l = obj.length;\n    for (var i = 0; i < l; i++) {\n      fn.call(obj, i);\n    }\n  } else {\n    for (var x in obj) {\n      if (obj.hasOwnProperty(x)) {\n        fn.call(obj, x);\n      }\n    }\n  }\n}\nexports.each = each;\n/**\n * As the name states. It forces evaluation of the expression\n * @param {Symbol} symbol\n * @param {Symbol} o\n */\nfunction evaluate(symbol) {\n  var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  return block('PARSE2NUMBER', function () {\n    return (0, Parser_1.parse)(symbol, o);\n  }, true);\n}\nexports.evaluate = evaluate;\n/**\n * Checks to see if a number is an even number\n * @param {Number} num\n * @returns {boolean}\n */\nfunction even(num) {\n  return num % 2 === 0;\n}\nexports.even = even;\n/**\n * Checks to see if a fraction is divisible by 2\n * @param {number} num\n * @returns {boolean}\n */\nfunction evenFraction(num) {\n  return 1 / (num % 1) % 2 === 0;\n}\nexports.evenFraction = evenFraction;\n/**\n * Fills holes in an array with zero symbol or generates one with n zeroes\n * @param {Array} arr\n * @param {Number} n\n */\nfunction fillHoles(arr, n) {\n  n = n || arr.length;\n  for (var i = 0; i < n; i++) {\n    var sym = arr[i];\n    if (!sym) {\n      arr[i] = new Symbol_1.Symbol(0);\n    }\n  }\n  return arr;\n}\nexports.fillHoles = fillHoles;\n/**\n * Returns the first encountered item in an object. Items do not have a fixed order in objects\n * so only use if you need any first random or if there's only one item in the object\n * @param {object} obj\n * @param {boolean} key Return this key as first object\n * @param {boolean} both\n * @returns {*}\n */\nfunction firstObject(obj) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var both = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  for (var x in obj) {\n    if (key) {\n      return x;\n    }\n    if (both) {\n      return {\n        key: x,\n        obj: obj[x]\n      };\n    }\n    return obj[x];\n  }\n  return null;\n}\nexports.firstObject = firstObject;\n/**\n * A helper function to replace multiple occurences in a string. Takes multiple arguments\n * @example format('{0} nice, {0} sweet', 'something')\n * //returns 'something nice, something sweet'\n */\nfunction format(str) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  return str.replace(/{(\\d+)}/g, function (match, index) {\n    var arg = args[index];\n    return typeof arg === 'function' ? arg() : arg;\n  });\n}\nexports.format = format;\n/**\n * Generates prime numbers up to a specified number\n * @param {Number} upto\n */\nfunction generatePrimes(upto) {\n  //get the last prime in the array\n  var last_prime = Math_consts_1.PRIMES[Math_consts_1.PRIMES.length - 1] || 2;\n  //no need to check if we've already encountered the number. Just check the cache.\n  for (var i = last_prime; i < upto; i++) {\n    if (isPrime(i)) {\n      Math_consts_1.PRIMES.push(i);\n    }\n  }\n}\nexports.generatePrimes = generatePrimes;\n/**\n * @param {String} str\n * @returns {String} - returns a formatted string surrounded by brackets\n */\nfunction inBrackets(str) {\n  return '(' + str + ')';\n}\nexports.inBrackets = inBrackets;\n/**\n * Checks to see if the object provided is an Array\n * @param {Object} arr\n */\nfunction isArray(arr) {\n  return Array.isArray(arr);\n}\nexports.isArray = isArray;\n/**\n * Checks to see if the object provided is a Matrix\n * @param {Object} obj\n */\nfunction isMatrix(obj) {\n  return obj instanceof Matrix_1.Matrix;\n}\nexports.isMatrix = isMatrix;\n/**\n * Checks to see if the object provided is an Expression\n * @param {Object} obj\n */\nfunction isExpression(obj) {\n  return obj instanceof Expression_1.Expression;\n}\nexports.isExpression = isExpression;\n/**\n * Checks to see if the object provided is a Symbol\n * @param {Object} obj\n */\nfunction isSymbol(obj) {\n  return obj instanceof Symbol_1.Symbol;\n}\nexports.isSymbol = isSymbol;\n/**\n * Checks to see if a number is an integer\n * @param {number} value\n */\nfunction isInt(value) {\n  return /^[-+]?\\d+e?\\+?\\d*$/gim.test(value.toString());\n}\nexports.isInt = isInt;\n/**\n * Checks if number is a prime number\n * @param {Number} n - the number to be checked\n */\nfunction isPrime(n) {\n  var q = Math.floor(Math.sqrt(n));\n  for (var i = 2; i <= q; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\nexports.isPrime = isPrime;\n/**\n * Checks if n is a number\n * @param {any} n\n */\nfunction isNumber(n) {\n  return /^\\d+\\.?\\d*$/.test(n);\n}\nexports.isNumber = isNumber;\n/**\n * Generates an object with known variable value for evaluation\n * @param key\n * @param {any} value Any stringifyable object\n * @returns {Object}\n */\nfunction knownVariable(key, value) {\n  var o = {};\n  o[key] = value;\n  return o;\n}\nexports.knownVariable = knownVariable;\n/**\n * Rounds a number up to x decimal places\n * @param {number} x\n * @param {number} s\n */\nfunction nround(x, s) {\n  if (isInt(x)) {\n    var xn = Number(x);\n    if (xn >= Number.MAX_VALUE) {\n      return x.toString();\n    }\n    return Number(x);\n  }\n  s = s === undefined ? 14 : s;\n  return Math.round(Number(x) * Math.pow(10, s)) / Math.pow(10, s);\n}\nexports.nround = nround;\n/**\n * Enforces rule: \"must start with a letter or underscore and\n * can have any number of underscores, letters, and numbers thereafter.\"\n * @param {string} name The name of the symbol being checked\n * @param {string} typ - The type of symbols that's being validated\n * @throws {InvalidVariableNameError}  - Throws an exception on fail\n */\nfunction validateName(name) {\n  var typ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'variable';\n  if (Settings_1.Settings.ALLOW_CHARS.indexOf(name) !== -1) return;\n  var regex = Settings_1.Settings.VALIDATION_REGEX;\n  if (!regex.test(name)) {\n    throw new Errors_1.InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\n  }\n}\nexports.validateName = validateName;\n/**\n * Used to pass warnings or low severity errors about the library\n * @param msg\n */\nexports.WARNINGS = [];\nfunction warn(msg) {\n  exports.WARNINGS.push(msg);\n  if (Settings_1.Settings.SHOW_WARNINGS && console && console.warn) {\n    console.warn(msg);\n  }\n}\nexports.warn = warn;\n/**\n * Removes an item from either an array or an object. If the object is an array, the index must be\n * specified after the array. If it's an object then the key must be specified\n * @param {Object|Array} obj\n * @param {Integer} indexOrKey\n */\nfunction remove(obj, indexOrKey) {\n  var result;\n  if (Array.isArray(obj) && typeof indexOrKey === 'number') {\n    result = obj.splice(indexOrKey, 1)[0];\n  } else {\n    result = obj[indexOrKey];\n    delete obj[indexOrKey];\n  }\n  return result;\n}\nexports.remove = remove;\n/**\n * Checks to see if a symbol is a variable with no multiplier nor power\n * @param {Symbol} symbol\n */\nfunction isVariableSymbol(symbol) {\n  return symbol.group === Groups_1.Groups.S && symbol.multiplier.equals(1) && symbol.power.equals(1);\n}\nexports.isVariableSymbol = isVariableSymbol;\n/**\n *\n * Checks to see if the object provided is a Vector\n * @param {Object} obj\n */\nfunction isVector(obj) {\n  return obj instanceof Vector_1.Vector;\n}\nexports.isVector = isVector;\n/**\n * Generates an array with values within a range. Multiplies by a step if provided\n * @param {Number} start\n * @param {Number} end\n * @param {Number} step\n */\nfunction range(start, end) {\n  var step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var arr = [];\n  step = step || 1;\n  for (var i = start; i <= end; i++) {\n    arr.push(i * step);\n  }\n  return arr;\n}\nexports.range = range;\n/*\n * Debugging method used to better visualize vector and arrays\n * @param {object} o\n * @returns {String}\n */\nfunction pretty_print(o) {\n  if (Array.isArray(o)) {\n    var s = o.map(function (x) {\n      return pretty_print(x);\n    }).join(', ');\n    if (o.type === 'vector') {\n      return 'vector<' + s + '>';\n    }\n    return '(' + s + ')';\n  }\n  return o.toString();\n}\nexports.pretty_print = pretty_print;\n/**\n * Checks to see if all arguments are numbers\n * @param {Symbol[]} args\n */\nfunction allNumbers(args) {\n  for (var i = 0; i < args.length; i++) {\n    if (args[i].group !== Groups_1.Groups.N) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.allNumbers = allNumbers;\n/*\n * Checks if all arguments aren't just all number but if they\n * are constants as well e.g. pi, e.\n * @param {object} args\n */\nfunction allConstants(args) {\n  for (var i = 0; i < args.length; i++) {\n    if (args[i].isPi() || args[i].isE()) {\n      continue;\n    }\n    if (!args[i].isConstant(true)) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.allConstants = allConstants;\n/**\n * Checks to see if numbers are both negative or are both positive\n * @param {Number} a\n * @param {Number} b\n * @returns {boolean}\n */\nfunction sameSign(a, b) {\n  return a < 0 === b < 0;\n}\nexports.sameSign = sameSign;\n/**\n * A helper function to replace parts of string\n * @param {String} str - The original string\n * @param {Integer} from - The starting index\n * @param {Integer} to - The ending index\n * @param {String} with_str - The replacement string\n * @returns {String} - A formatted string\n */\nfunction stringReplace(str, from, to, with_str) {\n  return str.substr(0, from) + with_str + str.substr(to, str.length);\n}\nexports.stringReplace = stringReplace;\nfunction text(obj, option, useGroup, decp) {\n  return (0, Text_1.text)(obj, option, useGroup, decp);\n}\nexports.text = text;\n/**\n * Returns an array of all the keys in an array\n * @param {Object} obj\n * @returns {Array}\n */\nexports.keys = Object.keys;\n/**\n * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\n * names are then returned in alphabetical order.\n * @param {Symbol} obj\n * @param {Boolean} poly\n * @param {Object} vars - An object containing the variables. Do not pass this in as it generated\n * automatically. In the future this will be a Collector object.\n * @returns {String[]} - An array containing variable names\n */\nfunction variables(obj) {\n  var poly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var vars = arguments.length > 2 ? arguments[2] : undefined;\n  if (!isSymbol(obj)) {\n    return vars ? vars.c.sort() : [];\n  }\n  return obj.variables(poly, vars);\n}\nexports.variables = variables;","map":{"version":3,"mappings":"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","names":["Object","enumerable","get","Utils_js_1","Utils_Symbol_1","allSame","arr","last","i","l","length","equals","exports","allNumeric","isNumber","arguments2Array","obj","slice","call","arrayAddSlices","slices","retval","c","delta","e","push","j","arrayClone","new_array","clone","arrayGetVariables","vars","isSymbol","concat","variables","arrayUnique","sort","arrayMax","Math","max","arrayMin","min","arrayEqual","arr1","arr2","a","item","indexOf","block","settingsName","f","opt","current_setting","Settings_1","undefined","retVal","build","symbol","arg_array","Build_1","comboSort","b","combined","x","y","na","nb","compare","sym1","sym2","n","scope","comparison","Symbol_1","floor","random","convertToVector","isArray","vector","Vector_1","elements","customType","custom","each","fn","hasOwnProperty","evaluate","o","even","num","evenFraction","fillHoles","sym","firstObject","key","both","format","str","args","replace","match","index","arg","generatePrimes","upto","last_prime","Math_consts_1","isPrime","inBrackets","Array","isMatrix","Matrix_1","isExpression","Expression_1","isInt","value","test","toString","q","sqrt","knownVariable","nround","s","xn","Number","MAX_VALUE","round","pow","validateName","name","typ","ALLOW_CHARS","regex","VALIDATION_REGEX","Errors_1","warn","msg","SHOW_WARNINGS","console","remove","indexOrKey","result","splice","isVariableSymbol","group","Groups_1","S","multiplier","power","isVector","range","start","end","step","pretty_print","map","join","type","allNumbers","N","allConstants","isPi","isE","isConstant","sameSign","stringReplace","from","to","with_str","substr","text","option","useGroup","decp","keys","poly"],"sourceRoot":"","sources":["../../src/Core/Utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
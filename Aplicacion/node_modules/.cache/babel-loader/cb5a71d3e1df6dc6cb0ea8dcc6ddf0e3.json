{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bigConvert = exports.symfunction = exports.Symbol = void 0;\n\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\n\nvar Settings_1 = require(\"../Settings\");\n\nvar Utils_1 = require(\"../Core/Utils\");\n\nvar Groups_1 = require(\"./Groups\");\n\nvar Frac_1 = require(\"./Frac\");\n\nvar bigInt_1 = __importDefault(require(\"../3rdparty/bigInt\"));\n\nvar Errors_1 = require(\"../Core/Errors\");\n\nvar Math2_1 = require(\"../Functions/Math2\");\n\nvar Text_1 = require(\"../Core/Text\");\n\nvar LaTeX_1 = require(\"../LaTeX/LaTeX\");\n\nvar Core_1 = require(\"../Functions/Core\");\n\nvar expand_1 = require(\"../Functions/Core/math/expand\");\n\nvar Trig_1 = require(\"../Functions/Trig\");\n\nvar Utils_js_1 = require(\"../Core/Utils-js\");\n\nvar Parser_1 = require(\"../Parser/Parser\"); // noinspection JSUnusedGlobalSymbols\n\n/**\n * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group.\n * All symbols except for \"numbers (group Groups.N)\" have a power.\n * @class Primary data type for the Parser.\n * @param {String | number} obj\n *\n * @property {number} power\n * @returns {Symbol}\n */\n\n\nvar Symbol = /*#__PURE__*/function () {\n  function Symbol(obj) {\n    _classCallCheck(this, Symbol);\n\n    var isInfinity = obj === 'Infinity'; // Convert big numbers to a string\n\n    if (obj instanceof decimal_js_1.default) {\n      obj = obj.toString();\n    } //define numeric symbols\n\n\n    if (/^(-?\\+?\\d+)\\.?\\d*e?-?\\+?\\d*/i.test(obj) || obj instanceof decimal_js_1.default) {\n      this.group = Groups_1.Groups.N;\n      this.value = Settings_1.Settings.CONST_HASH;\n      this.multiplier = new Frac_1.Frac(obj);\n    } //define symbolic symbols\n    else {\n      this.group = Groups_1.Groups.S;\n      (0, Utils_1.validateName)(obj);\n      this.value = obj;\n      this.multiplier = new Frac_1.Frac(1);\n      this.imaginary = obj === Settings_1.Settings.IMAGINARY;\n      this.isInfinity = isInfinity;\n    } //As of 6.0.0 we switched to infinite precision so all objects have a power\n    //Although this is still redundant in constants, it simplifies the logic in\n    //other parts so we'll keep it\n\n\n    this.power = new Frac_1.Frac(1); // Added to silence the strict warning.\n\n    return this;\n  }\n  /**\n   * Returns vanilla imaginary symbol\n   * @returns {Symbol}\n   */\n\n\n  _createClass(Symbol, [{\n    key: \"getNth\",\n    value:\n    /**\n     * Gets nth root accounting for rounding errors\n     * @param {Number} n\n     * @return {Number}\n     */\n    function getNth(n) {\n      // First calculate the root\n      var root = (0, Parser_1.evaluate)((0, Core_1.pow)((0, Parser_1.parse)(this.multiplier), (0, Parser_1.parse)(n).invert())); // Round of any errors\n\n      var rounded = (0, Parser_1.parse)((0, Utils_1.nround)(root)); // Reverse the root\n\n      var e = (0, Parser_1.evaluate)((0, Core_1.pow)(rounded, (0, Parser_1.parse)(n))); // If the rounded root equals the original number then we're good\n\n      if (e.equals((0, Parser_1.parse)(this.multiplier))) {\n        return rounded;\n      } // Otherwise return the unrounded version\n\n\n      return root;\n    }\n    /**\n     * Checks if symbol is to the nth power\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isToNth\",\n    value: function isToNth(n) {\n      // Start by check in the multiplier for squareness\n      // First get the root but round it because currently we still depend\n      var root = this.getNth(n);\n      var nthMultiplier = (0, Utils_1.isInt)(root);\n      var nthPower;\n\n      if (this.group === Groups_1.Groups.CB) {\n        // Start by assuming that all will be square.\n        nthPower = true; // All it takes is for one of the symbols to not have an even power\n        // e.g. x^n1*y^n2 requires that both n1 and n2 are even\n\n        this.each(function (x) {\n          var isNth = x.isToNth(n);\n\n          if (!isNth) {\n            nthPower = false;\n          }\n        });\n      } else {\n        // Check if the power is divisible by n if it's not a number.\n        nthPower = this.group === Groups_1.Groups.N ? true : (0, Utils_1.isInt)((0, Core_1.divide)((0, Parser_1.parse)(this.power), (0, Parser_1.parse)(n)));\n      }\n\n      return nthMultiplier && nthPower;\n    }\n    /**\n     * Checks if a symbol is square\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isSquare\",\n    value: function isSquare() {\n      return this.isToNth(2);\n    }\n    /**\n     * Checks if a symbol is cube\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isCube\",\n    value: function isCube() {\n      return this.isToNth(3);\n    }\n    /**\n     * Checks if a symbol is a bare variable\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isSimple\",\n    value: function isSimple() {\n      return this.power.equals(1) && this.multiplier.equals(1);\n    }\n    /**\n     * Simplifies the power of the symbol\n     * @returns {Symbol} a clone of the symbol\n     */\n\n  }, {\n    key: \"powSimp\",\n    value: function powSimp() {\n      if (this.group === Groups_1.Groups.CB) {\n        var powers = [];\n        this.each(function (x) {\n          var p = x.power; //why waste time if I can't do anything anyway\n\n          if ((0, Utils_1.isSymbol)(p) || p.equals(1)) return this.clone();\n          powers.push(p);\n        });\n        var min = new Frac_1.Frac((0, Utils_1.arrayMin)(powers)); //handle the coefficient\n        //handle the multiplier\n\n        var sign = this.multiplier.sign();\n        var m = this.multiplier.clone().abs(),\n            mfactors = Math2_1.Math2.ifactor(m); //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\n        //we can then reduce it to 2*3*5*(15)^2\n\n        var out_ = new Frac_1.Frac(1);\n        var in_ = new Frac_1.Frac(1);\n\n        for (var x in mfactors) {\n          var n = new Frac_1.Frac(mfactors[x]);\n\n          if (!n.lessThan(min)) {\n            n = n.divide(min).subtract(new Frac_1.Frac(1));\n            in_ = in_.multiply(new Frac_1.Frac(x)); //move the factor inside the bracket\n          }\n\n          out_ = out_.multiply((0, Parser_1.parse)((0, Utils_1.inBrackets)(x) + '^' + (0, Utils_1.inBrackets)(n)).multiplier);\n        }\n\n        var t = new Symbol(in_);\n        this.each(function (x) {\n          x = x.clone();\n          x.power = x.power.divide(min);\n          t = (0, Core_1.multiply)(t, x);\n        });\n        var xt = symfunction(Settings_1.Settings.PARENTHESIS, [t]);\n        xt.power = min;\n        xt.multiplier = sign < 0 ? out_.negate() : out_;\n        return xt;\n      }\n\n      return this.clone();\n    }\n    /**\n     * Checks to see if two functions are of equal value\n     * @param {Symbol} symbol\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(symbol) {\n      if (!(0, Utils_1.isSymbol)(symbol)) symbol = new Symbol(symbol);\n      return this.value === symbol.value && this.power.equals(symbol.power) && this.multiplier.equals(symbol.multiplier) && this.group === symbol.group;\n    }\n  }, {\n    key: \"abs\",\n    value: function abs() {\n      var e = this.clone();\n      e.multiplier.abs();\n      return e;\n    } // Greater than\n\n  }, {\n    key: \"gt\",\n    value: function gt(symbol) {\n      if (!(0, Utils_1.isSymbol)(symbol)) symbol = new Symbol(symbol);\n      return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n    } // Greater than\n\n  }, {\n    key: \"gte\",\n    value: function gte(symbol) {\n      if (!(0, Utils_1.isSymbol)(symbol)) symbol = new Symbol(symbol);\n      return this.equals(symbol) || this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n    } // Less than\n\n  }, {\n    key: \"lt\",\n    value: function lt(symbol) {\n      if (!(0, Utils_1.isSymbol)(symbol)) symbol = new Symbol(symbol);\n      return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n    } // Less than\n\n  }, {\n    key: \"lte\",\n    value: function lte(symbol) {\n      if (!(0, Utils_1.isSymbol)(symbol)) symbol = new Symbol(symbol);\n      return this.equals(symbol) || this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n    }\n    /**\n     * Because nerdamer doesn't group symbols by polynomials but\n     * rather a custom grouping method, this has to be\n     * reinserted in order to make use of most algorithms. This function\n     * checks if the symbol meets the criteria of a polynomial.\n     * @param {boolean} multivariate\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isPoly\",\n    value: function isPoly() {\n      var multivariate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var g = this.group,\n          p = this.power; //the power must be a integer so fail if it's not\n\n      if (!(0, Utils_1.isInt)(p) || p < 0) return false; //constants and first orders\n\n      if (g === Groups_1.Groups.N || g === Groups_1.Groups.S || this.isConstant(true)) return true;\n      var vars = this.variables();\n\n      if (g === Groups_1.Groups.CB && vars.length === 1) {\n        //the variable is assumed the only one that was found\n        var v = vars[0]; //if no variable then guess what!?!? We're done!!! We have a polynomial.\n\n        if (!v) return true;\n\n        for (var x in this.symbols) {\n          var sym = this.symbols[x]; //sqrt(x)\n\n          if (sym.group === Groups_1.Groups.FN && !sym.args[0].isConstant()) return false;\n          if (!sym.contains(v) && !sym.isConstant(true)) return false;\n        }\n\n        return true;\n      } //PL groups. These only fail if a power is not an int\n      //this should handle cases such as x^2*t\n\n\n      if (this.isComposite() || g === Groups_1.Groups.CB && multivariate) {\n        //fail if we're not checking for multivariate polynomials\n        if (!multivariate && vars.length > 1) return false; //loop though the symbols and check if they qualify\n\n        for (var _x in this.symbols) {\n          //we've already the symbols if we're not checking for multivariates at this point\n          //so we check the sub-symbols\n          if (!this.symbols[_x].isPoly(multivariate)) return false;\n        }\n\n        return true;\n      } else return false;\n      /*\n       //all tests must have passed so we must be dealing with a polynomial\n       return true;\n       */\n\n    } //removes the requested variable from the symbol and returns the remainder\n\n  }, {\n    key: \"stripVar\",\n    value: function stripVar(x, exclude_x) {\n      var retval;\n      if ((this.group === Groups_1.Groups.PL || this.group === Groups_1.Groups.S) && this.value === x) retval = new Symbol(exclude_x ? 0 : this.multiplier);else if (this.group === Groups_1.Groups.CB && this.isLinear()) {\n        retval = new Symbol(1);\n        this.each(function (s) {\n          if (!s.contains(x, true)) retval = (0, Core_1.multiply)(retval, s.clone());\n        });\n        retval.multiplier = retval.multiplier.multiply(this.multiplier);\n      } else if (this.group === Groups_1.Groups.CP && !this.isLinear()) {\n        retval = new Symbol(this.multiplier);\n      } else if (this.group === Groups_1.Groups.CP && this.isLinear()) {\n        retval = new Symbol(0);\n        this.each(function (s) {\n          if (!s.contains(x)) {\n            var t = s.clone();\n            t.multiplier = t.multiplier.multiply(this.multiplier);\n            retval = (0, Core_1.add)(retval, t);\n          }\n        }); //BIG TODO!!! It doesn't make much sense\n\n        if (retval.equals(0)) retval = new Symbol(this.multiplier);\n      } else if (this.group === Groups_1.Groups.EX && this.power.contains(x, true)) {\n        retval = new Symbol(this.multiplier);\n      } else if (this.group === Groups_1.Groups.FN && this.contains(x)) {\n        retval = new Symbol(this.multiplier);\n      } else //wth? This should technically be the multiplier.\n        //Unfortunately this method wasn't very well thought out :`(.\n        //should be: retval = new Symbol(this.multiplier);\n        //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\n        //this will break a bunch of unit tests so be ready to for the long haul\n        retval = this.clone();\n      return retval;\n    } //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a].\n\n  }, {\n    key: \"toArray\",\n    value: function toArray(v, arr) {\n      arr = arr || {\n        arr: [],\n        add: function add(x, idx) {\n          var e = this.arr[idx];\n          this.arr[idx] = e ? (0, Core_1.add)(e, x) : x;\n        }\n      };\n      var g = this.group;\n\n      if (g === Groups_1.Groups.S && this.contains(v)) {\n        arr.add(new Symbol(this.multiplier), this.power);\n      } else if (g === Groups_1.Groups.CB) {\n        var a = this.stripVar(v),\n            x = (0, Core_1.divide)(this.clone(), a.clone());\n        var p = x.isConstant() ? 0 : x.power;\n        arr.add(a, p);\n      } else if (g === Groups_1.Groups.PL && this.value === v) {\n        this.each(function (x, p) {\n          arr.add(x.stripVar(v), p);\n        });\n      } else if (g === Groups_1.Groups.CP) {\n        //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\n        //each case is handled above\n        this.each(function (x) {\n          x.toArray(v, arr);\n        });\n      } else if (this.contains(v)) {\n        throw new Errors_1.NerdamerTypeError('Cannot convert to array! Exiting');\n      } else {\n        arr.add(this.clone(), 0); //it's just a constant wrt to v\n      } //fill the holes\n\n\n      arr = arr.arr; //keep only the array since we don't need the object anymore\n\n      for (var i = 0; i < arr.length; i++) {\n        if (!arr[i]) arr[i] = new Symbol(0);\n      }\n\n      return arr;\n    } //checks to see if a symbol contans a function\n\n  }, {\n    key: \"hasFunc\",\n    value: function hasFunc(v) {\n      var fn_group = this.group === Groups_1.Groups.FN || this.group === Groups_1.Groups.EX;\n      if (fn_group && !v || fn_group && this.contains(v)) return true;\n\n      if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].hasFunc(v)) return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(a, b) {\n      a = !(0, Utils_1.isSymbol)(a) ? (0, Parser_1.parse)(a) : a.clone();\n      b = !(0, Utils_1.isSymbol)(b) ? (0, Parser_1.parse)(b) : b.clone();\n      if (a.group === Groups_1.Groups.N || a.group === Groups_1.Groups.P) (0, Errors_1.err)('Cannot substitute a number. Must be a variable');\n      var same_pow = false,\n          a_is_unit_multiplier = a.multiplier.equals(1),\n          m = this.multiplier.clone(),\n          retval;\n      /*\n       * In order to make the substitution the bases have to first match take\n       * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\n       * In both cases the first condition is that the bases match so we begin there\n       * Either both are Groups.PL or both are not Groups.PL but we cannot have Groups.PL and a non-PL group match\n       */\n\n      if (this.value === a.value && (this.group !== Groups_1.Groups.PL && a.group !== Groups_1.Groups.PL || this.group === Groups_1.Groups.PL && a.group === Groups_1.Groups.PL)) {\n        //we cleared the first hurdle but a subsitution may not be possible just yet\n        if (a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\n          if (a.isLinear()) {\n            retval = b;\n          } else if (a.power.equals(this.power)) {\n            retval = b;\n            same_pow = true;\n          }\n\n          if (a.multiplier.equals(this.multiplier)) m = new Frac_1.Frac(1);\n        }\n      } //the next thing is to handle CB\n      else if (this.group === Groups_1.Groups.CB || this.previousGroup === Groups_1.Groups.CB) {\n        retval = new Symbol(1);\n        this.each(function (x) {\n          var subbed = (0, Parser_1.parse)(x.sub(a, b)); //parse it again for safety\n\n          retval = (0, Core_1.multiply)(retval, subbed);\n        });\n      } else if (this.isComposite()) {\n        var symbol = this.clone();\n\n        if (a.isComposite() && symbol.isComposite() && symbol.isLinear() && a.isLinear()) {\n          var find = function find(stack, needle) {\n            for (var x in stack.symbols) {\n              var sym = stack.symbols[x]; //if the symbol equals the needle or it's within the sub-symbols we're done\n\n              if (sym.isComposite() && find(sym, needle) || sym.equals(needle)) return true;\n            }\n\n            return false;\n          }; //go fish\n\n\n          for (var x in a.symbols) {\n            if (!find(symbol, a.symbols[x])) return symbol.clone();\n          }\n\n          retval = (0, Core_1.add)((0, Core_1.subtract)(symbol.clone(), a), b);\n        } else {\n          retval = new Symbol(0);\n          symbol.each(function (x) {\n            retval = (0, Core_1.add)(retval, x.sub(a, b));\n          });\n        }\n      } else if (this.group === Groups_1.Groups.EX) {\n        // the parsed value could be a function so parse and sub\n        retval = (0, Parser_1.parse)(this.value).sub(a, b);\n      } else if (this.group === Groups_1.Groups.FN) {\n        var nargs = [];\n\n        for (var i = 0; i < this.args.length; i++) {\n          var arg = this.args[i];\n          if (!(0, Utils_1.isSymbol)(arg)) arg = (0, Parser_1.parse)(arg);\n          nargs.push(arg.sub(a, b));\n        }\n\n        retval = symfunction(this.fname, nargs);\n      } //if we did manage a substitution\n\n\n      if (retval) {\n        if (!same_pow) {\n          //substitute the power\n          var p = this.group === Groups_1.Groups.EX ? this.power.sub(a, b) : (0, Parser_1.parse)(this.power); //now raise the symbol to that power\n\n          retval = (0, Core_1.pow)(retval, p);\n        } //transfer the multiplier\n\n\n        retval.multiplier = retval.multiplier.multiply(m); //done\n\n        return retval;\n      } //if all else fails\n\n\n      return this.clone();\n    }\n  }, {\n    key: \"isMonomial\",\n    value: function isMonomial() {\n      if (this.group === Groups_1.Groups.S) return true;\n\n      if (this.group === Groups_1.Groups.CB) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].group !== Groups_1.Groups.S) return false;\n        }\n      } else return false;\n\n      return true;\n    }\n  }, {\n    key: \"isPi\",\n    value: function isPi() {\n      return this.group === Groups_1.Groups.S && this.value === 'pi';\n    }\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      return this.multiplier.sign();\n    }\n  }, {\n    key: \"isE\",\n    value: function isE() {\n      return this.value === 'e';\n    }\n  }, {\n    key: \"isSQRT\",\n    value: function isSQRT() {\n      return this.fname === Settings_1.Settings.SQRT;\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant(check_all, check_symbols) {\n      if (check_symbols && this.group === Groups_1.Groups.CB) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].isConstant(true)) return true;\n        }\n      }\n\n      if (check_all === 'functions' && this.isComposite()) {\n        var isConstant = true;\n        this.each(function (x) {\n          if (!x.isConstant(check_all, check_symbols)) {\n            isConstant = false;\n          }\n        }, true);\n        return isConstant;\n      }\n\n      if (check_all === 'all' && (this.isPi() || this.isE())) {\n        return true;\n      }\n\n      if (check_all && this.group === Groups_1.Groups.FN) {\n        for (var i = 0; i < this.args.length; i++) {\n          if (!this.args[i].isConstant(check_all)) return false;\n        }\n\n        return true;\n      }\n\n      if (check_all) return (0, Utils_js_1.isNumericSymbol)(this);\n      return this.value === Settings_1.Settings.CONST_HASH;\n    } //the symbols is imaginary if\n    //1. n*i\n    //2. a+b*i\n    //3. a*i\n\n  }, {\n    key: \"isImaginary\",\n    value: function isImaginary() {\n      if (this.imaginary) return true;else if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].isImaginary()) return true;\n        }\n      }\n      return false;\n    }\n    /**\n     * Returns the real part of a symbol\n     * @returns {Symbol}\n     */\n\n  }, {\n    key: \"realpart\",\n    value: function realpart() {\n      if (this.isConstant()) {\n        return this.clone();\n      } else if (this.imaginary) return new Symbol(0);else if (this.isComposite()) {\n        var retval = new Symbol(0);\n        this.each(function (x) {\n          retval = (0, Core_1.add)(retval, x.realpart());\n        });\n        return retval;\n      } else if (this.isImaginary()) return new Symbol(0);\n\n      return this.clone();\n    }\n    /*\n     * Return imaginary part of a symbol\n     * @returns {Symbol}\n     */\n\n  }, {\n    key: \"imagpart\",\n    value: function imagpart() {\n      if (this.group === Groups_1.Groups.S && this.isImaginary()) return new Symbol(this.multiplier);\n\n      if (this.isComposite()) {\n        var retval = new Symbol(0);\n        this.each(function (x) {\n          retval = (0, Core_1.add)(retval, x.imagpart());\n        });\n        return retval;\n      }\n\n      if (this.group === Groups_1.Groups.CB) return this.stripVar(Settings_1.Settings.IMAGINARY);\n      return new Symbol(0);\n    }\n  }, {\n    key: \"isInteger\",\n    value: function isInteger() {\n      return this.isConstant() && this.multiplier.isInteger();\n    }\n  }, {\n    key: \"isLinear\",\n    value: function isLinear(wrt) {\n      if (wrt) {\n        if (this.isConstant()) return true;\n\n        if (this.group === Groups_1.Groups.S) {\n          if (this.value === wrt) return this.power.equals(1);else return true;\n        }\n\n        if (this.isComposite() && this.power.equals(1)) {\n          for (var x in this.symbols) {\n            if (!this.symbols[x].isLinear(wrt)) return false;\n          }\n\n          return true;\n        }\n\n        if (this.group === Groups_1.Groups.CB && this.symbols[wrt]) return this.symbols[wrt].isLinear(wrt);\n        return false;\n      } else return this.power.equals(1);\n    }\n    /**\n     * Checks to see if a symbol has a function by a specified name or within a specified list\n     * @param {String|String[]} names\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"containsFunction\",\n    value: function containsFunction(names) {\n      if (typeof names === 'string') names = [names];\n      if (this.group === Groups_1.Groups.FN && names.indexOf(this.fname) !== -1) return true;\n\n      if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].containsFunction(names)) return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"multiplyPower\",\n    value: function multiplyPower(p2) {\n      //leave out 1\n      if (this.group === Groups_1.Groups.N && this.multiplier.equals(1)) return this;\n      var p1 = this.power;\n\n      if (this.group !== Groups_1.Groups.EX && p2.group === Groups_1.Groups.N) {\n        var p = p2.multiplier;\n\n        if (this.group === Groups_1.Groups.N && !p.isInteger()) {\n          this.convert(Groups_1.Groups.P);\n        }\n\n        this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\n\n        if (this.group === Groups_1.Groups.P && (0, Utils_1.isInt)(this.power)) {\n          //bring it back to an N\n          this.value = Math.pow(this.value, this.power);\n          this.toLinear();\n          this.convert(Groups_1.Groups.N);\n        }\n      } else {\n        if (this.group !== Groups_1.Groups.EX) {\n          p1 = new Symbol(p1);\n          this.convert(Groups_1.Groups.EX);\n        }\n\n        this.power = (0, Core_1.multiply)(p1, p2);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setPower\",\n    value: function setPower(p, retainSign) {\n      //leave out 1\n      if (this.group === Groups_1.Groups.N && this.multiplier.equals(1)) {\n        return this;\n      }\n\n      if (this.group === Groups_1.Groups.EX && !(0, Utils_1.isSymbol)(p)) {\n        this.group = this.previousGroup;\n        delete this.previousGroup;\n\n        if (this.group === Groups_1.Groups.N) {\n          this.multiplier = new Frac_1.Frac(this.value);\n          this.value = Settings_1.Settings.CONST_HASH;\n        } else this.power = p;\n      } else {\n        var isSymbolic = false;\n\n        if ((0, Utils_1.isSymbol)(p)) {\n          if (p.group === Groups_1.Groups.N) {\n            //p should be the multiplier instead\n            p = p.multiplier;\n          } else {\n            isSymbolic = true;\n          }\n        }\n\n        var group = isSymbolic ? Groups_1.Groups.EX : Groups_1.Groups.P;\n        this.power = p;\n        if (this.group === Groups_1.Groups.N && group) this.convert(group, retainSign);\n      }\n\n      return this;\n    }\n    /**\n     * Checks to see if symbol is located in the denominator\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isInverse\",\n    value: function isInverse() {\n      if (this.group === Groups_1.Groups.EX) return this.power.multiplier.lessThan(0);\n      return this.power < 0;\n    }\n    /**\n     * Make a duplicate of a symbol by copying a predefined list of items.\n     * The name 'copy' would probably be a more appropriate name.\n     * to a new symbol\n     * @param {Symbol | undefined} c\n     * @returns {Symbol}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n      var clone = c || new Symbol(0),\n          //list of properties excluding power as this may be a symbol and would also need to be a clone.\n      properties = ['value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\n          l = properties.length,\n          i;\n\n      if (this.symbols) {\n        clone.symbols = {};\n\n        for (var x in this.symbols) {\n          clone.symbols[x] = this.symbols[x].clone();\n        }\n      }\n\n      for (i = 0; i < l; i++) {\n        if (this[properties[i]] !== undefined) {\n          clone[properties[i]] = this[properties[i]];\n        }\n      }\n\n      clone.power = this.power.clone();\n      clone.multiplier = this.multiplier.clone(); //add back the flag to track if this symbol is a conversion symbol\n\n      if (this.isConversion) clone.isConversion = this.isConversion;\n      if (this.isUnit) clone.isUnit = this.isUnit;\n      return clone;\n    }\n    /**\n     * Converts a symbol multiplier to one.\n     * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\n     * @returns {Symbol}\n     */\n\n  }, {\n    key: \"toUnitMultiplier\",\n    value: function toUnitMultiplier() {\n      var keepSign = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.multiplier.num = new bigInt_1.default(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\n      this.multiplier.den = new bigInt_1.default(1);\n      return this;\n    }\n    /**\n     * Converts a Symbol's power to one.\n     * @returns {Symbol}\n     */\n\n  }, {\n    key: \"toLinear\",\n    value: function toLinear() {\n      // Do nothing if it's already linear\n      if (this.power.equals(1)) {\n        return this;\n      }\n\n      this.setPower(new Frac_1.Frac(1));\n      return this;\n    }\n    /**\n     * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\n     * @param {Function} fn\n     * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well\n     * @param deep\n     */\n\n  }, {\n    key: \"each\",\n    value: function each(fn, deep) {\n      if (!this.symbols) {\n        fn.call(this, this, this.value);\n      } else {\n        for (var x in this.symbols) {\n          var sym = this.symbols[x];\n\n          if (sym.group === Groups_1.Groups.PL && deep) {\n            for (var y in sym.symbols) {\n              fn.call(x, sym.symbols[y], y);\n            }\n          } else fn.call(this, sym, x);\n        }\n      }\n    }\n    /**\n     * A numeric value to be returned for Javascript. It will try to\n     * return a number as far a possible but in case of a pure symbolic\n     * symbol it will just return its text representation\n     * @returns {String|Number}\n     */\n\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      if (this.group === Groups_1.Groups.N) return this.multiplier.valueOf();else if (this.power === 0) {\n        return 1;\n      } else if (this.multiplier === 0) {\n        return 0;\n      } else {\n        return (0, Text_1.text)(this, 'decimals');\n      }\n    }\n    /**\n     * Checks to see if a symbols has a particular variable within it.\n     * Pass in true as second argument to include the power of exponentials\n     * which aren't check by default.\n     * @example let s = _.parse('x+y+z'); s.contains('y');\n     * //returns true\n     * @param {any} variable\n     * @param {boolean} all\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"contains\",\n    value: function contains(variable, all) {\n      //contains expects a string\n      variable = String(variable);\n      var g = this.group;\n      if (this.value === variable) return true;\n\n      if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].contains(variable, all)) return true;\n        }\n      }\n\n      if (g === Groups_1.Groups.FN || this.previousGroup === Groups_1.Groups.FN) {\n        for (var i = 0; i < this.args.length; i++) {\n          if (this.args[i].contains(variable, all)) return true;\n        }\n      }\n\n      if (g === Groups_1.Groups.EX) {\n        //exit only if it does\n        if (all && this.power.contains(variable, all)) {\n          return true;\n        }\n\n        if (this.value === variable) return true;\n      }\n\n      return this.value === variable;\n    }\n    /**\n     * Negates a symbols\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      this.multiplier.negate();\n      if (this.group === Groups_1.Groups.CP || this.group === Groups_1.Groups.PL) this.distributeMultiplier();\n      return this;\n    }\n    /**\n     * Inverts a symbol\n     * @param {boolean} power_only\n     * @param {boolean} all\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"invert\",\n    value: function invert(power_only, all) {\n      //invert the multiplier\n      if (!power_only) this.multiplier = this.multiplier.invert(); //invert the rest\n\n      if ((0, Utils_1.isSymbol)(this.power)) {\n        this.power.negate();\n      } else if (this.group === Groups_1.Groups.CB && all) {\n        this.each(function (x) {\n          return x.invert();\n        });\n      } else {\n        if (this.power && this.group !== Groups_1.Groups.N) this.power.negate();\n      }\n\n      return this;\n    }\n    /**\n     * Symbols of group Groups.CP or Groups.PL may have the multiplier being carried by\n     * the top level symbol at any given time e.g. 2*(x+y+z). This is\n     * convenient in many cases, however in some cases the multiplier needs\n     * to be carried individually e.g. 2*x+2*y+2*z.\n     * This method distributes the multiplier over the entire symbol\n     * @param {boolean} all\n     * @returns {Symbol}\n     */\n\n  }, {\n    key: \"distributeMultiplier\",\n    value: function distributeMultiplier() {\n      var all = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\n\n      if (this.symbols && is_one && this.group !== Groups_1.Groups.CB && !this.multiplier.equals(1)) {\n        for (var x in this.symbols) {\n          var s = this.symbols[x];\n          s.multiplier = s.multiplier.multiply(this.multiplier);\n          s.distributeMultiplier();\n        }\n\n        this.toUnitMultiplier();\n      }\n\n      return this;\n    }\n    /**\n     * This method expands the exponent over the entire symbol just like\n     * distributeMultiplier\n     * @returns {Symbol}\n     */\n\n  }, {\n    key: \"distributeExponent\",\n    value: function distributeExponent() {\n      if (!this.power.equals(1)) {\n        var p = this.power;\n\n        for (var x in this.symbols) {\n          var s = this.symbols[x];\n\n          if (s.group === Groups_1.Groups.EX) {\n            s.power = (0, Core_1.multiply)(s.power, new Symbol(p));\n          } else {\n            this.symbols[x].power = this.symbols[x].power.multiply(p);\n          }\n        }\n\n        this.toLinear();\n      }\n\n      return this;\n    }\n    /**\n     * This method will attempt to up-convert or down-convert one symbol\n     * from one group to another. Not all symbols are convertible from one\n     * group to another however. In that case the symbol will remain\n     * unchanged.\n     * @param {number} group\n     * @param {string} imaginary\n     */\n\n  }, {\n    key: \"convert\",\n    value: function convert(group) {\n      var imaginary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n      if (group > Groups_1.Groups.FN) {\n        //make a clone of this symbol;\n        var cp = this.clone(); //attach a symbols object and upgrade the group\n\n        this.symbols = {};\n\n        if (group === Groups_1.Groups.CB) {\n          //symbol of group Groups.CB hold symbols bound together through multiplication\n          //because of commutativity this multiplier can technically be anywhere within the group\n          //to keep track of it however it's easier to always have the top level carry it\n          cp.toUnitMultiplier();\n        } else {\n          //reset the symbol\n          this.toUnitMultiplier();\n        }\n\n        if (this.group === Groups_1.Groups.FN) {\n          cp.args = this.args;\n          delete this.args;\n          delete this.fname;\n        } //the symbol may originate from the symbol i but this property no longer holds true\n        //after copying\n\n\n        if (this.isImgSymbol) delete this.isImgSymbol;\n        this.toLinear(); //attach a clone of this symbol to the symbols object using its proper key\n\n        this.symbols[cp.keyForGroup(group)] = cp;\n        this.group = group; //objects by default don't have a length property. However, in order to keep track of the number\n        //of sub-symbols we have to impliment our own.\n\n        this.length = 1;\n      } else if (group === Groups_1.Groups.EX) {\n        //1^x is just one so check and make sure\n        if (!(this.group === Groups_1.Groups.N && this.multiplier.equals(1))) {\n          if (this.group !== Groups_1.Groups.EX) this.previousGroup = this.group;\n\n          if (this.group === Groups_1.Groups.N) {\n            this.value = this.multiplier.num.toString();\n            this.toUnitMultiplier();\n          } //update the hash to reflect the accurate hash\n          else this.value = (0, Text_1.text)(this, 'hash');\n\n          this.group = Groups_1.Groups.EX;\n        }\n      } else if (group === Groups_1.Groups.N) {\n        var m = this.multiplier.toDecimal();\n        if (this.symbols) this.symbols = undefined;\n        new Symbol(this.group === Groups_1.Groups.P ? m * Math.pow(this.value, this.power) : m).clone(this);\n      } else if (group === Groups_1.Groups.P && this.group === Groups_1.Groups.N) {\n        this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\n        this.toUnitMultiplier(!imaginary);\n        this.group = Groups_1.Groups.P;\n      }\n\n      return this;\n    }\n    /**\n     * This method is one of the principal methods to make it all possible.\n     * It performs cleanup and prep operations whenever a symbols is\n     * inserted. If the symbols results in a 1 in a Groups.CB (multiplication)\n     * group for instance it will remove the redundant symbol. Similarly\n     * in a symbol of group Groups.PL or Groups.CP (symbols glued by multiplication) it\n     * will remove any dangling zeroes from the symbol. It will also\n     * up-convert or down-convert a symbol if it detects that it's\n     * incorrectly grouped. It should be noted that this method is not\n     * called directly but rather by the 'attach' method for addition groups\n     * and the 'combine' method for multiplication groups.\n     * @param {Symbol} symbol\n     * @param {String} action\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(symbol, action) {\n      //this check can be removed but saves a lot of aggravation when trying to hunt down\n      //a bug. If left, you will instantly know that the error can only be between 2 symbols.\n      if (!(0, Utils_1.isSymbol)(symbol)) (0, Errors_1.err)('Object ' + symbol + ' is not of type Symbol!');\n\n      if (this.symbols) {\n        var group = this.group;\n\n        if (group > Groups_1.Groups.FN) {\n          var key = symbol.keyForGroup(group);\n          var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\n\n          if (action === 'add') {\n            var hash = key;\n\n            if (existing) {\n              //add them together using the parser\n              this.symbols[hash] = (0, Core_1.add)(existing, symbol); //if the addition resulted in a zero multiplier remove it\n\n              if (this.symbols[hash].multiplier.equals(0)) {\n                delete this.symbols[hash];\n                this.length--;\n\n                if (this.length === 0) {\n                  this.convert(Groups_1.Groups.N);\n                  this.multiplier = new Frac_1.Frac(0);\n                }\n              }\n            } else {\n              this.symbols[key] = symbol;\n              this.length++;\n            }\n          } else {\n            //check if this is of group Groups.P and unwrap before inserting\n            if (symbol.group === Groups_1.Groups.P && (0, Utils_1.isInt)(symbol.power)) {\n              symbol.convert(Groups_1.Groups.N);\n            } //transfer the multiplier to the upper symbol but only if the symbol numeric\n\n\n            if (symbol.group !== Groups_1.Groups.EX) {\n              this.multiplier = this.multiplier.multiply(symbol.multiplier);\n              symbol.toUnitMultiplier();\n            } else {\n              symbol.parens = symbol.multiplier.lessThan(0);\n              this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\n              symbol.toUnitMultiplier(true);\n            }\n\n            if (existing) {\n              //remove because the symbol may have changed\n              symbol = (0, Core_1.multiply)((0, Utils_1.remove)(this.symbols, key), symbol);\n\n              if (symbol.isConstant()) {\n                this.multiplier = this.multiplier.multiply(symbol.multiplier);\n                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\n              }\n\n              this.length--; //clean up\n            } //don't insert the symbol if it's 1\n\n\n            if (!symbol.isOne(true)) {\n              this.symbols[key] = symbol;\n              this.length++;\n            } else if (symbol.multiplier.lessThan(0)) {\n              this.negate(); //put back the sign\n            }\n          } //clean up\n\n\n          if (this.length === 0) this.convert(Groups_1.Groups.N); //update the hash\n\n          if (this.group === Groups_1.Groups.CP || this.group === Groups_1.Groups.CB) {\n            this.updateHash();\n          }\n        }\n      }\n\n      return this;\n    } //the insert method for addition\n\n  }, {\n    key: \"attach\",\n    value: function attach(symbol) {\n      if (Array.isArray(symbol)) {\n        for (var i = 0; i < symbol.length; i++) {\n          this.insert(symbol[i], 'add');\n        }\n\n        return this;\n      }\n\n      return this.insert(symbol, 'add');\n    } //the insert method for multiplication\n\n  }, {\n    key: \"combine\",\n    value: function combine(symbol) {\n      if (Array.isArray(symbol)) {\n        for (var i = 0; i < symbol.length; i++) {\n          this.insert(symbol[i], 'multiply');\n        }\n\n        return this;\n      }\n\n      return this.insert(symbol, 'multiply');\n    }\n    /**\n     * This method should be called after any major \"surgery\" on a symbol.\n     * It updates the hash of the symbol for example if the fname of a\n     * function has changed it will update the hash of the symbol.\n     */\n\n  }, {\n    key: \"updateHash\",\n    value: function updateHash() {\n      if (this.group === Groups_1.Groups.N) return;\n\n      if (this.group === Groups_1.Groups.FN) {\n        var contents = '',\n            args = this.args,\n            is_parens = this.fname === Settings_1.Settings.PARENTHESIS;\n\n        for (var i = 0; i < args.length; i++) {\n          contents += (i === 0 ? '' : ',') + (0, Text_1.text)(args[i]);\n        }\n\n        var fn_name = is_parens ? '' : this.fname;\n        this.value = fn_name + (is_parens ? contents : (0, Utils_1.inBrackets)(contents));\n      } else if (!(this.group === Groups_1.Groups.S || this.group === Groups_1.Groups.PL)) {\n        this.value = (0, Text_1.text)(this, 'hash');\n      }\n    }\n    /**\n     * this function defines how every group in stored within a group of\n     * higher order think of it as the switchboard for the library. It\n     * defines the hashes for symbols.\n     * @param {int} group\n     */\n\n  }, {\n    key: \"keyForGroup\",\n    value: function keyForGroup(group) {\n      var g = this.group;\n      var key;\n\n      if (g === Groups_1.Groups.N) {\n        key = this.value;\n      } else if (g === Groups_1.Groups.S || g === Groups_1.Groups.P) {\n        if (group === Groups_1.Groups.PL) key = this.power.toDecimal();else key = this.value;\n      } else if (g === Groups_1.Groups.FN) {\n        if (group === Groups_1.Groups.PL) key = this.power.toDecimal();else key = (0, Text_1.text)(this, 'hash');\n      } else if (g === Groups_1.Groups.PL) {\n        //if the order is reversed then we'll assume multiplication\n        //TODO: possible future dilemma\n        if (group === Groups_1.Groups.CB) key = (0, Text_1.text)(this, 'hash');else if (group === Groups_1.Groups.CP) {\n          if (this.power.equals(1)) key = this.value;else key = (0, Utils_1.inBrackets)((0, Text_1.text)(this, 'hash')) + Settings_1.Settings.POWER_OPERATOR + this.power.toDecimal();\n        } else if (group === Groups_1.Groups.PL) key = this.power.toString();else key = this.value;\n        return key;\n      } else if (g === Groups_1.Groups.CP) {\n        if (group === Groups_1.Groups.CP) {\n          key = (0, Text_1.text)(this, 'hash');\n        }\n\n        if (group === Groups_1.Groups.PL) key = this.power.toDecimal();else key = this.value;\n      } else if (g === Groups_1.Groups.CB) {\n        if (group === Groups_1.Groups.PL) key = this.power.toDecimal();else key = (0, Text_1.text)(this, 'hash');\n      } else if (g === Groups_1.Groups.EX) {\n        if (group === Groups_1.Groups.PL) key = (0, Text_1.text)(this.power);else key = (0, Text_1.text)(this, 'hash');\n      }\n\n      return key;\n    }\n    /**\n     * Symbols are typically stored in an object which works fine for most\n     * cases but presents a problem when the order of the symbols makes\n     * a difference. This function simply collects all the symbols and\n     * returns them as an array. If a function is supplied then that\n     * function is called on every symbol contained within the object.\n     * @param {Function} fn\n     * @param {Object} opt\n     * @param {Function} sort_fn\n     * @@param {Boolean} expand_symbol\n     * @param expand_symbol\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"collectSymbols\",\n    value: function collectSymbols(fn, opt) {\n      var sort_fn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      var expand_symbol = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var collected = [];\n      if (!this.symbols) collected.push(this);else {\n        for (var x in this.symbols) {\n          var symbol = this.symbols[x];\n\n          if (expand_symbol && (symbol.group === Groups_1.Groups.PL || symbol.group === Groups_1.Groups.CP)) {\n            collected = collected.concat(symbol.collectSymbols());\n          } else collected.push(fn ? fn(symbol, opt) : symbol);\n        }\n      }\n      if (sort_fn === null) sort_fn = undefined; //WTF Firefox? Seriously?\n\n      return collected.sort(sort_fn); //sort hopefully gives us some sort of consistency\n    }\n    /**\n     * Returns the latex representation of the symbol\n     * @param {String} option\n     * @returns {String}\n     */\n\n  }, {\n    key: \"latex\",\n    value: function latex(option) {\n      return LaTeX_1.LaTeX.latex(this, option);\n    }\n    /**\n     * Returns the text representation of a symbol\n     * @param {String} option\n     * @returns {String}\n     */\n\n  }, {\n    key: \"text\",\n    value: function text() {\n      var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n      return (0, Text_1.text)(this, option);\n    }\n    /**\n     * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\n     * @@param {bool} abs Compares the absolute value\n     */\n\n  }, {\n    key: \"isOne\",\n    value: function isOne(abs) {\n      var f = abs ? 'absEquals' : 'equals';\n      if (this.group === Groups_1.Groups.N) return this.multiplier[f](1);else return this.power.equals(0);\n    }\n  }, {\n    key: \"isComposite\",\n    value: function isComposite() {\n      var g = this.group,\n          pg = this.previousGroup;\n      return g === Groups_1.Groups.CP || g === Groups_1.Groups.PL || pg === Groups_1.Groups.PL || pg === Groups_1.Groups.CP;\n    }\n  }, {\n    key: \"isCombination\",\n    value: function isCombination() {\n      var g = this.group,\n          pg = this.previousGroup;\n      return g === Groups_1.Groups.CB || pg === Groups_1.Groups.CB;\n    }\n  }, {\n    key: \"lessThan\",\n    value: function lessThan(n) {\n      return this.multiplier.lessThan(n);\n    }\n  }, {\n    key: \"greaterThan\",\n    value: function greaterThan(n) {\n      if (!(0, Utils_1.isSymbol)(n)) {\n        n = new Symbol(n);\n      } // We can't tell for sure if a is greater than be if they're not both numbers\n\n\n      if (!this.isConstant(true) || !n.isConstant(true)) {\n        return false;\n      }\n\n      return this.multiplier.greaterThan(n.multiplier);\n    }\n    /**\n     * Get's the denominator of the symbol if the symbol is of class Groups.CB (multiplication)\n     * with other classes the symbol is either the denominator or not.\n     * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\n     * denominator and has to be found by looking at the actual symbols themselves.\n     */\n\n  }, {\n    key: \"getDenom\",\n    value: function getDenom() {\n      var retval, symbol;\n      symbol = this.clone(); //e.g. 1/(x*(x+1))\n\n      if (this.group === Groups_1.Groups.CB && this.power.lessThan(0)) symbol = (0, expand_1.expand)(symbol); //if the symbol already is the denominator... DONE!!!\n\n      if (symbol.power.lessThan(0)) {\n        var d = (0, Parser_1.parse)(symbol.multiplier.den);\n        retval = symbol.toUnitMultiplier();\n        retval.power.negate();\n        retval = (0, Core_1.multiply)(d, retval); //put back the coeff\n      } else if (symbol.group === Groups_1.Groups.CB) {\n        retval = (0, Parser_1.parse)(symbol.multiplier.den);\n\n        for (var x in symbol.symbols) {\n          if (symbol.symbols[x].power < 0) retval = (0, Core_1.multiply)(retval, symbol.symbols[x].clone().invert());\n        }\n      } else retval = (0, Parser_1.parse)(symbol.multiplier.den);\n\n      return retval;\n    }\n  }, {\n    key: \"getNum\",\n    value: function getNum() {\n      var retval, symbol;\n      symbol = this.clone(); //e.g. 1/(x*(x+1))\n\n      if (symbol.group === Groups_1.Groups.CB && symbol.power.lessThan(0)) symbol = (0, expand_1.expand)(symbol); //if the symbol already is the denominator... DONE!!!\n\n      if (symbol.power.greaterThan(0) && symbol.group !== Groups_1.Groups.CB) {\n        retval = (0, Core_1.multiply)((0, Parser_1.parse)(symbol.multiplier.num), symbol.toUnitMultiplier());\n      } else if (symbol.group === Groups_1.Groups.CB) {\n        retval = (0, Parser_1.parse)(symbol.multiplier.num);\n        symbol.each(function (x) {\n          if (x.power > 0 || x.group === Groups_1.Groups.EX && x.power.multiplier > 0) {\n            retval = (0, Core_1.multiply)(retval, x.clone());\n          }\n        });\n      } else {\n        retval = (0, Parser_1.parse)(symbol.multiplier.num);\n      }\n\n      return retval;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.text();\n    }\n    /**\n     * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\n     * names are then returned in alphabetical order.\n     * @param {Symbol} obj\n     * @param {Boolean} poly\n     * @param {Object} vars - An object containing the variables. Do not pass this in as it generated\n     * automatically. In the future this will be a Collector object.\n     * @returns {String[]} - An array containing variable names\n     */\n\n  }, {\n    key: \"variables\",\n    value: function variables() {\n      var poly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var vars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      vars = vars || {\n        c: [],\n        add: function add(value) {\n          if (this.c.indexOf(value) === -1 && isNaN(value)) this.c.push(value);\n        }\n      };\n      var group = this.group;\n      var prevgroup = this.previousGroup;\n\n      if (group === Groups_1.Groups.EX) {\n        if ((0, Utils_1.isSymbol)(this.power)) this.power.variables(poly, vars);\n      }\n\n      if (group === Groups_1.Groups.CP || group === Groups_1.Groups.CB || prevgroup === Groups_1.Groups.CP || prevgroup === Groups_1.Groups.CB) {\n        for (var x in this.symbols) {\n          if ((0, Utils_1.isSymbol)(this.symbols[x])) this.symbols[x].variables(poly, vars);\n        }\n      } else if (group === Groups_1.Groups.S || prevgroup === Groups_1.Groups.S) {\n        //very crude needs fixing. TODO\n        if (!(this.value === 'e' || this.value === 'pi' || this.value === Settings_1.Settings.IMAGINARY)) {\n          vars.add(this.value);\n        }\n      } else if (group === Groups_1.Groups.PL || prevgroup === Groups_1.Groups.PL) {\n        var fo = (0, Utils_1.firstObject)(this.symbols);\n        if ((0, Utils_1.isSymbol)(fo)) fo.variables(poly, vars);\n      } else if (group === Groups_1.Groups.EX) {\n        if (!isNaN(this.value)) {\n          vars.add(this.value);\n        }\n\n        if ((0, Utils_1.isSymbol)(this.power)) this.power.variables(poly, vars);\n      } else if (group === Groups_1.Groups.FN && !poly) {\n        for (var i = 0; i < this.args.length; i++) {\n          if ((0, Utils_1.isSymbol)(this.args[i])) this.args[i].variables(poly, vars);\n        }\n      }\n\n      return vars.c.sort();\n    }\n  }], [{\n    key: \"imaginary\",\n    value: function imaginary() {\n      var s = new Symbol(Settings_1.Settings.IMAGINARY);\n      s.imaginary = true;\n      return s;\n    }\n    /**\n     * Return nerdamer's representation of Infinity\n     * @param {int} negative -1 to return negative infinity\n     * @returns {Symbol}\n     */\n\n  }, {\n    key: \"infinity\",\n    value: function infinity() {\n      var negative = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var v = new Symbol('Infinity');\n      if (negative === -1) v.negate();\n      return v;\n    }\n  }, {\n    key: \"shell\",\n    value: function shell(group, value) {\n      var symbol = new Symbol(value);\n      symbol.group = group;\n      symbol.symbols = {};\n      symbol.length = 0;\n      return symbol;\n    } //sqrt(x) -> x^(1/2)\n\n  }, {\n    key: \"unwrapSQRT\",\n    value: function unwrapSQRT(symbol, all) {\n      var p = symbol.power;\n\n      if (symbol.fname === Settings_1.Settings.SQRT && (symbol.isLinear() || all)) {\n        var t = symbol.args[0].clone();\n        t.power = t.power.multiply(new Frac_1.Frac(1 / 2));\n        t.multiplier = t.multiplier.multiply(symbol.multiplier);\n        symbol = t;\n        if (all) symbol.power = p.multiply(new Frac_1.Frac(1 / 2));\n      }\n\n      return symbol;\n    }\n  }, {\n    key: \"hyp\",\n    value: function hyp(a, b) {\n      a = a || new Symbol(0);\n      b = b || new Symbol(0);\n      return (0, Core_1.sqrt)((0, Core_1.add)((0, Core_1.pow)(a.clone(), new Symbol(2)), (0, Core_1.pow)(b.clone(), new Symbol(2))));\n    } //converts to polar form array\n\n  }, {\n    key: \"toPolarFormArray\",\n    value: function toPolarFormArray(symbol) {\n      var re, im, r, theta;\n      re = symbol.realpart();\n      im = symbol.imagpart();\n      r = Symbol.hyp(re, im);\n      theta = re.equals(0) ? (0, Parser_1.parse)('pi/2') : Trig_1.Trig.atan((0, Core_1.divide)(im, re));\n      return [r, theta];\n    } //removes parentheses\n\n  }, {\n    key: \"unwrapPARENS\",\n    value: function unwrapPARENS(symbol) {\n      if (symbol.fname === '') {\n        var r = symbol.args[0];\n        r.power = r.power.multiply(symbol.power);\n        r.multiplier = r.multiplier.multiply(symbol.multiplier);\n        if (symbol.fname === '') return Symbol.unwrapPARENS(r);\n        return r;\n      }\n\n      return symbol;\n    }\n  }, {\n    key: \"create\",\n    value: //quickly creates a Symbol\n    function create(value, power) {\n      power = power === undefined ? 1 : power;\n      return (0, Parser_1.parse)('(' + value + ')^(' + power + ')');\n    }\n  }]);\n\n  return Symbol;\n}();\n\nexports.Symbol = Symbol;\n/**\n * Generates library's representation of a function. It's a fancy way of saying a symbol with\n * a few extras. The most important thing is that that it gives a fname and\n * an args property to the symbols in addition to changing its group to FN\n * @param {String} fn_name\n * @param {Array} params\n * @returns {Symbol}\n */\n\nfunction symfunction(fn_name, params) {\n  //call the proper function and return the result;\n  var f = new Symbol(fn_name);\n  f.group = Groups_1.Groups.FN;\n\n  if (typeof params === 'object') {\n    params = [].slice.call(params); //ensure an array\n  }\n\n  f.args = params;\n  f.fname = fn_name === Settings_1.Settings.PARENTHESIS ? '' : fn_name;\n  f.updateHash();\n  return f;\n}\n\nexports.symfunction = symfunction;\n/**\n * Serves as a bridge between numbers and bigNumbers\n * @param {Frac|Number} n\n * @returns {Symbol}\n */\n\nfunction bigConvert(n) {\n  if (!isFinite(n)) {\n    var sign = Math.sign(n);\n    var r = new Symbol(String(Math.abs(n)));\n    r.multiplier = r.multiplier.multiply(new Frac_1.Frac(sign));\n    return r;\n  }\n\n  if ((0, Utils_1.isSymbol)(n)) return n;\n\n  if (typeof n === 'number') {\n    try {\n      n = Frac_1.Frac.simple(n);\n    } catch (e) {\n      n = new Frac_1.Frac(n);\n    }\n  }\n\n  var symbol = new Symbol(0);\n  symbol.multiplier = n;\n  return symbol;\n}\n\nexports.bigConvert = bigConvert;","map":{"version":3,"mappings":"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","names":["Symbol","obj","isInfinity","decimal_js_1","toString","test","group","Groups_1","N","value","Settings_1","CONST_HASH","multiplier","Frac_1","S","imaginary","IMAGINARY","power","n","root","invert","rounded","e","equals","getNth","nthMultiplier","nthPower","CB","each","x","isNth","isToNth","powers","p","clone","push","min","sign","m","abs","mfactors","Math2_1","ifactor","out_","in_","lessThan","divide","subtract","multiply","t","xt","symfunction","PARENTHESIS","negate","symbol","isConstant","greaterThan","multivariate","g","vars","variables","length","v","symbols","sym","FN","args","contains","isComposite","isPoly","exclude_x","retval","PL","isLinear","s","CP","EX","arr","add","idx","a","stripVar","toArray","Errors_1","i","fn_group","hasFunc","b","P","same_pow","a_is_unit_multiplier","previousGroup","subbed","sub","find","stack","needle","nargs","arg","fname","SQRT","check_all","check_symbols","isPi","isE","isImaginary","realpart","imagpart","isInteger","wrt","names","indexOf","containsFunction","p2","p1","convert","Math","pow","toLinear","retainSign","isSymbolic","c","undefined","properties","l","isConversion","isUnit","keepSign","num","bigInt_1","isNegative","den","setPower","fn","deep","call","y","valueOf","variable","all","String","distributeMultiplier","power_only","is_one","absEquals","toUnitMultiplier","cp","isImgSymbol","keyForGroup","toDecimal","action","key","existing","hash","parens","isOne","updateHash","Array","isArray","insert","contents","is_parens","fn_name","POWER_OPERATOR","opt","sort_fn","expand_symbol","collected","concat","collectSymbols","sort","option","LaTeX_1","latex","f","pg","d","text","poly","isNaN","prevgroup","fo","negative","re","im","r","theta","hyp","Trig_1","atan","unwrapPARENS","exports","params","slice","bigConvert","isFinite","simple"],"sourceRoot":"","sources":["../../src/Types/Symbol.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.range = exports.isVector = exports.isVariableSymbol = exports.remove = exports.warn = exports.WARNINGS = exports.validateName = exports.nround = exports.knownVariable = exports.isNumber = exports.isPrime = exports.isInt = exports.isSymbol = exports.isExpression = exports.isMatrix = exports.isArray = exports.inBrackets = exports.generatePrimes = exports.format = exports.firstObject = exports.fillHoles = exports.evenFraction = exports.even = exports.evaluate = exports.each = exports.customType = exports.convertToVector = exports.compare = exports.comboSort = exports.build = exports.block = exports.arrayUnique = exports.arrayEqual = exports.arrayMin = exports.arrayMax = exports.arrayGetVariables = exports.arrayClone = exports.arrayAddSlices = exports.arguments2Array = exports.allNumeric = exports.allSame = exports.separate = exports.scientificToDecimal = exports.nroots = exports.isNumericSymbol = exports.isNegative = exports.isFraction = exports.getCoeffs = exports.arraySum = exports.decompose_fn = void 0;\nexports.variables = exports.keys = exports.text = exports.stringReplace = exports.sameSign = exports.allConstants = exports.allNumbers = exports.pretty_print = void 0;\n\nvar Settings_1 = require(\"../Settings\");\n\nvar Groups_1 = require(\"../Types/Groups\");\n\nvar Symbol_1 = require(\"../Types/Symbol\");\n\nvar Build_1 = require(\"../Parser/Build\");\n\nvar Vector_1 = require(\"../Types/Vector\");\n\nvar Utils_js_1 = require(\"./Utils-js\");\n\nObject.defineProperty(exports, \"decompose_fn\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.decompose_fn;\n  }\n});\nObject.defineProperty(exports, \"getCoeffs\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.getCoeffs;\n  }\n});\nObject.defineProperty(exports, \"isFraction\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.isFraction;\n  }\n});\nObject.defineProperty(exports, \"isNegative\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.isNegative;\n  }\n});\nObject.defineProperty(exports, \"isNumericSymbol\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.isNumericSymbol;\n  }\n});\nObject.defineProperty(exports, \"nroots\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.nroots;\n  }\n});\nObject.defineProperty(exports, \"scientificToDecimal\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.scientificToDecimal;\n  }\n});\nObject.defineProperty(exports, \"separate\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_js_1.separate;\n  }\n});\n\nvar Utils_Symbol_1 = require(\"./Utils.Symbol\");\n\nObject.defineProperty(exports, \"arraySum\", {\n  enumerable: true,\n  get: function get() {\n    return Utils_Symbol_1.arraySum;\n  }\n});\n\nvar Math_consts_1 = require(\"../Functions/Math.consts\");\n\nvar Matrix_1 = require(\"../Types/Matrix\");\n\nvar Expression_1 = require(\"../Parser/Expression\");\n\nvar Errors_1 = require(\"./Errors\");\n\nvar Text_1 = require(\"./Text\");\n\nvar Parser_1 = require(\"../Parser/Parser\");\n/**\n * Checks to see that all symbols in array are the same\n * @param {{ equals() }[]} arr\n * @returns {boolean}\n */\n\n\nfunction allSame(arr) {\n  var last = arr[0];\n\n  for (var i = 1, l = arr.length; i < l; i++) {\n    if (!arr[i].equals(last)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.allSame = allSame;\n/**\n * Checks to see if an array contains only numeric values\n * @param {Array} arr\n */\n\nfunction allNumeric(arr) {\n  for (var i = 0; i < arr.length; i++) {\n    if (!isNumber(arr[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.allNumeric = allNumeric;\n/**\n * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\n * @deprecated Just use rest syntax: ...args!\n * @param {Array|object} obj\n */\n\nfunction arguments2Array(obj) {\n  return [].slice.call(obj);\n}\n\nexports.arguments2Array = arguments2Array;\n/**\n * Fills numbers between array values\n * @param {number[]} arr\n * @param {Integer} slices\n */\n\nfunction arrayAddSlices(arr, slices) {\n  slices = slices || 20;\n  var retval = [];\n  var c, delta, e;\n  retval.push(arr[0]); //push the beginning\n\n  for (var i = 0; i < arr.length - 1; i++) {\n    c = arr[i];\n    delta = arr[i + 1] - c; //get the difference\n\n    e = delta / slices; //chop it up in the desired number of slices\n\n    for (var j = 0; j < slices; j++) {\n      c += e; //add the mesh to the last slice\n\n      retval.push(c);\n    }\n  }\n\n  return retval;\n}\n\nexports.arrayAddSlices = arrayAddSlices;\n/**\n * Clones array with clonable items\n * @param {Array} arr\n * @returns {Array}\n */\n\nfunction arrayClone(arr) {\n  var new_array = [],\n      l = arr.length;\n\n  for (var i = 0; i < l; i++) {\n    new_array[i] = arr[i].clone();\n  }\n\n  return new_array;\n}\n\nexports.arrayClone = arrayClone;\n/**\n * Gets all the variables in an array of Symbols\n * @param {Symbol[]} arr\n */\n\nfunction arrayGetVariables(arr) {\n  var vars = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    if (!isSymbol(arr[i])) {\n      continue;\n    }\n\n    vars = vars.concat(arr[i].variables());\n  } //remove duplicates\n\n\n  vars = arrayUnique(vars).sort(); //done\n\n  return vars;\n}\n\nexports.arrayGetVariables = arrayGetVariables;\n/**\n * Returns the minimum number in an array\n * @param {Array} arr\n * @returns {Number}\n */\n\nfunction arrayMax(arr) {\n  return Math.max.apply(Math, _toConsumableArray(arr));\n}\n\nexports.arrayMax = arrayMax;\n/**\n * Returns the maximum number in an array\n * @param {Array} arr\n * @returns {Number}\n */\n\nfunction arrayMin(arr) {\n  return Math.min.apply(Math, _toConsumableArray(arr));\n}\n\nexports.arrayMin = arrayMin;\n/**\n * Checks to see if two arrays are equal\n * @param {Array} arr1\n * @param {Array} arr2\n */\n\nfunction arrayEqual(arr1, arr2) {\n  arr1.sort();\n  arr2.sort(); // The must be of the same length\n\n  if (arr1.length === arr2.length) {\n    for (var i = 0; i < arr1.length; i++) {\n      // If any two items don't match we're done\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    } // Otherwise they're equal\n\n\n    return true;\n  }\n\n  return false;\n}\n\nexports.arrayEqual = arrayEqual;\n/**\n * Strips duplicates out of an array\n * @param {Array} arr\n */\n\nfunction arrayUnique(arr) {\n  var l = arr.length,\n      a = [];\n\n  for (var i = 0; i < l; i++) {\n    var item = arr[i];\n\n    if (a.indexOf(item) === -1) {\n      a.push(item);\n    }\n  }\n\n  return a;\n}\n\nexports.arrayUnique = arrayUnique;\n/**\n * Creates a temporary block in which one of the global settings is temporarily modified while\n * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\n * answer for a period you would set PARSE2NUMBER to true in the block.\n * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\n * @param settingsName\n * @param {Function} f\n * @param {boolean} opt - The value of the setting in the block\n * @param {string} obj - The obj of interest. Usually a Symbol but could be any object\n */\n\nfunction block(settingsName, f, opt, obj) {\n  var current_setting = Settings_1.Settings[settingsName];\n  Settings_1.Settings[settingsName] = opt === undefined ? true : !!opt;\n  var retVal = f.call(obj);\n  Settings_1.Settings[settingsName] = current_setting;\n  return retVal;\n}\n\nexports.block = block;\n\nfunction build(symbol, arg_array) {\n  return Build_1.Build.build(symbol, arg_array);\n}\n\nexports.build = build;\n/**\n * Sorts and array given 2 parameters\n * @param {String} a\n * @param {String} b\n */\n\nfunction comboSort(a, b) {\n  var l = a.length;\n  var combined = []; //the linker\n\n  for (var i = 0; i < a.length; i++) {\n    combined.push([a[i], b[i]]); //create the map\n  }\n\n  combined.sort(function (x, y) {\n    return x[0] - y[0];\n  });\n  var na = [],\n      nb = [];\n\n  for (var _i = 0; _i < l; _i++) {\n    na.push(combined[_i][0]);\n    nb.push(combined[_i][1]);\n  }\n\n  return [na, nb];\n}\n\nexports.comboSort = comboSort;\n/**\n * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\n * @param {Symbol} sym1\n * @param {Symbol} sym2\n * @param {string[]} vars - an optional array of variables to use\n * @returns {boolean}\n */\n\nfunction compare(sym1, sym2, vars) {\n  var n = 5; //a random number between 1 and 5 is good enough\n\n  var scope = {}; // scope object with random numbers generated using vars\n\n  var comparison;\n\n  for (var i = 0; i < vars.length; i++) {\n    scope[vars[i]] = new Symbol_1.Symbol(Math.floor(Math.random() * n) + 1);\n  }\n\n  block('PARSE2NUMBER', function () {\n    comparison = (0, Parser_1.parse)(sym1, scope).equals((0, Parser_1.parse)(sym2, scope));\n  }, false);\n  return comparison;\n}\n\nexports.compare = compare;\n\nfunction convertToVector(x) {\n  if (isArray(x)) {\n    var vector = new Vector_1.Vector([]);\n\n    for (var i = 0; i < x.length; i++) {\n      vector.elements.push(convertToVector(x[i]));\n    }\n\n    return vector;\n  } //Ensure that a nerdamer ready object is returned\n\n\n  if (!isSymbol(x)) {\n    return (0, Parser_1.parse)(x);\n  }\n\n  return x;\n}\n\nexports.convertToVector = convertToVector;\n/**\n * the Parser uses this to check if it's allowed to convert the obj to type Symbol\n * @param {Object} obj\n * @returns {boolean}\n */\n\nfunction customType(obj) {\n  return obj !== undefined && obj.custom;\n}\n\nexports.customType = customType;\n/**\n * Loops through each item in object and calls function with item as param\n * @param {Object|Array} obj\n * @param {Function} fn\n */\n\nfunction each(obj, fn) {\n  if (isArray(obj)) {\n    var l = obj.length;\n\n    for (var i = 0; i < l; i++) {\n      fn.call(obj, i);\n    }\n  } else {\n    for (var x in obj) {\n      if (obj.hasOwnProperty(x)) {\n        fn.call(obj, x);\n      }\n    }\n  }\n}\n\nexports.each = each;\n/**\n * As the name states. It forces evaluation of the expression\n * @param {Symbol} symbol\n * @param {Symbol} o\n */\n\nfunction evaluate(symbol) {\n  var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  return block('PARSE2NUMBER', function () {\n    return (0, Parser_1.parse)(symbol, o);\n  }, true);\n}\n\nexports.evaluate = evaluate;\n/**\n * Checks to see if a number is an even number\n * @param {Number} num\n * @returns {boolean}\n */\n\nfunction even(num) {\n  return num % 2 === 0;\n}\n\nexports.even = even;\n/**\n * Checks to see if a fraction is divisible by 2\n * @param {number} num\n * @returns {boolean}\n */\n\nfunction evenFraction(num) {\n  return 1 / (num % 1) % 2 === 0;\n}\n\nexports.evenFraction = evenFraction;\n/**\n * Fills holes in an array with zero symbol or generates one with n zeroes\n * @param {Array} arr\n * @param {Number} n\n */\n\nfunction fillHoles(arr, n) {\n  n = n || arr.length;\n\n  for (var i = 0; i < n; i++) {\n    var sym = arr[i];\n\n    if (!sym) {\n      arr[i] = new Symbol_1.Symbol(0);\n    }\n  }\n\n  return arr;\n}\n\nexports.fillHoles = fillHoles;\n/**\n * Returns the first encountered item in an object. Items do not have a fixed order in objects\n * so only use if you need any first random or if there's only one item in the object\n * @param {object} obj\n * @param {boolean} key Return this key as first object\n * @param {boolean} both\n * @returns {*}\n */\n\nfunction firstObject(obj) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var both = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  for (var x in obj) {\n    if (key) {\n      return x;\n    }\n\n    if (both) {\n      return {\n        key: x,\n        obj: obj[x]\n      };\n    }\n\n    return obj[x];\n  }\n\n  return null;\n}\n\nexports.firstObject = firstObject;\n/**\n * A helper function to replace multiple occurences in a string. Takes multiple arguments\n * @example format('{0} nice, {0} sweet', 'something')\n * //returns 'something nice, something sweet'\n */\n\nfunction format(str) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return str.replace(/{(\\d+)}/g, function (match, index) {\n    var arg = args[index];\n    return typeof arg === 'function' ? arg() : arg;\n  });\n}\n\nexports.format = format;\n/**\n * Generates prime numbers up to a specified number\n * @param {Number} upto\n */\n\nfunction generatePrimes(upto) {\n  //get the last prime in the array\n  var last_prime = Math_consts_1.PRIMES[Math_consts_1.PRIMES.length - 1] || 2; //no need to check if we've already encountered the number. Just check the cache.\n\n  for (var i = last_prime; i < upto; i++) {\n    if (isPrime(i)) {\n      Math_consts_1.PRIMES.push(i);\n    }\n  }\n}\n\nexports.generatePrimes = generatePrimes;\n/**\n * @param {String} str\n * @returns {String} - returns a formatted string surrounded by brackets\n */\n\nfunction inBrackets(str) {\n  return '(' + str + ')';\n}\n\nexports.inBrackets = inBrackets;\n/**\n * Checks to see if the object provided is an Array\n * @param {Object} arr\n */\n\nfunction isArray(arr) {\n  return Array.isArray(arr);\n}\n\nexports.isArray = isArray;\n/**\n * Checks to see if the object provided is a Matrix\n * @param {Object} obj\n */\n\nfunction isMatrix(obj) {\n  return obj instanceof Matrix_1.Matrix;\n}\n\nexports.isMatrix = isMatrix;\n/**\n * Checks to see if the object provided is an Expression\n * @param {Object} obj\n */\n\nfunction isExpression(obj) {\n  return obj instanceof Expression_1.Expression;\n}\n\nexports.isExpression = isExpression;\n/**\n * Checks to see if the object provided is a Symbol\n * @param {Object} obj\n */\n\nfunction isSymbol(obj) {\n  return obj instanceof Symbol_1.Symbol;\n}\n\nexports.isSymbol = isSymbol;\n/**\n * Checks to see if a number is an integer\n * @param {number} value\n */\n\nfunction isInt(value) {\n  return /^[-+]?\\d+e?\\+?\\d*$/gim.test(value.toString());\n}\n\nexports.isInt = isInt;\n/**\n * Checks if number is a prime number\n * @param {Number} n - the number to be checked\n */\n\nfunction isPrime(n) {\n  var q = Math.floor(Math.sqrt(n));\n\n  for (var i = 2; i <= q; i++) {\n    if (n % i === 0) return false;\n  }\n\n  return true;\n}\n\nexports.isPrime = isPrime;\n/**\n * Checks if n is a number\n * @param {any} n\n */\n\nfunction isNumber(n) {\n  return /^\\d+\\.?\\d*$/.test(n);\n}\n\nexports.isNumber = isNumber;\n/**\n * Generates an object with known variable value for evaluation\n * @param key\n * @param {any} value Any stringifyable object\n * @returns {Object}\n */\n\nfunction knownVariable(key, value) {\n  var o = {};\n  o[key] = value;\n  return o;\n}\n\nexports.knownVariable = knownVariable;\n/**\n * Rounds a number up to x decimal places\n * @param {number} x\n * @param {number} s\n */\n\nfunction nround(x, s) {\n  if (isInt(x)) {\n    var xn = Number(x);\n\n    if (xn >= Number.MAX_VALUE) {\n      return x.toString();\n    }\n\n    return Number(x);\n  }\n\n  s = s === undefined ? 14 : s;\n  return Math.round(Number(x) * Math.pow(10, s)) / Math.pow(10, s);\n}\n\nexports.nround = nround;\n/**\n * Enforces rule: \"must start with a letter or underscore and\n * can have any number of underscores, letters, and numbers thereafter.\"\n * @param {string} name The name of the symbol being checked\n * @param {string} typ - The type of symbols that's being validated\n * @throws {InvalidVariableNameError}  - Throws an exception on fail\n */\n\nfunction validateName(name) {\n  var typ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'variable';\n  if (Settings_1.Settings.ALLOW_CHARS.indexOf(name) !== -1) return;\n  var regex = Settings_1.Settings.VALIDATION_REGEX;\n\n  if (!regex.test(name)) {\n    throw new Errors_1.InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\n  }\n}\n\nexports.validateName = validateName;\n/**\n * Used to pass warnings or low severity errors about the library\n * @param msg\n */\n\nexports.WARNINGS = [];\n\nfunction warn(msg) {\n  exports.WARNINGS.push(msg);\n\n  if (Settings_1.Settings.SHOW_WARNINGS && console && console.warn) {\n    console.warn(msg);\n  }\n}\n\nexports.warn = warn;\n/**\n * Removes an item from either an array or an object. If the object is an array, the index must be\n * specified after the array. If it's an object then the key must be specified\n * @param {Object|Array} obj\n * @param {Integer} indexOrKey\n */\n\nfunction remove(obj, indexOrKey) {\n  var result;\n\n  if (Array.isArray(obj) && typeof indexOrKey === 'number') {\n    result = obj.splice(indexOrKey, 1)[0];\n  } else {\n    result = obj[indexOrKey];\n    delete obj[indexOrKey];\n  }\n\n  return result;\n}\n\nexports.remove = remove;\n/**\n * Checks to see if a symbol is a variable with no multiplier nor power\n * @param {Symbol} symbol\n */\n\nfunction isVariableSymbol(symbol) {\n  return symbol.group === Groups_1.Groups.S && symbol.multiplier.equals(1) && symbol.power.equals(1);\n}\n\nexports.isVariableSymbol = isVariableSymbol;\n/**\n *\n * Checks to see if the object provided is a Vector\n * @param {Object} obj\n */\n\nfunction isVector(obj) {\n  return obj instanceof Vector_1.Vector;\n}\n\nexports.isVector = isVector;\n/**\n * Generates an array with values within a range. Multiplies by a step if provided\n * @param {Number} start\n * @param {Number} end\n * @param {Number} step\n */\n\nfunction range(start, end) {\n  var step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var arr = [];\n  step = step || 1;\n\n  for (var i = start; i <= end; i++) {\n    arr.push(i * step);\n  }\n\n  return arr;\n}\n\nexports.range = range;\n/*\n * Debugging method used to better visualize vector and arrays\n * @param {object} o\n * @returns {String}\n */\n\nfunction pretty_print(o) {\n  if (Array.isArray(o)) {\n    var s = o.map(function (x) {\n      return pretty_print(x);\n    }).join(', ');\n\n    if (o.type === 'vector') {\n      return 'vector<' + s + '>';\n    }\n\n    return '(' + s + ')';\n  }\n\n  return o.toString();\n}\n\nexports.pretty_print = pretty_print;\n/**\n * Checks to see if all arguments are numbers\n * @param {Symbol[]} args\n */\n\nfunction allNumbers(args) {\n  for (var i = 0; i < args.length; i++) {\n    if (args[i].group !== Groups_1.Groups.N) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.allNumbers = allNumbers;\n/*\n * Checks if all arguments aren't just all number but if they\n * are constants as well e.g. pi, e.\n * @param {object} args\n */\n\nfunction allConstants(args) {\n  for (var i = 0; i < args.length; i++) {\n    if (args[i].isPi() || args[i].isE()) {\n      continue;\n    }\n\n    if (!args[i].isConstant(true)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.allConstants = allConstants;\n/**\n * Checks to see if numbers are both negative or are both positive\n * @param {Number} a\n * @param {Number} b\n * @returns {boolean}\n */\n\nfunction sameSign(a, b) {\n  return a < 0 === b < 0;\n}\n\nexports.sameSign = sameSign;\n/**\n * A helper function to replace parts of string\n * @param {String} str - The original string\n * @param {Integer} from - The starting index\n * @param {Integer} to - The ending index\n * @param {String} with_str - The replacement string\n * @returns {String} - A formatted string\n */\n\nfunction stringReplace(str, from, to, with_str) {\n  return str.substr(0, from) + with_str + str.substr(to, str.length);\n}\n\nexports.stringReplace = stringReplace;\n\nfunction text(obj, option, useGroup, decp) {\n  return (0, Text_1.text)(obj, option, useGroup, decp);\n}\n\nexports.text = text;\n/**\n * Returns an array of all the keys in an array\n * @param {Object} obj\n * @returns {Array}\n */\n\nexports.keys = Object.keys;\n/**\n * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\n * names are then returned in alphabetical order.\n * @param {Symbol} obj\n * @param {Boolean} poly\n * @param {Object} vars - An object containing the variables. Do not pass this in as it generated\n * automatically. In the future this will be a Collector object.\n * @returns {String[]} - An array containing variable names\n */\n\nfunction variables(obj) {\n  var poly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var vars = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!isSymbol(obj)) {\n    return vars ? vars.c.sort() : [];\n  }\n\n  return obj.variables(poly, vars);\n}\n\nexports.variables = variables;","map":{"version":3,"mappings":"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","names":["Object","enumerable","get","Utils_js_1","Utils_Symbol_1","allSame","arr","last","i","l","length","equals","exports","allNumeric","isNumber","arguments2Array","obj","slice","call","arrayAddSlices","slices","retval","c","delta","e","push","j","arrayClone","new_array","clone","arrayGetVariables","vars","isSymbol","concat","variables","arrayUnique","sort","arrayMax","Math","max","arrayMin","min","arrayEqual","arr1","arr2","a","item","indexOf","block","settingsName","f","opt","current_setting","Settings_1","undefined","retVal","build","symbol","arg_array","Build_1","comboSort","b","combined","x","y","na","nb","compare","sym1","sym2","n","scope","comparison","Symbol_1","floor","random","convertToVector","isArray","vector","Vector_1","elements","customType","custom","each","fn","hasOwnProperty","evaluate","o","even","num","evenFraction","fillHoles","sym","firstObject","key","both","format","str","args","replace","match","index","arg","generatePrimes","upto","last_prime","Math_consts_1","isPrime","inBrackets","Array","isMatrix","Matrix_1","isExpression","Expression_1","isInt","value","test","toString","q","sqrt","knownVariable","nround","s","xn","Number","MAX_VALUE","round","pow","validateName","name","typ","ALLOW_CHARS","regex","VALIDATION_REGEX","Errors_1","warn","msg","SHOW_WARNINGS","console","remove","indexOrKey","result","splice","isVariableSymbol","group","Groups_1","S","multiplier","power","isVector","range","start","end","step","pretty_print","map","join","type","allNumbers","N","allConstants","isPi","isE","isConstant","sameSign","stringReplace","from","to","with_str","substr","text","option","useGroup","decp","keys","poly"],"sourceRoot":"","sources":["../../src/Core/Utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
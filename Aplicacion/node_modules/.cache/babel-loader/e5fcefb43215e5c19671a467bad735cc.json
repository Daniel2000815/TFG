{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { sinhNumber } from '../../plain/number/index.js';\nvar name = 'sinh';\nvar dependencies = ['typed'];\nexport var createSinh = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\r\n   * Calculate the hyperbolic sine of a value,\r\n   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic sine, this function does\r\n   * not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sinh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sinh(0.5)       // returns number 0.5210953054937474\r\n   *\r\n   * See also:\r\n   *\r\n   *    cosh, tanh\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic sine of x\r\n   */\n\n  return typed(name, {\n    number: sinhNumber,\n    'Complex | BigNumber': function ComplexBigNumber(x) {\n      return x.sinh();\n    }\n  });\n});","map":{"version":3,"names":["factory","sinhNumber","name","dependencies","createSinh","_ref","typed","number","x","sinh"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/mathjs/lib/esm/function/trigonometry/sinh.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { sinhNumber } from '../../plain/number/index.js';\r\nvar name = 'sinh';\r\nvar dependencies = ['typed'];\r\nexport var createSinh = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the hyperbolic sine of a value,\r\n   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic sine, this function does\r\n   * not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sinh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sinh(0.5)       // returns number 0.5210953054937474\r\n   *\r\n   * See also:\r\n   *\r\n   *    cosh, tanh\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic sine of x\r\n   */\r\n  return typed(name, {\r\n    number: sinhNumber,\r\n    'Complex | BigNumber': x => x.sinh()\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACzE,IACEC,KADF,GAEID,IAFJ,CACEC,KADF;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOA,KAAK,CAACJ,IAAD,EAAO;IACjBK,MAAM,EAAEN,UADS;IAEjB,uBAAuB,0BAAAO,CAAC;MAAA,OAAIA,CAAC,CAACC,IAAF,EAAJ;IAAA;EAFP,CAAP,CAAZ;AAID,CA/B6C,CAAvC"},"metadata":{},"sourceType":"module"}
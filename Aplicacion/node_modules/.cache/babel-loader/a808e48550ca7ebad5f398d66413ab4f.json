{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.expandall = exports.expand = void 0;\n\nvar Utils_1 = require(\"../../../Core/Utils\");\n\nvar Symbol_1 = require(\"../../../Types/Symbol\");\n\nvar Groups_1 = require(\"../../../Types/Groups\");\n\nvar index_1 = require(\"../index\");\n\nvar Parser_1 = require(\"../../../Parser/Parser\");\n/**\n * Expands a symbol\n * @param symbol\n */\n// Old expand\n\n\nfunction expand(symbol) {\n  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n  if (Array.isArray(symbol)) {\n    return symbol.map(function (x) {\n      return expand(x, opt);\n    });\n  }\n\n  opt = opt || {}; //deal with parenthesis\n\n  if (symbol.group === Groups_1.Groups.FN && symbol.fname === '') {\n    var f = expand(symbol.args[0], opt);\n    var x = expand((0, index_1.pow)(f, (0, Parser_1.parse)(symbol.power)), opt);\n    return (0, index_1.multiply)((0, Parser_1.parse)(symbol.multiplier), x).distributeMultiplier();\n  } // We can expand these groups so no need to waste time. Just return and be done.\n\n\n  if ([Groups_1.Groups.N, Groups_1.Groups.P, Groups_1.Groups.S].indexOf(symbol.group) !== -1) {\n    return symbol; //nothing to do\n  }\n\n  var original = symbol.clone(); // Set up a try-catch block. If anything goes wrong then we simply return the original symbol\n\n  try {\n    // Store the power and multiplier\n    var m = symbol.multiplier.toString();\n    var p = Number(symbol.power);\n    var retval = symbol; // Handle (a+b)^2 | (x+x^2)^2\n\n    if (symbol.isComposite() && (0, Utils_1.isInt)(symbol.power) && symbol.power > 0) {\n      var n = p - 1; // Strip the expression of it's multiplier and power. We'll call it f. The power will be p and the multiplier m.\n\n      var f = new Symbol_1.Symbol(0);\n      symbol.each(function (x) {\n        f = (0, index_1.add)(f, expand((0, Parser_1.parse)(x), opt));\n      });\n      var expanded = (0, Parser_1.parse)(f);\n\n      for (var i = 0; i < n; i++) {\n        expanded = mix(expanded, f, opt);\n      }\n\n      retval = (0, index_1.multiply)((0, Parser_1.parse)(m), expanded).distributeMultiplier();\n    } else if (symbol.group === Groups_1.Groups.FN && opt.expand_functions === true) {\n      var args = []; // Expand function the arguments\n\n      symbol.args.forEach(function (x) {\n        args.push(expand(x, opt));\n      }); // Put back the power and multiplier\n\n      retval = (0, index_1.pow)((0, Symbol_1.symfunction)(symbol.fname, args), (0, Parser_1.parse)(symbol.power));\n      retval = (0, index_1.multiply)(retval, (0, Parser_1.parse)(symbol.multiplier));\n    } else if (symbol.isComposite() && (0, Utils_1.isInt)(symbol.power) && symbol.power < 0 && opt.expand_denominator === true) {\n      // Invert it. Expand it and then re-invert it.\n      symbol = symbol.invert();\n      retval = expand(symbol, opt);\n      retval.invert();\n    } else if (symbol.group === Groups_1.Groups.CB) {\n      var rank = function rank(s) {\n        switch (s.group) {\n          case Groups_1.Groups.CP:\n            return 0;\n\n          case Groups_1.Groups.PL:\n            return 1;\n\n          case Groups_1.Groups.CB:\n            return 2;\n\n          case Groups_1.Groups.FN:\n            return 3;\n\n          default:\n            return 4;\n        }\n      }; // Consider (a+b)(c+d). The result will be (a*c+a*d)+(b*c+b*d).\n      // We start by moving collecting the symbols. We want others>FN>CB>PL>CP\n\n\n      var symbols = symbol.collectSymbols().sort(function (a, b) {\n        return rank(b) - rank(a);\n      }) // Distribute the power to each symbol and expand\n      .map(function (s) {\n        var x = (0, index_1.pow)(s, (0, Parser_1.parse)(p));\n        var e = expand(x, opt);\n        return e;\n      });\n      var f = symbols.pop(); // If the first symbols isn't a composite then we're done\n\n      if (f.isComposite() && f.isLinear()) {\n        symbols.forEach(function (s) {\n          f = mix(f, s, opt);\n        }); // If f is of group PL or CP then we can expand some more\n\n        if (f.isComposite()) {\n          if (f.power > 1) {\n            f = expand((0, index_1.pow)(f, (0, Parser_1.parse)(f.power)), opt);\n          } // Put back the multiplier\n\n\n          retval = (0, index_1.multiply)((0, Parser_1.parse)(m), f).distributeMultiplier();\n        } else {\n          // Everything is expanded at this point so if it's still a CB\n          // then just return the symbol\n          retval = f;\n        }\n      } else {\n        // Just multiply back in the expanded form of each\n        retval = f;\n        symbols.forEach(function (s) {\n          retval = (0, index_1.multiply)(retval, s);\n        }); // Put back the multiplier\n\n        retval = (0, index_1.multiply)(retval, (0, Parser_1.parse)(m)).distributeMultiplier();\n      } // TODO: This exists solely as a quick fix for sqrt(11)*sqrt(33) not simplifying.\n\n\n      if (retval.group === Groups_1.Groups.CB) {\n        retval = (0, Parser_1.parse)(retval);\n      }\n    } else {\n      // Otherwise just return the expression\n      retval = symbol;\n    } // Final cleanup and return\n\n\n    return retval;\n  } catch (e) {\n    return original;\n  }\n}\n\nexports.expand = expand;\n/**\n * A wrapper for the expand function\n * @param {Symbol} symbol\n * @returns {Symbol}\n */\n\nfunction expandall(symbol, opt) {\n  opt = opt || {\n    expand_denominator: true,\n    expand_functions: true\n  };\n  return expand(symbol, opt);\n}\n\nexports.expandall = expandall;\n/**\n * Used to multiply two expression in expanded form\n * @param {Symbol} a\n * @param {Symbol} b\n */\n\nfunction mix(a, b, opt) {\n  // Flip them if b is a CP or PL and a is not\n  if (b.isComposite() && !a.isComposite() || b.isLinear() && !a.isLinear()) {\n    var _ref = [b, a];\n    a = _ref[0];\n    b = _ref[1];\n  } // A temporary variable to hold the expanded terms\n\n\n  var t = new Symbol_1.Symbol(0);\n\n  if (a.isLinear()) {\n    a.each(function (x) {\n      // If b is not a PL or a CP then simply multiply it\n      if (!b.isComposite()) {\n        var term = (0, index_1.multiply)((0, Parser_1.parse)(x), (0, Parser_1.parse)(b));\n        t = (0, index_1.add)(t, expand(term, opt));\n      } // Otherwise multiply out each term.\n      else if (b.isLinear()) {\n        b.each(function (y) {\n          var term = (0, index_1.multiply)((0, Parser_1.parse)(x), (0, Parser_1.parse)(y));\n          var expanded = expand((0, Parser_1.parse)(term), opt);\n          t = (0, index_1.add)(t, expanded);\n        }, true);\n      } else {\n        t = (0, index_1.add)(t, (0, index_1.multiply)(x, (0, Parser_1.parse)(b)));\n      }\n    }, true);\n  } else {\n    // Just multiply them together\n    t = (0, index_1.multiply)(a, b);\n  } // The expanded function is now t\n\n\n  return t;\n}","map":{"version":3,"mappings":"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","names":["expand","symbol","opt","undefined","Array","isArray","map","x","group","Groups_1","FN","fname","f","args","power","multiplier","distributeMultiplier","N","P","S","indexOf","original","clone","m","toString","p","Number","retval","isComposite","n","Symbol_1","each","expanded","i","mix","expand_functions","forEach","push","expand_denominator","invert","CB","rank","s","CP","PL","symbols","collectSymbols","sort","a","b","e","pop","isLinear","exports","expandall","t","term","y"],"sourceRoot":"","sources":["../../../../src/Functions/Core/math/expand.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
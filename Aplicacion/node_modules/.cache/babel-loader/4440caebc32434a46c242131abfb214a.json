{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractFactory = void 0;\n\nvar AbstractFactory = function () {\n  function AbstractFactory(nodes) {\n    var e_1, _a;\n\n    if (nodes === void 0) {\n      nodes = null;\n    }\n\n    this.defaultKind = 'unknown';\n    this.nodeMap = new Map();\n    this.node = {};\n\n    if (nodes === null) {\n      nodes = this.constructor.defaultNodes;\n    }\n\n    try {\n      for (var _b = __values(Object.keys(nodes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var kind = _c.value;\n        this.setNodeClass(kind, nodes[kind]);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  }\n\n  AbstractFactory.prototype.create = function (kind) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    return (this.node[kind] || this.node[this.defaultKind]).apply(void 0, __spreadArray([], __read(args), false));\n  };\n\n  AbstractFactory.prototype.setNodeClass = function (kind, nodeClass) {\n    this.nodeMap.set(kind, nodeClass);\n    var THIS = this;\n    var KIND = this.nodeMap.get(kind);\n\n    this.node[kind] = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return new (KIND.bind.apply(KIND, __spreadArray([void 0, THIS], __read(args), false)))();\n    };\n  };\n\n  AbstractFactory.prototype.getNodeClass = function (kind) {\n    return this.nodeMap.get(kind);\n  };\n\n  AbstractFactory.prototype.deleteNodeClass = function (kind) {\n    this.nodeMap.delete(kind);\n    delete this.node[kind];\n  };\n\n  AbstractFactory.prototype.nodeIsKind = function (node, kind) {\n    return node instanceof this.getNodeClass(kind);\n  };\n\n  AbstractFactory.prototype.getKinds = function () {\n    return Array.from(this.nodeMap.keys());\n  };\n\n  AbstractFactory.defaultNodes = {};\n  return AbstractFactory;\n}();\n\nexports.AbstractFactory = AbstractFactory;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;EAyBE,yBAAYA,KAAZ,EAA6C;;;IAAjC;MAAAA;IAAiC;;IAftC,mBAAc,SAAd;IAKG,eAA0B,IAAIC,GAAJ,EAA1B;IAKA,YAAgD,EAAhD;;IAMR,IAAID,KAAK,KAAK,IAAd,EAAoB;MAClBA,KAAK,GAAI,KAAKE,WAAL,CAAgDC,YAAzD;IACD;;;MACD,KAAmB,wBAAM,CAACC,IAAP,CAAYJ,KAAZ,IAAkBK,cAArC,EAAqC,QAArC,EAAqCA,cAArC,EAAuC;QAAlC,IAAMC,IAAI,WAAV;QACH,KAAKC,YAAL,CAAkBD,IAAlB,EAAwBN,KAAK,CAACM,IAAD,CAA7B;MACD;;;;;;;;;;;;EACF;;EAKME,mCAAP,UAAcF,IAAd,EAA0B;IAAE;;SAAA,yCAAc;MAAdG;;;IAC1B,OAAO,CAAC,KAAKC,IAAL,CAAUJ,IAAV,KAAmB,KAAKI,IAAL,CAAU,KAAKC,WAAf,CAApB,EAAgDC,KAAhD,CAAgD,MAAhD,EAAgDC,yBAAIJ,IAAJ,GAAQ,KAAR,CAAhD,CAAP;EACD,CAFM;;EAOAD,yCAAP,UAAoBF,IAApB,EAAkCQ,SAAlC,EAA8C;IAC5C,KAAKC,OAAL,CAAaC,GAAb,CAAiBV,IAAjB,EAAuBQ,SAAvB;IACA,IAAIG,IAAI,GAAG,IAAX;IACA,IAAIC,IAAI,GAAG,KAAKH,OAAL,CAAaI,GAAb,CAAiBb,IAAjB,CAAX;;IACA,KAAKI,IAAL,CAAUJ,IAAV,IAAkB;MAAC;;WAAA,yCAAc;QAAdG;;;MACjB,YAAWS,IAAI,KAAJ,CAAIN,KAAJ,OAAIC,uBAACI,IAAD,GAAKG,OAAKX,IAAL,CAAL,EAAc,KAAd,CAAJ,CAAX;IACD,CAFD;EAGD,CAPM;;EAWAD,yCAAP,UAAoBF,IAApB,EAAgC;IAC9B,OAAO,KAAKS,OAAL,CAAaI,GAAb,CAAiBb,IAAjB,CAAP;EACD,CAFM;;EAOAE,4CAAP,UAAuBF,IAAvB,EAAmC;IACjC,KAAKS,OAAL,CAAaM,MAAb,CAAoBf,IAApB;IACA,OAAO,KAAKI,IAAL,CAAUJ,IAAV,CAAP;EACD,CAHM;;EAQAE,uCAAP,UAAkBE,IAAlB,EAA2BJ,IAA3B,EAAuC;IACrC,OAAQI,IAAI,YAAY,KAAKY,YAAL,CAAkBhB,IAAlB,CAAxB;EACD,CAFM;;EAOAE,qCAAP;IACE,OAAOe,KAAK,CAACC,IAAN,CAAW,KAAKT,OAAL,CAAaX,IAAb,EAAX,CAAP;EACD,CAFM;;EAxEOI,+BAAe,EAAf;EA4EhB;AAAC,CAjFD;;AAAsBiB","names":["nodes","Map","constructor","defaultNodes","keys","_c","kind","setNodeClass","AbstractFactory","args","node","defaultKind","apply","__spreadArray","nodeClass","nodeMap","set","THIS","KIND","get","__read","delete","getNodeClass","Array","from","exports"],"sourceRoot":"","sources":["../../../ts/core/Tree/Factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
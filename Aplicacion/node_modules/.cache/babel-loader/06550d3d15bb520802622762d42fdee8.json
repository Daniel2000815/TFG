{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.multiply = void 0;\n\nvar Symbol_1 = require(\"../../../Types/Symbol\");\n\nvar Collection_1 = require(\"../../../Parser/Collection\");\n\nvar Errors_1 = require(\"../../../Core/Errors\");\n\nvar Settings_1 = require(\"../../../Settings\");\n\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\n\nvar Groups_1 = require(\"../../../Types/Groups\");\n\nvar Frac_1 = require(\"../../../Types/Frac\");\n\nvar divide_1 = require(\"./divide\");\n\nvar Utils_1 = require(\"../../../Core/Utils\");\n\nvar subtract_1 = require(\"./subtract\");\n\nvar add_1 = require(\"./add\");\n\nvar pow_1 = require(\"./pow\");\n\nvar Text_1 = require(\"../../../Core/Text\");\n\nvar Matrix_1 = require(\"../../../Types/Matrix\");\n\nvar index_1 = require(\"../index\");\n\nvar Parser_1 = require(\"../../../Parser/Parser\");\n/**\n * Gets called when the parser finds the * operator. See this.add\n * @param {Symbol} a\n * @param {Symbol} b\n * @returns {Symbol}\n */\n\n\nfunction multiply(a, b) {\n  var aIsSymbol = (0, Utils_1.isSymbol)(a),\n      bIsSymbol = (0, Utils_1.isSymbol)(b); //we're dealing with function assignment here\n\n  if (aIsSymbol && b instanceof Collection_1.Collection) {\n    b.elements.push(a);\n    return b;\n  }\n\n  if (aIsSymbol && bIsSymbol) {\n    //if it has a unit then add it and return it right away.\n    if (b.isUnit) {\n      var result = a.clone();\n      a.unit = b;\n      return result;\n    } //if it has units then just forward that problem to the unit module\n\n\n    if (a.unit || b.unit) {\n      return deps.Unit.multiply(a, b);\n    } //handle Infinty\n\n\n    if (a.isInfinity || b.isInfinity) {\n      if (a.equals(0) || b.equals(0)) throw new Errors_1.UndefinedError(a + '*' + b + ' is undefined!'); //x/infinity\n\n      if (b.power.lessThan(0)) {\n        if (!a.isInfinity) {\n          return new Symbol_1.Symbol(0);\n        } else {\n          throw new Errors_1.UndefinedError('Infinity/Infinity is not defined!');\n        }\n      }\n\n      var sign = a.multiplier.multiply(b.multiplier).sign(),\n          inf = Symbol_1.Symbol.infinity();\n\n      if (a.isConstant() || b.isConstant() || a.isInfinity && b.isInfinity) {\n        if (sign < 0) inf.negate();\n        return inf;\n      }\n    } //the quickies\n\n\n    if (a.isConstant() && b.isConstant() && Settings_1.Settings.PARSE2NUMBER) {\n      var t = new decimal_js_1.default(a.multiplier.toDecimal()).times(new decimal_js_1.default(b.multiplier.toDecimal())).toFixed();\n      var retval = new Symbol_1.Symbol(t);\n      return retval;\n    } //don't waste time\n\n\n    if (a.isOne()) {\n      return b.clone();\n    }\n\n    if (b.isOne()) {\n      return a.clone();\n    }\n\n    if (a.multiplier.equals(0) || b.multiplier.equals(0)) return new Symbol_1.Symbol(0);\n    if (b.group > a.group && !(b.group === Groups_1.Groups.CP)) return multiply(b, a); //correction for PL/CB dilemma\n\n    if (a.group === Groups_1.Groups.CB && b.group === Groups_1.Groups.PL && a.value === b.value) {\n      var t = a;\n      a = b;\n      b = t; //swap\n    }\n\n    var g1 = a.group,\n        g2 = b.group,\n        bnum = b.multiplier.num,\n        bden = b.multiplier.den;\n\n    if (g1 === Groups_1.Groups.FN && a.fname === Settings_1.Settings.SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\n      //unwrap sqrt\n      var a_pow = a.power;\n      var a_multiplier = (0, Parser_1.parse)(a.multiplier);\n      a = multiply(a_multiplier, a.args[0].clone());\n      a.setPower(new Frac_1.Frac(0.5).multiply(a_pow));\n      g1 = a.group;\n    } //simplify n/sqrt(n). Being very specific\n    else if (g1 === Groups_1.Groups.FN && a.fname === Settings_1.Settings.SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\n      a = (0, Symbol_1.symfunction)(Settings_1.Settings.SQRT, [b.clone()]);\n      b = new Symbol_1.Symbol(1);\n    }\n\n    ;\n    var v1 = a.value,\n        v2 = b.value,\n        sign = new Frac_1.Frac(a.sign()),\n        //since Groups.P is just a morphed version of Groups.N we need to see if they relate\n    ONN = g1 === Groups_1.Groups.P && g2 === Groups_1.Groups.N && b.multiplier.equals(a.value),\n        //don't multiply the multiplier of b since that's equal to the value of a\n    m = ONN ? new Frac_1.Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\n        result = a.clone().toUnitMultiplier();\n    b = b.clone().toUnitMultiplier(true); //further simplification of sqrt\n\n    if (g1 === Groups_1.Groups.FN && g2 === Groups_1.Groups.FN) {\n      var u = a.args[0].clone();\n      var v = b.args[0].clone();\n\n      if (a.fname === Settings_1.Settings.SQRT && b.fname === Settings_1.Settings.SQRT && a.isLinear() && b.isLinear()) {\n        var q = (0, divide_1.divide)(u, v).invert();\n\n        if (q.gt(1) && (0, Utils_1.isInt)(q)) {\n          //b contains a factor a which can be moved to a\n          result = multiply(a.args[0].clone(), (0, index_1.sqrt)(q.clone()));\n          b = new Symbol_1.Symbol(1);\n        }\n      } //simplify factorial but only if\n      //1 - It's division so b will have a negative power\n      //2 - We're not dealing with factorials of numbers\n      else if (a.fname === Settings_1.Settings.FACTORIAL && b.fname === Settings_1.Settings.FACTORIAL && !u.isConstant() && !v.isConstant() && b.power < 0) {\n        //assume that n = positive\n        var d = (0, subtract_1.subtract)(u.clone(), v.clone()); //if it's not numeric then we don't know if we can simplify so just return\n\n        if (d.isConstant()) {\n          //there will never be a case where d == 0 since this will already have\n          //been handled at the beginning of this function\n          t = new Symbol_1.Symbol(1);\n\n          if (d < 0) {\n            //If d is negative then the numerator is larger so expand that\n            for (var i = 0, n = Math.abs(d); i <= n; i++) {\n              var s = (0, add_1.add)(u.clone(), new Symbol_1.Symbol(i));\n              t = multiply(t, s);\n            }\n\n            result = multiply((0, pow_1.pow)(u, new Symbol_1.Symbol(a.power)), (0, pow_1.pow)(t, new Symbol_1.Symbol(b.power)));\n            b = new Symbol_1.Symbol(1);\n          } else {\n            //Otherwise the denominator is larger so expand that\n            for (var i = 0, n = Math.abs(d); i <= n; i++) {\n              var s = (0, add_1.add)(v.clone(), new Symbol_1.Symbol(i));\n              t = multiply(t, s);\n            }\n\n            result = multiply((0, pow_1.pow)(t, new Symbol_1.Symbol(a.power)), (0, pow_1.pow)(v, new Symbol_1.Symbol(b.power)));\n            b = new Symbol_1.Symbol(1);\n          }\n        }\n      }\n    } //if both are Groups.PL then their hashes have to match\n\n\n    if (v1 === v2 && g1 === Groups_1.Groups.PL && g1 === g2) {\n      v1 = a.text('hash');\n      v2 = b.text('hash');\n    } //same issue with (x^2+1)^x*(x^2+1)\n    //Groups.EX needs an exception when multiplying because it needs to recognize\n    //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\n\n\n    if (g2 === Groups_1.Groups.EX && b.previousGroup === Groups_1.Groups.PL && g1 === Groups_1.Groups.PL) {\n      v1 = (0, Text_1.text)(a, 'hash', Groups_1.Groups.EX);\n    }\n\n    if ((v1 === v2 || ONN) && !(g1 === Groups_1.Groups.PL && (g2 === Groups_1.Groups.S || g2 === Groups_1.Groups.P || g2 === Groups_1.Groups.FN)) && !(g1 === Groups_1.Groups.PL && g2 === Groups_1.Groups.CB)) {\n      var p1 = a.power,\n          p2 = b.power,\n          isSymbolP1 = (0, Utils_1.isSymbol)(p1),\n          isSymbolP2 = (0, Utils_1.isSymbol)(p2),\n          toEX = isSymbolP1 || isSymbolP2; //TODO: this needs cleaning up\n\n      if (g1 === Groups_1.Groups.PL && g2 !== Groups_1.Groups.PL && b.previousGroup !== Groups_1.Groups.PL && p1.equals(1)) {\n        result = new Symbol_1.Symbol(0);\n        a.each(function (x) {\n          result = (0, add_1.add)(result, multiply(x, b.clone()));\n        }, true);\n      } else {\n        //add the powers\n        result.power = toEX ? (0, add_1.add)(!(0, Utils_1.isSymbol)(p1) ? new Symbol_1.Symbol(p1) : p1, !(0, Utils_1.isSymbol)(p2) ? new Symbol_1.Symbol(p2) : p2) : g1 === Groups_1.Groups.N\n        /*don't add powers for Groups.N*/\n        ? p1 : p1.add(p2); //eliminate zero power values and convert them to numbers\n\n        if (result.power.equals(0)) result = result.convert(Groups_1.Groups.N); //properly convert to Groups.EX\n\n        if (toEX) result.convert(Groups_1.Groups.EX); //take care of imaginaries\n\n        if (a.imaginary && b.imaginary) {\n          var isEven = (0, Utils_1.even)(result.power % 2);\n\n          if (isEven) {\n            result = new Symbol_1.Symbol(1);\n            m.negate();\n          }\n        } //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\n\n\n        if (result.group !== Groups_1.Groups.EX && result.previousGroup) result.previousGroup = undefined; //the sign for b is floating around. Remember we are assuming that the odd variable will carry\n        //the sign but this isn't true if they're equals symbols\n\n        result.multiplier = result.multiplier.multiply(b.multiplier);\n      }\n    } else if (g1 === Groups_1.Groups.CB && a.isLinear()) {\n      if (g2 === Groups_1.Groups.CB) b.distributeExponent();\n\n      if (g2 === Groups_1.Groups.CB && b.isLinear()) {\n        for (var s in b.symbols) {\n          var x = b.symbols[s];\n          result = result.combine(x);\n        }\n\n        result.multiplier = result.multiplier.multiply(b.multiplier);\n      } else {\n        result.combine(b);\n      }\n    } else {\n      //the multiplier was already handled so nothing left to do\n      if (g1 !== Groups_1.Groups.N) {\n        if (g1 === Groups_1.Groups.CB) {\n          result.distributeExponent();\n          result.combine(b);\n        } else if (!b.isOne()) {\n          var bm = b.multiplier.clone();\n          b.toUnitMultiplier();\n          result = Symbol_1.Symbol.shell(Groups_1.Groups.CB).combine([result, b]); //transfer the multiplier to the outside\n\n          result.multiplier = result.multiplier.multiply(bm);\n        }\n      } else {\n        result = b.clone().toUnitMultiplier();\n      }\n    }\n\n    if (result.group === Groups_1.Groups.P) {\n      var logV = Math.log(result.value),\n          n1 = Math.log(bnum) / logV,\n          n2 = Math.log(bden) / logV,\n          ndiv = m.num / bnum,\n          ddiv = m.den / bden; //we don't want to divide by zero no do we? Strange things happen.\n\n      if (n1 !== 0 && (0, Utils_1.isInt)(n1) && (0, Utils_1.isInt)(ndiv)) {\n        result.power = result.power.add(new Frac_1.Frac(n1));\n        m.num /= bnum; //BigInt? Keep that in mind for the future.\n      }\n\n      if (n2 !== 0 && (0, Utils_1.isInt)(n2) && (0, Utils_1.isInt)(ddiv)) {\n        result.power = result.power.subtract(new Frac_1.Frac(n2));\n        m.den /= bden; //BigInt? Keep that in mind for the future.\n      }\n    } //unpack Groups.CB if length is only one\n\n\n    if (result.length === 1) {\n      var t = result.multiplier; //transfer the multiplier\n\n      result = (0, Utils_1.firstObject)(result.symbols);\n      result.multiplier = result.multiplier.multiply(t);\n    } //reduce square root\n\n\n    var ps = result.power.toString();\n\n    if ((0, Utils_1.even)(ps) && result.fname === Settings_1.Settings.SQRT) {\n      //grab the sign of the symbol\n      sign = sign * result.sign();\n      var p = result.power;\n      result = result.args[0];\n      result = multiply(new Symbol_1.Symbol(m), (0, pow_1.pow)(result, new Symbol_1.Symbol(p.divide(new Frac_1.Frac(2))))); //flip it back to the correct sign\n\n      if (sign < 0) result.negate();\n    } else {\n      result.multiplier = result.multiplier.multiply(m).multiply(sign);\n      if (result.group === Groups_1.Groups.CP && result.isImaginary()) result.distributeMultiplier();\n    } //back convert group Groups.P to a simpler group Groups.N if possible\n\n\n    if (result.group === Groups_1.Groups.P && (0, Utils_1.isInt)(result.power.toDecimal())) result = result.convert(Groups_1.Groups.N);\n    return result;\n  } else {\n    //****** Matrices & Vector *****//\n    if (bIsSymbol && !aIsSymbol) {\n      //keep symbols to the right\n      t = a;\n      a = b;\n      b = t; //swap\n\n      t = bIsSymbol;\n      bIsSymbol = aIsSymbol;\n      aIsSymbol = t;\n    }\n\n    var isMatrixB = (0, Utils_1.isMatrix)(b),\n        isMatrixA = (0, Utils_1.isMatrix)(a);\n\n    if (aIsSymbol && isMatrixB) {\n      var M = new Matrix_1.Matrix();\n      b.eachElement(function (e, i, j) {\n        M.set(i, j, multiply(a.clone(), e));\n      });\n      b = M;\n    } else {\n      if (isMatrixA && isMatrixB) {\n        b = a.multiply(b);\n      } else if (aIsSymbol && (0, Utils_1.isVector)(b)) {\n        b.each(function (x, i) {\n          i--;\n          b.elements[i] = multiply(a.clone(), b.elements[i]);\n        });\n      } else {\n        if ((0, Utils_1.isVector)(a) && (0, Utils_1.isVector)(b)) {\n          b.each(function (x, i) {\n            i--;\n            b.elements[i] = multiply(a.elements[i], b.elements[i]);\n          });\n        } else if ((0, Utils_1.isVector)(a) && (0, Utils_1.isMatrix)(b)) {\n          //try to convert a to a matrix\n          return multiply(b, a);\n        } else if ((0, Utils_1.isMatrix)(a) && (0, Utils_1.isVector)(b)) {\n          if (b.elements.length === a.rows()) {\n            var M = new Matrix_1.Matrix(),\n                l = a.cols();\n            b.each(function (e, i) {\n              var row = [];\n\n              for (var j = 0; j < l; j++) {\n                row.push(multiply(a.elements[i - 1][j].clone(), e.clone()));\n              }\n\n              M.elements.push(row);\n            });\n            return M;\n          } else (0, Errors_1.err)('Dimensions must match!');\n        }\n      }\n    }\n\n    return b;\n  }\n}\n\nexports.multiply = multiply;","map":{"version":3,"mappings":"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","names":["multiply","a","b","aIsSymbol","bIsSymbol","Collection_1","elements","push","isUnit","result","clone","unit","deps","Unit","isInfinity","equals","Errors_1","power","lessThan","Symbol_1","sign","multiplier","inf","infinity","isConstant","negate","Settings_1","PARSE2NUMBER","t","decimal_js_1","toDecimal","times","toFixed","retval","isOne","group","Groups_1","CP","CB","PL","value","g1","g2","bnum","num","bden","den","FN","fname","SQRT","args","a_pow","a_multiplier","setPower","Frac_1","v1","v2","ONN","P","N","m","abs","toUnitMultiplier","u","v","isLinear","q","invert","gt","FACTORIAL","d","i","n","Math","s","text","EX","previousGroup","S","p1","p2","isSymbolP1","isSymbolP2","toEX","each","x","add","convert","imaginary","isEven","undefined","distributeExponent","symbols","combine","bm","shell","logV","log","n1","n2","ndiv","ddiv","subtract","length","ps","toString","p","divide","isImaginary","distributeMultiplier","isMatrixB","isMatrixA","M","Matrix_1","eachElement","e","j","set","rows","l","cols","row","exports"],"sourceRoot":"","sources":["../../../../src/Functions/Core/operations/multiply.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
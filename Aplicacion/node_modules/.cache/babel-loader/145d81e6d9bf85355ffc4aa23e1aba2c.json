{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.underscore = underscore;\nexports.camelize = camelize;\nexports.hyphenate = hyphenate;\nexports.merge = merge;\n/* eslint-disable */\n\n/**\r\n * @example\r\n * underscoreName('getList');\r\n * => get_list\r\n */\n\nfunction underscore(string) {\n  return string.replace(/([A-Z])/g, '_$1').toLowerCase();\n}\n/**\r\n * @example\r\n * camelize('font-size');\r\n * => fontSize\r\n */\n\n\nfunction camelize(string) {\n  return string.replace(/\\-(\\w)/g, function (_char) {\n    return _char.slice(1).toUpperCase();\n  });\n}\n/**\r\n * @example\r\n * camelize('fontSize');\r\n * => font-size\r\n */\n\n\nfunction hyphenate(string) {\n  return string.replace(/([A-Z])/g, '-$1').toLowerCase();\n}\n/**\r\n * @example\r\n * merge('{0} - A front-end {1} ','Suite','framework');\r\n * => Suite - A front-end framework\r\n */\n\n\nfunction merge(pattern) {\n  var pointer = 0,\n      i;\n\n  for (i = 1; i < arguments.length; i += 1) {\n    pattern = pattern.split(\"{\" + pointer + \"}\").join(arguments[i]);\n    pointer += 1;\n  }\n\n  return pattern;\n}","map":{"version":3,"names":["exports","__esModule","underscore","camelize","hyphenate","merge","string","replace","toLowerCase","_char","slice","toUpperCase","pattern","pointer","i","arguments","length","split","join"],"sources":["G:/gitlab/TFG/Aplicacion/node_modules/dom-lib/lib/utils/stringFormatter.js"],"sourcesContent":["\"use strict\";\r\n\r\nexports.__esModule = true;\r\nexports.underscore = underscore;\r\nexports.camelize = camelize;\r\nexports.hyphenate = hyphenate;\r\nexports.merge = merge;\r\n\r\n/* eslint-disable */\r\n\r\n/**\r\n * @example\r\n * underscoreName('getList');\r\n * => get_list\r\n */\r\nfunction underscore(string) {\r\n  return string.replace(/([A-Z])/g, '_$1').toLowerCase();\r\n}\r\n/**\r\n * @example\r\n * camelize('font-size');\r\n * => fontSize\r\n */\r\n\r\n\r\nfunction camelize(string) {\r\n  return string.replace(/\\-(\\w)/g, function (_char) {\r\n    return _char.slice(1).toUpperCase();\r\n  });\r\n}\r\n/**\r\n * @example\r\n * camelize('fontSize');\r\n * => font-size\r\n */\r\n\r\n\r\nfunction hyphenate(string) {\r\n  return string.replace(/([A-Z])/g, '-$1').toLowerCase();\r\n}\r\n/**\r\n * @example\r\n * merge('{0} - A front-end {1} ','Suite','framework');\r\n * => Suite - A front-end framework\r\n */\r\n\r\n\r\nfunction merge(pattern) {\r\n  var pointer = 0,\r\n      i;\r\n\r\n  for (i = 1; i < arguments.length; i += 1) {\r\n    pattern = pattern.split(\"{\" + pointer + \"}\").join(arguments[i]);\r\n    pointer += 1;\r\n  }\r\n\r\n  return pattern;\r\n}"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,UAAR,GAAqBA,UAArB;AACAF,OAAO,CAACG,QAAR,GAAmBA,QAAnB;AACAH,OAAO,CAACI,SAAR,GAAoBA,SAApB;AACAJ,OAAO,CAACK,KAAR,GAAgBA,KAAhB;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASH,UAAT,CAAoBI,MAApB,EAA4B;EAC1B,OAAOA,MAAM,CAACC,OAAP,CAAe,UAAf,EAA2B,KAA3B,EAAkCC,WAAlC,EAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASL,QAAT,CAAkBG,MAAlB,EAA0B;EACxB,OAAOA,MAAM,CAACC,OAAP,CAAe,SAAf,EAA0B,UAAUE,KAAV,EAAiB;IAChD,OAAOA,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAeC,WAAf,EAAP;EACD,CAFM,CAAP;AAGD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASP,SAAT,CAAmBE,MAAnB,EAA2B;EACzB,OAAOA,MAAM,CAACC,OAAP,CAAe,UAAf,EAA2B,KAA3B,EAAkCC,WAAlC,EAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASH,KAAT,CAAeO,OAAf,EAAwB;EACtB,IAAIC,OAAO,GAAG,CAAd;EAAA,IACIC,CADJ;;EAGA,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,SAAS,CAACC,MAA1B,EAAkCF,CAAC,IAAI,CAAvC,EAA0C;IACxCF,OAAO,GAAGA,OAAO,CAACK,KAAR,CAAc,MAAMJ,OAAN,GAAgB,GAA9B,EAAmCK,IAAnC,CAAwCH,SAAS,CAACD,CAAD,CAAjD,CAAV;IACAD,OAAO,IAAI,CAAX;EACD;;EAED,OAAOD,OAAP;AACD"},"metadata":{},"sourceType":"script"}
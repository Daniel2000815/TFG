{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _classPrivateFieldLooseKey from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classPrivateFieldLooseKey\";\nimport { compareDependencies } from 'mathjs';\nimport nerdamer from 'nerdamer';\n\nvar _coefMap = /*#__PURE__*/_classPrivateFieldLooseKey(\"coefMap\");\n\nvar _varOrder = /*#__PURE__*/_classPrivateFieldLooseKey(\"varOrder\");\n\nvar Polynomial = /*#__PURE__*/function () {\n  function Polynomial(p) {\n    _classCallCheck(this, Polynomial);\n\n    Object.defineProperty(this, _coefMap, {\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, _varOrder, {\n      writable: true,\n      value: []\n    });\n    var pol = null;\n\n    try {\n      pol = nerdamer(p).expand().toString();\n    } catch (e) {\n      console.log(\"ERROR PARSING POLYNOMIAL \".concat(p));\n    }\n\n    this.computeCoefficients(nerdamer.tree(pol), true);\n  } // === PUBLIC INSTANCE METHODS ===\n\n  /** Multiply this polynomial by q */\n\n\n  _createClass(Polynomial, [{\n    key: \"multiply\",\n    value: function multiply(q) {\n      var product = '';\n\n      for (var keyP in this.coefMap) {\n        for (var keyQ in q.coefMap) {\n          product += \"\".concat(product.length > 0 ? '+' : '', \" (\").concat(this.coefMap[keyP], \"*\").concat(keyP, \") * (\").concat(q.coefMap[keyQ], \"*\").concat(keyQ, \")\");\n        }\n      }\n\n      product = nerdamer(product).expand().toString();\n      this.computeCoefficients(nerdamer.tree(product), true);\n    }\n    /** Add q to this polynomial */\n\n  }, {\n    key: \"plus\",\n    value: function plus(q) {\n      var sum = '';\n      console.log(this.coefMap, q.coefMap);\n\n      for (var keyP in this.coefMap) {\n        sum += \"\".concat(sum.length > 0 ? '+' : '', \" (\").concat(this.coefMap[keyP], \"*\").concat(keyP, \")\");\n      }\n\n      for (var keyQ in q.coefMap) {\n        sum += \"+ (\".concat(q.coefMap[keyQ], \"*\").concat(keyQ, \")\");\n      }\n\n      sum = nerdamer(sum).expand().toString();\n      this.computeCoefficients(nerdamer.tree(sum), true);\n    }\n    /** Leader coefficient */\n\n  }, {\n    key: \"lc\",\n    value: function lc() {\n      return this.coefMap[this.varOrder[0]];\n    }\n    /** Leader monomial */\n\n  }, {\n    key: \"lm\",\n    value: function lm() {\n      return this.varOrder[0];\n    }\n    /** Leader term */\n\n  }, {\n    key: \"lt\",\n    value: function lt() {\n      var coefNull = this.lc() !== '1';\n      return \"\".concat(coefNull ? this.lc() : '').concat(coefNull ? '*' : '').concat(this.lm());\n    }\n  }, {\n    key: \"exp\",\n    value: function exp() {\n      return Polynomial.exp(this.varOrder[0]);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var res = '';\n\n      for (var i in this.varOrder) {\n        var mon = this.varOrder[i];\n        var coef = this.coefMap[mon];\n        var nextMon = i < this.varOrder.length - 1 ? this.varOrder[i + 1] : null;\n        var nextCoef = nextMon ? this.coefMap[nextMon] : '';\n        var coefNull = coef !== '1';\n        res += \"\".concat(coefNull ? coef : '', \" \").concat(coefNull ? '(' : '').concat(mon).concat(coefNull ? ')' : '', \" \").concat(i < this.varOrder.length - 1 && nextCoef[0] != '-' ? '+' : '', \" \");\n      }\n\n      return res;\n    } // === PUBLIC STATIC METHODS ===\n\n    /** Exponent */\n\n  }, {\n    key: \"strContainsChar\",\n    value: // === PRIVATE INSTANCE METHODS ===\n    function strContainsChar(str, chars) {\n      // console.log('COMPROBANDO ' + str);\n      for (var i = 0; i < str.length; i++) {\n        if (chars.includes(str[i])) return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"computeCoefficients\",\n    value: function computeCoefficients(node) {\n      var firstIt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (firstIt) this.coefMap = {};\n      var pol = this.nodeToString(node);\n      var vars = ['x', 'y', 'z'];\n      console.log(\"pol \", pol);\n      if (node === null || node === undefined) return;\n\n      if (!node.left && !node.right) {\n        console.log(node.value);\n        if (['x', 'y', 'z'].includes(node.value)) this.coefMap[node.value] = '1';else this.coefMap['1'] = pol;\n        return;\n      } // console.log(pol);\n\n\n      if (!this.strContainsChar(pol, vars)) {\n        console.log('AÃ‘ADO ' + pol);\n        this.coefMap['1'] = pol;\n        return;\n      } // console.log(pol);\n\n\n      var pattern = /[+-]/;\n\n      if (!pattern.test(pol) && pol !== '') {\n        // const coef = this.nodeToString(node.left);\n        // const variable = this.nodeToString(node.right);\n        var coef = '';\n        var variable = '';\n        var writingCoef = true;\n        console.log(pol);\n\n        for (var i = 0; i < pol.length; i++) {\n          if (['x', 'y', 'z'].includes(pol[i])) {\n            writingCoef = false;\n            if (coef.length === 0) coef = '1'; // console.log('HOLA:' + coef[coef.length - 1]);\n\n            if (coef[coef.length - 1] === '*') coef = coef.slice(0, -1);\n          }\n\n          if (!['(', ')'].includes(pol[i])) {\n            if (writingCoef) coef += pol[i];else variable += pol[i];\n          }\n        }\n\n        this.coefMap[variable] = coef; // console.log(`COEF: ${coef}, VAR: ${variable}`);\n      } else {\n        this.computeCoefficients(node.left);\n        this.computeCoefficients(node.right);\n      }\n\n      if (node !== null && node !== undefined) {\n        if (node.type === 'OPERATOR' && node.value === '*') {// console.log('PRODUC');\n          // console.log(node.left);\n          // console.log(node.right);\n        }\n      }\n\n      var monomials = Object.keys(this.coefMap);\n      monomials.sort(function (a, b) {\n        return Polynomial.expGreater(Polynomial.exp(a), Polynomial.exp(b)) ? -1 : 1;\n      });\n      this.varOrder = monomials;\n    }\n  }, {\n    key: \"nodeToString\",\n    value: function nodeToString(node) {\n      console.log(node);\n\n      if (node !== null && node !== undefined) {\n        if (node.type === 'VARIABLE_OR_LITERAL') {\n          var isVariable = ['x', 'y', 'z'].includes(node.value); // console.log(\"ES LITERAL O VARIABLE: \" + node.value);\n          // console.log(node.value);\n\n          return isVariable ? node.value : parseFloat(node.value);\n        }\n\n        if (node.type === 'OPERATOR') {\n          var _node$left, _node$right, _node$left2, _node$right2;\n\n          var left = this.nodeToString(node.left);\n          var right = this.nodeToString(node.right); // console.log(\"ES OPERATOR: \" + node.value);\n          // console.log(\"OPERATOR LEFT: \" + left);\n          // console.log(\"OPERATOR RIGHT: \" + right);\n          // console.log(`DEVUELVO ${(right && left) ? `${left}${node.value}${right}` : `${node.value}${left}`}`);\n\n          var leftParenthesis = ((_node$left = node.left) === null || _node$left === void 0 ? void 0 : _node$left.type) !== 'VARIABLE_OR_LITERAL';\n          var rightParenthesis = ((_node$right = node.right) === null || _node$right === void 0 ? void 0 : _node$right.type) !== 'VARIABLE_OR_LITERAL';\n          console.log(\"OPERATOR: \" + node.value);\n          console.log(node.value === '-');\n          console.log(\"TYPEL: \" + ((_node$left2 = node.left) === null || _node$left2 === void 0 ? void 0 : _node$left2.type));\n          console.log(\"TYPER: \" + ((_node$right2 = node.right) === null || _node$right2 === void 0 ? void 0 : _node$right2.type)); // console.log(`PAR.LEFT: ${leftParenthesis}, RIGHT. PAR: ${rightParenthesis}`);\n\n          var l = leftParenthesis ? \"(\".concat(left, \")\") : \"\".concat(left);\n          var r = rightParenthesis ? \"(\".concat(right, \")\") : \"\".concat(right); // console.log('RIGHT ' + r);\n\n          if (node.value === '-') {\n            console.log(\"asi es:\", left, right);\n          }\n\n          if (right && left) return \"\".concat(l).concat(node.value).concat(r);else {\n            console.log(\"ASI ES\", \"\".concat(node.value).concat(l));\n            return \"\".concat(node.value).concat(l);\n          }\n        }\n\n        if (node.type === 'FUNCTION') {\n          // console.log(\"ES F: \" + node.value);\n          var _left = this.nodeToString(node.left);\n\n          var _right = this.nodeToString(node.right); // console.log(`DEVUELVO ${left}${node.value}${right}`);\n\n\n          return \"\".concat(_left).concat(node.value).concat(_right);\n        }\n      }\n\n      return '';\n    }\n  }], [{\n    key: \"exp\",\n    value: function exp(p) {\n      var split = p.split(/[-+]+/); // separa por + o -\n\n      var res = [0, 0, 0];\n      split.forEach(function (element) {\n        if (element === '') return;\n        var degs = [Number(nerdamer(\"deg(\".concat(element, \", x)\")).toString()), Number(nerdamer(\"deg(\".concat(element, \", y)\")).toString()), Number(nerdamer(\"deg(\".concat(element, \", z)\")).toString())];\n        if (Polynomial.expGreater(degs, res)) res = degs;\n      });\n      return res;\n    } // === PRIVATE STATIC METHODS (not private yet) ===\n\n  }, {\n    key: \"expGreater\",\n    value: function expGreater(a, b) {\n      return a[0] > b[0] || a[0] == b[0] && a[1] > b[1] || a[0] == b[0] && a[1] == b[1] && a[2] > a[2];\n    }\n  }]);\n\n  return Polynomial;\n}();\n\nexport { Polynomial as default };","map":{"version":3,"names":["compareDependencies","nerdamer","Polynomial","p","pol","expand","toString","e","console","log","computeCoefficients","tree","q","product","keyP","coefMap","keyQ","length","sum","varOrder","coefNull","lc","lm","exp","res","i","mon","coef","nextMon","nextCoef","str","chars","includes","node","firstIt","nodeToString","vars","undefined","left","right","value","strContainsChar","pattern","test","variable","writingCoef","slice","type","monomials","Object","keys","sort","a","b","expGreater","isVariable","parseFloat","leftParenthesis","rightParenthesis","l","r","split","forEach","element","degs","Number"],"sources":["C:/Users/daniz/TFG/Aplicacion/src/Polynomial.js"],"sourcesContent":["import { compareDependencies } from 'mathjs';\r\nimport nerdamer from 'nerdamer';\r\n\r\nexport default class Polynomial {\r\n  #coefMap = {};\r\n  #varOrder = [];\r\n\r\n  constructor(p) {\r\n    var pol = null;\r\n    try {\r\n      pol = nerdamer(p).expand().toString();\r\n    } catch (e) {\r\n      console.log(`ERROR PARSING POLYNOMIAL ${p}`);\r\n    }\r\n\r\n    this.computeCoefficients(nerdamer.tree(pol), true);\r\n  }\r\n\r\n  // === PUBLIC INSTANCE METHODS ===\r\n  /** Multiply this polynomial by q */\r\n  multiply(q) {\r\n    let product = '';\r\n    \r\n    for (let keyP in this.coefMap) {\r\n      for (let keyQ in q.coefMap) {\r\n        product += `${product.length > 0 ? '+' : ''} (${\r\n          this.coefMap[keyP]\r\n        }*${keyP}) * (${q.coefMap[keyQ]}*${keyQ})`;\r\n      }\r\n    }\r\n\r\n    product = nerdamer(product).expand().toString();\r\n    this.computeCoefficients(nerdamer.tree(product), true);\r\n  }\r\n\r\n  /** Add q to this polynomial */\r\n  plus(q){\r\n    let sum = '';\r\n    console.log(this.coefMap, q.coefMap);\r\n    for (let keyP in this.coefMap)\r\n    sum += `${sum.length > 0 ? '+' : ''} (${this.coefMap[keyP]}*${keyP})`;\r\n\r\n    for (let keyQ in q.coefMap)   \r\n      sum += `+ (${q.coefMap[keyQ]}*${keyQ})`;\r\n    \r\n    sum = nerdamer(sum).expand().toString();\r\n    this.computeCoefficients(nerdamer.tree(sum), true);\r\n  }\r\n\r\n  /** Leader coefficient */\r\n  lc(){\r\n    return this.coefMap[this.varOrder[0]];\r\n  }\r\n\r\n  /** Leader monomial */\r\n  lm(){\r\n    return this.varOrder[0];\r\n  }\r\n\r\n  /** Leader term */\r\n  lt(){\r\n    const coefNull = this.lc() !== '1';\r\n    return `${coefNull ? this.lc() : ''}${coefNull ? '*' : ''}${this.lm()}`;\r\n  }\r\n\r\n  exp(){\r\n    return Polynomial.exp(this.varOrder[0]);\r\n  }\r\n\r\n  toString() {\r\n    let res = '';\r\n\r\n    for (let i in this.varOrder) {\r\n      const mon = this.varOrder[i];\r\n      const coef = this.coefMap[mon];\r\n      const nextMon =\r\n        i < this.varOrder.length - 1 ? this.varOrder[i + 1] : null;\r\n      const nextCoef = nextMon ? this.coefMap[nextMon] : '';\r\n      const coefNull = coef !== '1';\r\n\r\n      res += `${coefNull ? coef : ''} ${coefNull ? '(' : ''}${mon}${\r\n        coefNull ? ')' : ''\r\n      } ${i < this.varOrder.length - 1 && nextCoef[0] != '-' ? '+' : ''} `;\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  // === PUBLIC STATIC METHODS ===\r\n\r\n  /** Exponent */\r\n  static exp(p) {\r\n    const split = p.split(/[-+]+/); // separa por + o -\r\n    let res = [0, 0, 0];\r\n\r\n    split.forEach((element) => {\r\n      if (element === '') return;\r\n\r\n      let degs = [\r\n        Number(nerdamer(`deg(${element}, x)`).toString()),\r\n        Number(nerdamer(`deg(${element}, y)`).toString()),\r\n        Number(nerdamer(`deg(${element}, z)`).toString()),\r\n      ];\r\n\r\n      if (Polynomial.expGreater(degs, res)) res = degs;\r\n    });\r\n\r\n    return res;\r\n  }\r\n\r\n  // === PRIVATE STATIC METHODS (not private yet) ===\r\n  static expGreater(a, b) {\r\n    return (\r\n      a[0] > b[0] ||\r\n      (a[0] == b[0] && a[1] > b[1]) ||\r\n      (a[0] == b[0] && a[1] == b[1] && a[2] > a[2])\r\n    );\r\n  }\r\n\r\n  // === PRIVATE INSTANCE METHODS ===\r\n  strContainsChar(str, chars) {\r\n    // console.log('COMPROBANDO ' + str);\r\n    for (let i = 0; i < str.length; i++) {\r\n      if (chars.includes(str[i])) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n\r\n  computeCoefficients(node, firstIt = false) {\r\n\r\n    if(firstIt)\r\n      this.coefMap = {};\r\n\r\n    const pol = this.nodeToString(node);\r\n    const vars = ['x', 'y', 'z'];\r\n    console.log(\"pol \", pol);\r\n    if (node === null || node === undefined) return;\r\n\r\n    if (!node.left && !node.right) {\r\n      console.log(node.value);\r\n      if (['x', 'y', 'z'].includes(node.value)) \r\n        this.coefMap[node.value] = '1';\r\n      else \r\n        this.coefMap['1'] = pol;\r\n\r\n      return;\r\n    }\r\n\r\n    // console.log(pol);\r\n    if (!this.strContainsChar(pol, vars)) {\r\n      console.log('AÃ‘ADO ' + pol);\r\n      this.coefMap['1'] = pol;\r\n      return;\r\n    }\r\n\r\n    // console.log(pol);\r\n    var pattern = /[+-]/;\r\n\r\n    if (!pattern.test(pol) && pol !== '') {\r\n      // const coef = this.nodeToString(node.left);\r\n      // const variable = this.nodeToString(node.right);\r\n\r\n      let coef = '';\r\n      let variable = '';\r\n      let writingCoef = true;\r\n      console.log(pol);\r\n      for (let i = 0; i < pol.length; i++) {\r\n        if (['x', 'y', 'z'].includes(pol[i])) {\r\n          writingCoef = false;\r\n\r\n          if (coef.length === 0) coef = '1';\r\n\r\n          // console.log('HOLA:' + coef[coef.length - 1]);\r\n          if (coef[coef.length - 1] === '*') coef = coef.slice(0, -1);\r\n        }\r\n\r\n        if (!['(', ')'].includes(pol[i])) {\r\n          if (writingCoef) coef += pol[i];\r\n          else variable += pol[i];\r\n        }\r\n      }\r\n\r\n      this.coefMap[variable] = coef;\r\n\r\n      // console.log(`COEF: ${coef}, VAR: ${variable}`);\r\n    } else {\r\n      this.computeCoefficients(node.left);\r\n      this.computeCoefficients(node.right);\r\n    }\r\n\r\n    if (node !== null && node !== undefined) {\r\n      if (node.type === 'OPERATOR' && node.value === '*') {\r\n        // console.log('PRODUC');\r\n        // console.log(node.left);\r\n        // console.log(node.right);\r\n      }\r\n    }\r\n\r\n    let monomials = Object.keys(this.coefMap);\r\n    monomials.sort(function (a, b) {\r\n      return Polynomial.expGreater(Polynomial.exp(a), Polynomial.exp(b)) ? -1 : 1;\r\n    });\r\n\r\n    this.varOrder = monomials;\r\n  }\r\n\r\n  nodeToString(node) {\r\n    console.log(node);\r\n    if (node !== null && node !== undefined) {\r\n      if (node.type === 'VARIABLE_OR_LITERAL') {\r\n        const isVariable = ['x', 'y', 'z'].includes(node.value);\r\n        // console.log(\"ES LITERAL O VARIABLE: \" + node.value);\r\n        // console.log(node.value);\r\n        return isVariable ? node.value : parseFloat(node.value);\r\n      }\r\n\r\n      if (node.type === 'OPERATOR') {\r\n        let left = this.nodeToString(node.left);\r\n        let right = this.nodeToString(node.right);\r\n\r\n        // console.log(\"ES OPERATOR: \" + node.value);\r\n        // console.log(\"OPERATOR LEFT: \" + left);\r\n        // console.log(\"OPERATOR RIGHT: \" + right);\r\n        // console.log(`DEVUELVO ${(right && left) ? `${left}${node.value}${right}` : `${node.value}${left}`}`);\r\n\r\n        const leftParenthesis = node.left?.type !== 'VARIABLE_OR_LITERAL';\r\n        const rightParenthesis = node.right?.type !== 'VARIABLE_OR_LITERAL';\r\n\r\n        console.log(\"OPERATOR: \" + node.value);\r\n        console.log(node.value === '-');\r\n        console.log(\"TYPEL: \" + node.left?.type);\r\n        console.log(\"TYPER: \" + node.right?.type);\r\n        // console.log(`PAR.LEFT: ${leftParenthesis}, RIGHT. PAR: ${rightParenthesis}`);\r\n        const l = leftParenthesis ? `(${left})` : `${left}`;\r\n        const r = rightParenthesis ? `(${right})` : `${right}`;\r\n        // console.log('RIGHT ' + r);\r\n        if(node.value === '-'){\r\n          console.log(\"asi es:\", left, right);\r\n        }\r\n        if (right && left) return `${l}${node.value}${r}`;\r\n        else{ console.log(\"ASI ES\", `${node.value}${l}`);\r\n        return `${node.value}${l}`;}\r\n      }\r\n\r\n      if (node.type === 'FUNCTION') {\r\n        // console.log(\"ES F: \" + node.value);\r\n        let left = this.nodeToString(node.left);\r\n        let right = this.nodeToString(node.right);\r\n\r\n        // console.log(`DEVUELVO ${left}${node.value}${right}`);\r\n        return `${left}${node.value}${right}`;\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @license Quaternion.js v1.4.0 27/03/2022\n *\n * Copyright (c) 2022, Robert Eisele (robert@xarg.org)\n * Licensed under the MIT license.\n **/\n(function (root) {\n  'use strict';\n  /**\n   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n   *\n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n\n  function logHypot(a, b) {\n    var _a = Math.abs(a);\n\n    var _b = Math.abs(b);\n\n    if (a === 0) {\n      return Math.log(_b);\n    }\n\n    if (b === 0) {\n      return Math.log(_a);\n    }\n\n    if (_a < 3000 && _b < 3000) {\n      return 0.5 * Math.log(a * a + b * b);\n    }\n\n    a = a / 2;\n    b = b / 2;\n    return 0.5 * Math.log(a * a + b * b) + Math.LN2;\n  }\n  /*\n   * Default is the multiplicative one element\n   *\n   */\n\n\n  var P = {\n    'w': 1,\n    'x': 0,\n    'y': 0,\n    'z': 0\n  };\n\n  function parse(dest, w, x, y, z) {\n    // Most common internal use case with 4 params\n    if (z !== undefined) {\n      dest['w'] = w;\n      dest['x'] = x;\n      dest['y'] = y;\n      dest['z'] = z;\n      return;\n    }\n\n    if (typeof w === 'object' && y === undefined) {\n      // Check for quats, for example when an object gets cloned\n      if ('w' in w || 'x' in w || 'y' in w || 'z' in w) {\n        dest['w'] = w['w'] || 0;\n        dest['x'] = w['x'] || 0;\n        dest['y'] = w['y'] || 0;\n        dest['z'] = w['z'] || 0;\n        return;\n      } // Check for complex numbers\n\n\n      if ('re' in w && 'im' in w) {\n        dest['w'] = w['re'];\n        dest['x'] = w['im'];\n        dest['y'] = 0;\n        dest['z'] = 0;\n        return;\n      } // Check for array\n\n\n      if (w.length === 4) {\n        dest['w'] = w[0];\n        dest['x'] = w[1];\n        dest['y'] = w[2];\n        dest['z'] = w[3];\n        return;\n      } // Check for augmented vector\n\n\n      if (w.length === 3) {\n        dest['w'] = 0;\n        dest['x'] = w[0];\n        dest['y'] = w[1];\n        dest['z'] = w[2];\n        return;\n      }\n\n      throw new Error('Invalid object');\n    } // Parse string values\n\n\n    if (typeof w === 'string' && y === undefined) {\n      var tokens = w.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n      var plus = 1;\n      var minus = 0;\n      var iMap = {\n        'i': 'x',\n        'j': 'y',\n        'k': 'z'\n      };\n\n      if (tokens === null) {\n        throw new Error('Parse error');\n      } // Reset the current state\n\n\n      dest['w'] = dest['x'] = dest['y'] = dest['z'] = 0;\n\n      for (var i = 0; i < tokens.length; i++) {\n        var c = tokens[i];\n        var d = tokens[i + 1];\n\n        if (c === ' ' || c === '\\t' || c === '\\n') {\n          /* void */\n        } else if (c === '+') {\n          plus++;\n        } else if (c === '-') {\n          minus++;\n        } else {\n          if (plus + minus === 0) {\n            throw new Error('Parse error' + c);\n          }\n\n          var g = iMap[c]; // Is the current token an imaginary sign?\n\n          if (g !== undefined) {\n            // Is the following token a number?\n            if (d !== ' ' && !isNaN(d)) {\n              c = d;\n              i++;\n            } else {\n              c = '1';\n            }\n          } else {\n            if (isNaN(c)) {\n              throw new Error('Parser error');\n            }\n\n            g = iMap[d];\n\n            if (g !== undefined) {\n              i++;\n            }\n          }\n\n          dest[g || 'w'] += parseFloat((minus % 2 ? '-' : '') + c);\n          plus = minus = 0;\n        }\n      } // Still something on the stack\n\n\n      if (plus + minus > 0) {\n        throw new Error('Parser error');\n      }\n\n      return;\n    } // If no single variable was given AND it was the constructor, set it to the identity\n\n\n    if (w === undefined && dest !== P) {\n      dest['w'] = 1;\n      dest['x'] = dest['y'] = dest['z'] = 0;\n    } else {\n      dest['w'] = w || 0; // Note: This isn't setFromAxis, it's just syntactic sugar!\n\n      if (x && x.length === 3) {\n        dest['x'] = x[0];\n        dest['y'] = x[1];\n        dest['z'] = x[2];\n      } else {\n        dest['x'] = x || 0;\n        dest['y'] = y || 0;\n        dest['z'] = z || 0;\n      }\n    }\n  }\n\n  function numToStr(n, char, prev) {\n    var ret = '';\n\n    if (n !== 0) {\n      if (prev !== '') {\n        ret += n < 0 ? ' - ' : ' + ';\n      } else if (n < 0) {\n        ret += '-';\n      }\n\n      n = Math.abs(n);\n\n      if (1 !== n || char === '') {\n        ret += n;\n      }\n\n      ret += char;\n    }\n\n    return ret;\n  }\n  /**\n   * Quaternion constructor\n   *\n   * @constructor\n   * @param {number|Object|string} w real\n   * @param {number=} x imag\n   * @param {number=} y imag\n   * @param {number=} z imag\n   * @returns {Quaternion}\n   */\n\n\n  function Quaternion(w, x, y, z) {\n    if (!(this instanceof Quaternion)) {\n      return new Quaternion(w, x, y, z);\n    }\n\n    parse(this, w, x, y, z);\n  }\n\n  Quaternion.prototype = {\n    'w': 1,\n    'x': 0,\n    'y': 0,\n    'z': 0,\n\n    /**\n     * Adds two quaternions Q1 and Q2\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {Quaternion}\n     */\n    'add': function add(w, x, y, z) {\n      parse(P, w, x, y, z); // Q1 + Q2 := [w1, v1] + [w2, v2] = [w1 + w2, v1 + v2]\n\n      return new Quaternion(this['w'] + P['w'], this['x'] + P['x'], this['y'] + P['y'], this['z'] + P['z']);\n    },\n\n    /**\n     * Subtracts a quaternions Q2 from Q1\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {Quaternion}\n     */\n    'sub': function sub(w, x, y, z) {\n      parse(P, w, x, y, z); // Q1 - Q2 := Q1 + (-Q2)\n      //          = [w1, v1] - [w2, v2] = [w1 - w2, v1 - v2]\n\n      return new Quaternion(this['w'] - P['w'], this['x'] - P['x'], this['y'] - P['y'], this['z'] - P['z']);\n    },\n\n    /**\n     * Calculates the additive inverse, or simply it negates the quaternion\n     *\n     * @returns {Quaternion}\n     */\n    'neg': function neg() {\n      // -Q := [-w, -v]\n      return new Quaternion(-this['w'], -this['x'], -this['y'], -this['z']);\n    },\n\n    /**\n     * Calculates the length/modulus/magnitude or the norm of a quaternion\n     *\n     * @returns {number}\n     */\n    'norm': function norm() {\n      // |Q| := sqrt(|Q|^2)\n      // The unit quaternion has |Q| = 1\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n      return Math.sqrt(w * w + x * x + y * y + z * z);\n    },\n\n    /**\n     * Calculates the squared length/modulus/magnitude or the norm of a quaternion\n     *\n     * @returns {number}\n     */\n    'normSq': function normSq() {\n      // |Q|^2 := [w, v] * [w, -v]\n      //        = [w^2 + dot(v, v), -w * v + w * v + cross(v, -v)]\n      //        = [w^2 + |v|^2, 0]\n      //        = [w^2 + dot(v, v), 0]\n      //        = dot(Q, Q)\n      //        = Q * Q'\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n      return w * w + x * x + y * y + z * z;\n    },\n\n    /**\n     * Normalizes the quaternion to have |Q| = 1 as long as the norm is not zero\n     * Alternative names are the signum, unit or versor\n     *\n     * @returns {Quaternion}\n     */\n    'normalize': function normalize() {\n      // Q* := Q / |Q|\n      // unrolled Q.scale(1 / Q.norm())\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n      var norm = Math.sqrt(w * w + x * x + y * y + z * z);\n\n      if (norm < Quaternion['EPSILON']) {\n        return Quaternion['ZERO'];\n      }\n\n      norm = 1 / norm;\n      return new Quaternion(w * norm, x * norm, y * norm, z * norm);\n    },\n\n    /**\n     * Calculates the Hamilton product of two quaternions\n     * Leaving out the imaginary part results in just scaling the quat\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {Quaternion}\n     */\n    'mul': function mul(w, x, y, z) {\n      parse(P, w, x, y, z); // Q1 * Q2 = [w1 * w2 - dot(v1, v2), w1 * v2 + w2 * v1 + cross(v1, v2)]\n      // Not commutative because cross(v1, v2) != cross(v2, v1)!\n\n      var w1 = this['w'];\n      var x1 = this['x'];\n      var y1 = this['y'];\n      var z1 = this['z'];\n      var w2 = P['w'];\n      var x2 = P['x'];\n      var y2 = P['y'];\n      var z2 = P['z'];\n      return new Quaternion(w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2, w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2, w1 * y2 + y1 * w2 + z1 * x2 - x1 * z2, w1 * z2 + z1 * w2 + x1 * y2 - y1 * x2);\n    },\n\n    /**\n     * Scales a quaternion by a scalar, faster than using multiplication\n     *\n     * @param {number} s scaling factor\n     * @returns {Quaternion}\n     */\n    'scale': function scale(s) {\n      return new Quaternion(this['w'] * s, this['x'] * s, this['y'] * s, this['z'] * s);\n    },\n\n    /**\n     * Calculates the dot product of two quaternions\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {number}\n     */\n    'dot': function dot(w, x, y, z) {\n      parse(P, w, x, y, z); // dot(Q1, Q2) := w1 * w2 + dot(v1, v2)\n\n      return this['w'] * P['w'] + this['x'] * P['x'] + this['y'] * P['y'] + this['z'] * P['z'];\n    },\n\n    /**\n     * Calculates the inverse of a quat for non-normalized quats such that\n     * Q^-1 * Q = 1 and Q * Q^-1 = 1\n     *\n     * @returns {Quaternion}\n     */\n    'inverse': function inverse() {\n      // Q^-1 := Q' / |Q|^2\n      //       = [w / (w^2 + |v|^2), -v / (w^2 + |v|^2)]\n      // Proof:\n      // Q * Q^-1 = [w, v] * [w / (w^2 + |v|^2), -v / (w^2 + |v|^2)]\n      //          = [1, 0]\n      // Q^-1 * Q = [w / (w^2 + |v|^2), -v / (w^2 + |v|^2)] * [w, v]\n      //          = [1, 0].\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n      var normSq = w * w + x * x + y * y + z * z;\n\n      if (normSq === 0) {\n        return Quaternion['ZERO']; // TODO: Is the result zero or one when the norm is zero?\n      }\n\n      normSq = 1 / normSq;\n      return new Quaternion(w * normSq, -x * normSq, -y * normSq, -z * normSq);\n    },\n\n    /**\n     * Multiplies a quaternion with the inverse of a second quaternion\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {Quaternion}\n     */\n    'div': function div(w, x, y, z) {\n      parse(P, w, x, y, z); // Q1 / Q2 := Q1 * Q2^-1\n\n      var w1 = this['w'];\n      var x1 = this['x'];\n      var y1 = this['y'];\n      var z1 = this['z'];\n      var w2 = P['w'];\n      var x2 = P['x'];\n      var y2 = P['y'];\n      var z2 = P['z'];\n      var normSq = w2 * w2 + x2 * x2 + y2 * y2 + z2 * z2;\n\n      if (normSq === 0) {\n        return Quaternion['ZERO']; // TODO: Is the result zero or one when the norm is zero?\n      }\n\n      normSq = 1 / normSq;\n      return new Quaternion((w1 * w2 + x1 * x2 + y1 * y2 + z1 * z2) * normSq, (x1 * w2 - w1 * x2 - y1 * z2 + z1 * y2) * normSq, (y1 * w2 - w1 * y2 - z1 * x2 + x1 * z2) * normSq, (z1 * w2 - w1 * z2 - x1 * y2 + y1 * x2) * normSq);\n    },\n\n    /**\n     * Calculates the conjugate of a quaternion\n     *\n     * @returns {Quaternion}\n     */\n    'conjugate': function conjugate() {\n      // Q' = [s, -v]\n      // If the quaternion is normalized,\n      // the conjugate is the inverse of the quaternion - but faster\n      // Q' * Q = Q * Q' = 1\n      // Additionally, the conjugate of a unit quaternion is a rotation with the same\n      // angle but the opposite axis.\n      // Moreover the following property holds:\n      // (Q1 * Q2)' = Q2' * Q1'\n      return new Quaternion(this['w'], -this['x'], -this['y'], -this['z']);\n    },\n\n    /**\n     * Calculates the natural exponentiation of the quaternion\n     *\n     * @returns {Quaternion}\n     */\n    'exp': function exp() {\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n      var vNorm = Math.sqrt(x * x + y * y + z * z);\n      var wExp = Math.exp(w);\n      var scale = wExp / vNorm * Math.sin(vNorm);\n\n      if (vNorm === 0) {\n        //return new Quaternion(wExp * Math.cos(vNorm), 0, 0, 0);\n        return new Quaternion(wExp, 0, 0, 0);\n      }\n\n      return new Quaternion(wExp * Math.cos(vNorm), x * scale, y * scale, z * scale);\n    },\n\n    /**\n     * Calculates the natural logarithm of the quaternion\n     *\n     * @returns {Quaternion}\n     */\n    'log': function log() {\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      if (y === 0 && z === 0) {\n        return new Quaternion(logHypot(w, x), Math.atan2(x, w), 0, 0);\n      }\n\n      var qNorm2 = x * x + y * y + z * z + w * w;\n      var vNorm = Math.sqrt(x * x + y * y + z * z);\n      var scale = Math.atan2(vNorm, w) / vNorm;\n      return new Quaternion(Math.log(qNorm2) * 0.5, x * scale, y * scale, z * scale);\n    },\n\n    /**\n     * Calculates the power of a quaternion raised to a real number or another quaternion\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {Quaternion}\n     */\n    'pow': function pow(w, x, y, z) {\n      parse(P, w, x, y, z);\n\n      if (P['y'] === 0 && P['z'] === 0) {\n        if (P['w'] === 1 && P['x'] === 0) {\n          return this;\n        }\n\n        if (P['w'] === 0 && P['x'] === 0) {\n          return Quaternion['ONE'];\n        } // Check if we can operate in C\n        // Borrowed from complex.js\n\n\n        if (this['y'] === 0 && this['z'] === 0) {\n          var a = this['w'];\n          var b = this['x'];\n\n          if (a === 0 && b === 0) {\n            return Quaternion['ZERO'];\n          }\n\n          var arg = Math.atan2(b, a);\n          var loh = logHypot(a, b);\n\n          if (P['x'] === 0) {\n            if (b === 0 && a >= 0) {\n              return new Quaternion(Math.pow(a, P['w']), 0, 0, 0);\n            } else if (a === 0) {\n              switch (P['w'] % 4) {\n                case 0:\n                  return new Quaternion(Math.pow(b, P['w']), 0, 0, 0);\n\n                case 1:\n                  return new Quaternion(0, Math.pow(b, P['w']), 0, 0);\n\n                case 2:\n                  return new Quaternion(-Math.pow(b, P['w']), 0, 0, 0);\n\n                case 3:\n                  return new Quaternion(0, -Math.pow(b, P['w']), 0, 0);\n              }\n            }\n          }\n\n          a = Math.exp(P['w'] * loh - P['x'] * arg);\n          b = P['x'] * loh + P['w'] * arg;\n          return new Quaternion(a * Math.cos(b), a * Math.sin(b), 0, 0);\n        }\n      } // Normal quaternion behavior\n      // q^p = e^ln(q^p) = e^(ln(q)*p)\n\n\n      return this['log']()['mul'](P)['exp']();\n    },\n\n    /**\n     * Checks if two quats are the same\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {boolean}\n     */\n    'equals': function equals(w, x, y, z) {\n      parse(P, w, x, y, z);\n      var eps = Quaternion['EPSILON']; // maybe check for NaN's here?\n\n      return Math.abs(P['w'] - this['w']) < eps && Math.abs(P['x'] - this['x']) < eps && Math.abs(P['y'] - this['y']) < eps && Math.abs(P['z'] - this['z']) < eps;\n    },\n\n    /**\n     * Checks if all parts of a quaternion are finite\n     *\n     * @returns {boolean}\n     */\n    'isFinite': function (_isFinite) {\n      function isFinite() {\n        return _isFinite.apply(this, arguments);\n      }\n\n      isFinite.toString = function () {\n        return _isFinite.toString();\n      };\n\n      return isFinite;\n    }(function () {\n      return isFinite(this['w']) && isFinite(this['x']) && isFinite(this['y']) && isFinite(this['z']);\n    }),\n\n    /**\n     * Checks if any of the parts of the quaternion is not a number\n     *\n     * @returns {boolean}\n     */\n    'isNaN': function (_isNaN) {\n      function isNaN() {\n        return _isNaN.apply(this, arguments);\n      }\n\n      isNaN.toString = function () {\n        return _isNaN.toString();\n      };\n\n      return isNaN;\n    }(function () {\n      return isNaN(this['w']) || isNaN(this['x']) || isNaN(this['y']) || isNaN(this['z']);\n    }),\n\n    /**\n     * Gets the Quaternion as a well formatted string\n     *\n     * @returns {string}\n     */\n    'toString': function toString() {\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n      var ret = '';\n\n      if (isNaN(w) || isNaN(x) || isNaN(y) || isNaN(z)) {\n        return 'NaN';\n      } // Alternative design?\n      // '(%f, [%f %f %f])'\n\n\n      ret = numToStr(w, '', ret);\n      ret += numToStr(x, 'i', ret);\n      ret += numToStr(y, 'j', ret);\n      ret += numToStr(z, 'k', ret);\n      if ('' === ret) return '0';\n      return ret;\n    },\n\n    /**\n     * Returns the real part of the quaternion\n     *\n     * @returns {number}\n     */\n    'real': function real() {\n      return this['w'];\n    },\n\n    /**\n     * Returns the imaginary part of the quaternion as a 3D vector / array\n     *\n     * @returns {Array}\n     */\n    'imag': function imag() {\n      return [this['x'], this['y'], this['z']];\n    },\n\n    /**\n     * Gets the actual quaternion as a 4D vector / array\n     *\n     * @returns {Array}\n     */\n    'toVector': function toVector() {\n      return [this['w'], this['x'], this['y'], this['z']];\n    },\n\n    /**\n     * Calculates the 3x3 rotation matrix for the current quat\n     *\n     * @param {boolean=} twoD\n     * @returns {Array}\n     */\n    'toMatrix': function toMatrix(twoD) {\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n      var wx = w * x,\n          wy = w * y,\n          wz = w * z;\n      var xx = x * x,\n          xy = x * y,\n          xz = x * z;\n      var yy = y * y,\n          yz = y * z,\n          zz = z * z;\n\n      if (twoD) {\n        return [[1 - 2 * (yy + zz), 2 * (xy - wz), 2 * (xz + wy)], [2 * (xy + wz), 1 - 2 * (xx + zz), 2 * (yz - wx)], [2 * (xz - wy), 2 * (yz + wx), 1 - 2 * (xx + yy)]];\n      }\n\n      return [1 - 2 * (yy + zz), 2 * (xy - wz), 2 * (xz + wy), 2 * (xy + wz), 1 - 2 * (xx + zz), 2 * (yz - wx), 2 * (xz - wy), 2 * (yz + wx), 1 - 2 * (xx + yy)];\n    },\n\n    /**\n     * Calculates the homogeneous 4x4 rotation matrix for the current quat\n     *\n     * @param {boolean=} twoD\n     * @returns {Array}\n     */\n    'toMatrix4': function toMatrix4(twoD) {\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n      var wx = w * x,\n          wy = w * y,\n          wz = w * z;\n      var xx = x * x,\n          xy = x * y,\n          xz = x * z;\n      var yy = y * y,\n          yz = y * z,\n          zz = z * z;\n\n      if (twoD) {\n        return [[1 - 2 * (yy + zz), 2 * (xy - wz), 2 * (xz + wy), 0], [2 * (xy + wz), 1 - 2 * (xx + zz), 2 * (yz - wx), 0], [2 * (xz - wy), 2 * (yz + wx), 1 - 2 * (xx + yy), 0], [0, 0, 0, 1]];\n      }\n\n      return [1 - 2 * (yy + zz), 2 * (xy - wz), 2 * (xz + wy), 0, 2 * (xy + wz), 1 - 2 * (xx + zz), 2 * (yz - wx), 0, 2 * (xz - wy), 2 * (yz + wx), 1 - 2 * (xx + yy), 0, 0, 0, 0, 1];\n    },\n\n    /**\n     * Calculates the Euler angles represented by the current quat\n     * \n     * @returns {Object}\n     */\n    'toEuler': function toEuler() {\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n      var t = 2 * (w * y - z * x);\n      return {\n        // X-axis rotation\n        roll: Math.atan2(2 * (w * x + y * z), 1 - 2 * (x * x + y * y)),\n        // Y-axis rotation\n        pitch: t >= 1 ? Math.PI / 2 : t <= -1 ? -Math.PI / 2 : Math.asin(t),\n        // Z-axis rotation\n        yaw: Math.atan2(2 * (w * z + x * y), 1 - 2 * (y * y + z * z))\n      };\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * @returns {Quaternion}\n     */\n    'clone': function clone() {\n      return new Quaternion(this);\n    },\n\n    /**\n     * Rotates a vector according to the current quaternion, assumes |q|=1\n     * @link https://www.xarg.org/proof/vector-rotation-using-quaternions/\n     *\n     * @param {Array} v The vector to be rotated\n     * @returns {Array}\n     */\n    'rotateVector': function rotateVector(v) {\n      var qw = this['w'];\n      var qx = this['x'];\n      var qy = this['y'];\n      var qz = this['z'];\n      var vx = v[0];\n      var vy = v[1];\n      var vz = v[2]; // t = 2q x v\n\n      var tx = 2 * (qy * vz - qz * vy);\n      var ty = 2 * (qz * vx - qx * vz);\n      var tz = 2 * (qx * vy - qy * vx); // v + w t + q x t\n\n      return [vx + qw * tx + qy * tz - qz * ty, vy + qw * ty + qz * tx - qx * tz, vz + qw * tz + qx * ty - qy * tx];\n    },\n\n    /**\n     * Gets a function to spherically interpolate between two quaternions\n     * \n     * @returns Function\n     */\n    'slerp': function slerp(w, x, y, z) {\n      parse(P, w, x, y, z); // slerp(Q1, Q2, t) := Q1(Q1^-1 Q2)^t\n\n      var w1 = this['w'];\n      var x1 = this['x'];\n      var y1 = this['y'];\n      var z1 = this['z'];\n      var w2 = P['w'];\n      var x2 = P['x'];\n      var y2 = P['y'];\n      var z2 = P['z'];\n      var cosTheta0 = w1 * w2 + x1 * x2 + y1 * y2 + z1 * z2;\n\n      if (cosTheta0 < 0) {\n        w1 = -w1;\n        x1 = -x1;\n        y1 = -y1;\n        z1 = -z1;\n        cosTheta0 = -cosTheta0;\n      }\n\n      if (cosTheta0 >= 1 - Quaternion['EPSILON']) {\n        return function (pct) {\n          return new Quaternion(w1 + pct * (w2 - w1), x1 + pct * (x2 - x1), y1 + pct * (y2 - y1), z1 + pct * (z2 - z1))['normalize']();\n        };\n      }\n\n      var Theta0 = Math.acos(cosTheta0);\n      var sinTheta0 = Math.sin(Theta0);\n      return function (pct) {\n        var Theta = Theta0 * pct;\n        var sinTheta = Math.sin(Theta);\n        var cosTheta = Math.cos(Theta);\n        var s0 = cosTheta - cosTheta0 * sinTheta / sinTheta0;\n        var s1 = sinTheta / sinTheta0;\n        return new Quaternion(s0 * w1 + s1 * w2, s0 * x1 + s1 * x2, s0 * y1 + s1 * y2, s0 * z1 + s1 * z2);\n      };\n    }\n  };\n  Quaternion['ZERO'] = new Quaternion(0, 0, 0, 0); // This is the additive identity Quaternion\n\n  Quaternion['ONE'] = new Quaternion(1, 0, 0, 0); // This is the multiplicative identity Quaternion\n\n  Quaternion['I'] = new Quaternion(0, 1, 0, 0);\n  Quaternion['J'] = new Quaternion(0, 0, 1, 0);\n  Quaternion['K'] = new Quaternion(0, 0, 0, 1);\n  Quaternion['EPSILON'] = 1e-16;\n  /**\n   * Creates quaternion by a rotation given as axis-angle orientation\n   *\n   * @param {Array} axis The axis around which to rotate\n   * @param {number} angle The angle in radians\n   * @returns {Quaternion}\n   */\n\n  Quaternion['fromAxisAngle'] = function (axis, angle) {\n    // Q = [cos(angle / 2), v * sin(angle / 2)]\n    var halfAngle = angle * 0.5;\n    var a = axis[0];\n    var b = axis[1];\n    var c = axis[2];\n    var sin_2 = Math.sin(halfAngle);\n    var cos_2 = Math.cos(halfAngle);\n    var sin_norm = sin_2 / Math.sqrt(a * a + b * b + c * c);\n    return new Quaternion(cos_2, a * sin_norm, b * sin_norm, c * sin_norm);\n  };\n  /**\n   * Calculates the quaternion to rotate one vector onto another\n   * @link https://www.xarg.org/proof/quaternion-from-two-vectors/\n   *\n   * @param {Array} u\n   * @param {Array} v\n   */\n\n\n  Quaternion['fromBetweenVectors'] = function (u, v) {\n    var ux = u[0];\n    var uy = u[1];\n    var uz = u[2];\n    var vx = v[0];\n    var vy = v[1];\n    var vz = v[2];\n    var dot = ux * vx + uy * vy + uz * vz; // Parallel check (TODO must be normalized)\n\n    if (dot >= 1 - Quaternion['EPSILON']) {//return Quaternion['ONE'];\n    } // Close to PI @TODO\n    //if (1 + dot <= Quaternion['EPSILON']) {\n    // return Quaternion.fromAxisAngle(Math.abs(ux) > Math.abs(uz) ? [-uy,  ux, 0] : [0, -uz,  uy], 0) -> OR\n    // return Quaternion.fromAxisAngle(Math.abs(ux) > Math.abs(uz) ? [ uy, -ux, 0] : [0,  uz, -uy], 0)\n    //}\n\n\n    var wx = uy * vz - uz * vy;\n    var wy = uz * vx - ux * vz;\n    var wz = ux * vy - uy * vx;\n    return new Quaternion(dot + Math.sqrt(dot * dot + wx * wx + wy * wy + wz * wz), wx, wy, wz).normalize();\n  };\n  /**\n   * Gets a spherical random number\n   * @link http://planning.cs.uiuc.edu/node198.html\n   */\n\n\n  Quaternion['random'] = function () {\n    var u1 = Math.random();\n    var u2 = Math.random();\n    var u3 = Math.random();\n    var s = Math.sqrt(1 - u1);\n    var t = Math.sqrt(u1);\n    return new Quaternion(t * Math.cos(2 * Math.PI * u3), s * Math.sin(2 * Math.PI * u2), s * Math.cos(2 * Math.PI * u2), t * Math.sin(2 * Math.PI * u3));\n  };\n  /**\n   * Creates a quaternion by a rotation given by Euler angles\n   *\n   * @param {number} phi\n   * @param {number} theta\n   * @param {number} psi\n   * @param {string=} order\n   * @returns {Quaternion}\n   */\n\n\n  Quaternion['fromEuler'] = function (phi, theta, psi, order) {\n    var _x = phi * 0.5;\n\n    var _y = theta * 0.5;\n\n    var _z = psi * 0.5;\n\n    var cX = Math.cos(_x);\n    var cY = Math.cos(_y);\n    var cZ = Math.cos(_z);\n    var sX = Math.sin(_x);\n    var sY = Math.sin(_y);\n    var sZ = Math.sin(_z);\n\n    if (order === undefined || order === 'ZXY') {\n      // axisAngle([0, 0, 1], x) * axisAngle([1, 0, 0], y) * axisAngle([0, 1, 0], z)\n      return new Quaternion(cX * cY * cZ - sX * sY * sZ, cX * cZ * sY - cY * sX * sZ, cX * cY * sZ + cZ * sX * sY, cY * cZ * sX + cX * sY * sZ);\n    }\n\n    if (order === 'XYZ' || order === 'RPY') {\n      // axisAngle([1, 0, 0], x) * axisAngle([0, 1, 0], y) * axisAngle([0, 0, 1], z)\n      return new Quaternion(cX * cY * cZ - sX * sY * sZ, cY * cZ * sX + cX * sY * sZ, cX * cZ * sY - cY * sX * sZ, cX * cY * sZ + cZ * sX * sY);\n    }\n\n    if (order === 'YXZ') {\n      // axisAngle([0, 1, 0], x) * axisAngle([1, 0, 0], y) * axisAngle([0, 0, 1], z)\n      return new Quaternion(cX * cY * cZ + sX * sY * sZ, cX * cZ * sY + cY * sX * sZ, cY * cZ * sX - cX * sY * sZ, cX * cY * sZ - cZ * sX * sY);\n    }\n\n    if (order === 'ZYX' || order === 'YPR') {\n      // axisAngle([0, 0, 1], x) * axisAngle([0, 1, 0], y) * axisAngle([1, 0, 0], z)\n      return new Quaternion(cX * cY * cZ + sX * sY * sZ, cX * cY * sZ - cZ * sX * sY, cX * cZ * sY + cY * sX * sZ, cY * cZ * sX - cX * sY * sZ);\n    }\n\n    if (order === 'YZX') {\n      // axisAngle([0, 1, 0], x) * axisAngle([0, 0, 1], y) * axisAngle([1, 0, 0], z)\n      return new Quaternion(cX * cY * cZ - sX * sY * sZ, cX * cY * sZ + cZ * sX * sY, cY * cZ * sX + cX * sY * sZ, cX * cZ * sY - cY * sX * sZ);\n    }\n\n    if (order === 'XZY') {\n      // axisAngle([1, 0, 0], x) * axisAngle([0, 0, 1], z) * axisAngle([0, 1, 0], y)\n      return new Quaternion(cX * cY * cZ + sX * sY * sZ, cY * cZ * sX - cX * sY * sZ, cX * cY * sZ - cZ * sX * sY, cX * cZ * sY + cY * sX * sZ);\n    }\n\n    return null;\n  };\n  /**\n   * Creates a quaternion by a rotation matrix\n   *\n   * @param {Array} matrix\n   * @returns {Quaternion}\n   */\n\n\n  Quaternion['fromMatrix'] = function (matrix) {\n    if (matrix.length === 9) {\n      var m00 = matrix[0];\n      var m01 = matrix[1];\n      var m02 = matrix[2];\n      var m10 = matrix[3];\n      var m11 = matrix[4];\n      var m12 = matrix[5];\n      var m20 = matrix[6];\n      var m21 = matrix[7];\n      var m22 = matrix[8];\n    } else {\n      var m00 = matrix[0][0];\n      var m01 = matrix[0][1];\n      var m02 = matrix[0][2];\n      var m10 = matrix[1][0];\n      var m11 = matrix[1][1];\n      var m12 = matrix[1][2];\n      var m20 = matrix[2][0];\n      var m21 = matrix[2][1];\n      var m22 = matrix[2][2];\n    }\n\n    var tr = m00 + m11 + m22;\n\n    if (tr > 0) {\n      var S = Math.sqrt(tr + 1.0) * 2; // S=4*qw\n\n      return new Quaternion(0.25 * S, (m21 - m12) / S, (m02 - m20) / S, (m10 - m01) / S);\n    } else if (m00 > m11 & m00 > m22) {\n      var S = Math.sqrt(1.0 + m00 - m11 - m22) * 2; // S=4*qx\n\n      return new Quaternion((m21 - m12) / S, 0.25 * S, (m01 + m10) / S, (m02 + m20) / S);\n    } else if (m11 > m22) {\n      var S = Math.sqrt(1.0 + m11 - m00 - m22) * 2; // S=4*qy\n\n      return new Quaternion((m02 - m20) / S, (m01 + m10) / S, 0.25 * S, (m12 + m21) / S);\n    } else {\n      var S = Math.sqrt(1.0 + m22 - m00 - m11) * 2; // S=4*qz\n\n      return new Quaternion((m10 - m01) / S, (m02 + m20) / S, (m12 + m21) / S, 0.25 * S);\n    }\n  };\n\n  if (typeof define === 'function' && define['amd']) {\n    define([], function () {\n      return Quaternion;\n    });\n  } else if (typeof exports === 'object') {\n    Object.defineProperty(Quaternion, \"__esModule\", {\n      'value': true\n    });\n    Quaternion['default'] = Quaternion;\n    Quaternion['Quaternion'] = Quaternion;\n    module['exports'] = Quaternion;\n  } else {\n    root['Quaternion'] = Quaternion;\n  }\n})(this);","map":{"version":3,"names":["root","logHypot","a","b","_a","Math","abs","_b","log","LN2","P","parse","dest","w","x","y","z","undefined","length","Error","tokens","match","plus","minus","iMap","i","c","d","g","isNaN","parseFloat","numToStr","n","char","prev","ret","Quaternion","prototype","sqrt","norm","w1","x1","y1","z1","w2","x2","y2","z2","s","normSq","vNorm","wExp","exp","scale","sin","cos","atan2","qNorm2","arg","loh","pow","eps","isFinite","twoD","wx","wy","wz","xx","xy","xz","yy","yz","zz","t","roll","pitch","PI","asin","yaw","v","qw","qx","qy","qz","vx","vy","vz","tx","ty","tz","cosTheta0","pct","Theta0","acos","sinTheta0","Theta","sinTheta","cosTheta","s0","s1","axis","angle","halfAngle","sin_2","cos_2","sin_norm","u","ux","uy","uz","dot","normalize","u1","random","u2","u3","phi","theta","psi","order","_x","_y","_z","cX","cY","cZ","sX","sY","sZ","matrix","m00","m01","m02","m10","m11","m12","m20","m21","m22","tr","S","define","exports","Object","defineProperty","module"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/quaternion/quaternion.js"],"sourcesContent":["/**\n * @license Quaternion.js v1.4.0 27/03/2022\n *\n * Copyright (c) 2022, Robert Eisele (robert@xarg.org)\n * Licensed under the MIT license.\n **/\n(function(root) {\n\n  'use strict';\n\n  /**\n   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n   *\n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n  function logHypot(a, b) {\n\n    var _a = Math.abs(a);\n    var _b = Math.abs(b);\n\n    if (a === 0) {\n      return Math.log(_b);\n    }\n\n    if (b === 0) {\n      return Math.log(_a);\n    }\n\n    if (_a < 3000 && _b < 3000) {\n      return 0.5 * Math.log(a * a + b * b);\n    }\n\n    a = a / 2;\n    b = b / 2;\n\n    return 0.5 * Math.log(a * a + b * b) + Math.LN2;\n  }\n\n  /*\n   * Default is the multiplicative one element\n   *\n   */\n  var P = {\n    'w': 1,\n    'x': 0,\n    'y': 0,\n    'z': 0\n  };\n\n  function parse(dest, w, x, y, z) {\n\n    // Most common internal use case with 4 params\n    if (z !== undefined) {\n      dest['w'] = w;\n      dest['x'] = x;\n      dest['y'] = y;\n      dest['z'] = z;\n      return;\n    }\n\n    if (typeof w === 'object' && y === undefined) {\n\n      // Check for quats, for example when an object gets cloned\n      if ('w' in w || 'x' in w || 'y' in w || 'z' in w) {\n        dest['w'] = w['w'] || 0;\n        dest['x'] = w['x'] || 0;\n        dest['y'] = w['y'] || 0;\n        dest['z'] = w['z'] || 0;\n        return;\n      }\n\n      // Check for complex numbers\n      if ('re' in w && 'im' in w) {\n        dest['w'] = w['re'];\n        dest['x'] = w['im'];\n        dest['y'] = 0;\n        dest['z'] = 0;\n        return;\n      }\n\n      // Check for array\n      if (w.length === 4) {\n        dest['w'] = w[0];\n        dest['x'] = w[1];\n        dest['y'] = w[2];\n        dest['z'] = w[3];\n        return;\n      }\n\n      // Check for augmented vector\n      if (w.length === 3) {\n        dest['w'] = 0;\n        dest['x'] = w[0];\n        dest['y'] = w[1];\n        dest['z'] = w[2];\n        return;\n      }\n\n      throw new Error('Invalid object');\n    }\n\n    // Parse string values\n    if (typeof w === 'string' && y === undefined) {\n\n      var tokens = w.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n      var plus = 1;\n      var minus = 0;\n\n      var iMap = { 'i': 'x', 'j': 'y', 'k': 'z' };\n\n      if (tokens === null) {\n        throw new Error('Parse error');\n      }\n\n      // Reset the current state\n      dest['w'] =\n        dest['x'] =\n        dest['y'] =\n        dest['z'] = 0;\n\n      for (var i = 0; i < tokens.length; i++) {\n\n        var c = tokens[i];\n        var d = tokens[i + 1];\n\n        if (c === ' ' || c === '\\t' || c === '\\n') {\n          /* void */\n        } else if (c === '+') {\n          plus++;\n        } else if (c === '-') {\n          minus++;\n        } else {\n\n          if (plus + minus === 0) {\n            throw new Error('Parse error' + c);\n          }\n          var g = iMap[c];\n\n          // Is the current token an imaginary sign?\n          if (g !== undefined) {\n\n            // Is the following token a number?\n            if (d !== ' ' && !isNaN(d)) {\n              c = d;\n              i++;\n            } else {\n              c = '1';\n            }\n\n          } else {\n\n            if (isNaN(c)) {\n              throw new Error('Parser error');\n            }\n\n            g = iMap[d];\n\n            if (g !== undefined) {\n              i++;\n            }\n          }\n\n          dest[g || 'w'] += parseFloat((minus % 2 ? '-' : '') + c);\n          plus = minus = 0;\n        }\n      }\n\n      // Still something on the stack\n      if (plus + minus > 0) {\n        throw new Error('Parser error');\n      }\n      return;\n    }\n\n    // If no single variable was given AND it was the constructor, set it to the identity\n    if (w === undefined && dest !== P) {\n      dest['w'] = 1;\n      dest['x'] =\n      dest['y'] =\n      dest['z'] = 0;\n    } else {\n\n      dest['w'] = w || 0;\n\n      // Note: This isn't setFromAxis, it's just syntactic sugar!\n      if (x && x.length === 3) {\n        dest['x'] = x[0];\n        dest['y'] = x[1];\n        dest['z'] = x[2];\n      } else {\n        dest['x'] = x || 0;\n        dest['y'] = y || 0;\n        dest['z'] = z || 0;\n      }\n    }\n  }\n\n  function numToStr(n, char, prev) {\n\n    var ret = '';\n\n    if (n !== 0) {\n\n      if (prev !== '') {\n        ret += n < 0 ? ' - ' : ' + ';\n      } else if (n < 0) {\n        ret += '-';\n      }\n\n      n = Math.abs(n);\n\n      if (1 !== n || char === '') {\n        ret += n;\n      }\n      ret += char;\n    }\n    return ret;\n  }\n\n  /**\n   * Quaternion constructor\n   *\n   * @constructor\n   * @param {number|Object|string} w real\n   * @param {number=} x imag\n   * @param {number=} y imag\n   * @param {number=} z imag\n   * @returns {Quaternion}\n   */\n  function Quaternion(w, x, y, z) {\n\n    if (!(this instanceof Quaternion)) {\n      return new Quaternion(w, x, y, z);\n    }\n\n    parse(this, w, x, y, z);\n  }\n\n  Quaternion.prototype = {\n    'w': 1,\n    'x': 0,\n    'y': 0,\n    'z': 0,\n    /**\n     * Adds two quaternions Q1 and Q2\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {Quaternion}\n     */\n    'add': function(w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      // Q1 + Q2 := [w1, v1] + [w2, v2] = [w1 + w2, v1 + v2]\n\n      return new Quaternion(\n        this['w'] + P['w'],\n        this['x'] + P['x'],\n        this['y'] + P['y'],\n        this['z'] + P['z']);\n    },\n    /**\n     * Subtracts a quaternions Q2 from Q1\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {Quaternion}\n     */\n    'sub': function(w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      // Q1 - Q2 := Q1 + (-Q2)\n      //          = [w1, v1] - [w2, v2] = [w1 - w2, v1 - v2]\n\n      return new Quaternion(\n        this['w'] - P['w'],\n        this['x'] - P['x'],\n        this['y'] - P['y'],\n        this['z'] - P['z']);\n    },\n    /**\n     * Calculates the additive inverse, or simply it negates the quaternion\n     *\n     * @returns {Quaternion}\n     */\n    'neg': function() {\n\n      // -Q := [-w, -v]\n\n      return new Quaternion(-this['w'], -this['x'], -this['y'], -this['z']);\n    },\n    /**\n     * Calculates the length/modulus/magnitude or the norm of a quaternion\n     *\n     * @returns {number}\n     */\n    'norm': function() {\n\n      // |Q| := sqrt(|Q|^2)\n\n      // The unit quaternion has |Q| = 1\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      return Math.sqrt(w * w + x * x + y * y + z * z);\n    },\n    /**\n     * Calculates the squared length/modulus/magnitude or the norm of a quaternion\n     *\n     * @returns {number}\n     */\n    'normSq': function() {\n\n      // |Q|^2 := [w, v] * [w, -v]\n      //        = [w^2 + dot(v, v), -w * v + w * v + cross(v, -v)]\n      //        = [w^2 + |v|^2, 0]\n      //        = [w^2 + dot(v, v), 0]\n      //        = dot(Q, Q)\n      //        = Q * Q'\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      return w * w + x * x + y * y + z * z;\n    },\n    /**\n     * Normalizes the quaternion to have |Q| = 1 as long as the norm is not zero\n     * Alternative names are the signum, unit or versor\n     *\n     * @returns {Quaternion}\n     */\n    'normalize': function() {\n\n      // Q* := Q / |Q|\n\n      // unrolled Q.scale(1 / Q.norm())\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      var norm = Math.sqrt(w * w + x * x + y * y + z * z);\n\n      if (norm < Quaternion['EPSILON']) {\n        return Quaternion['ZERO'];\n      }\n\n      norm = 1 / norm;\n\n      return new Quaternion(w * norm, x * norm, y * norm, z * norm);\n    },\n    /**\n     * Calculates the Hamilton product of two quaternions\n     * Leaving out the imaginary part results in just scaling the quat\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {Quaternion}\n     */\n    'mul': function(w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      // Q1 * Q2 = [w1 * w2 - dot(v1, v2), w1 * v2 + w2 * v1 + cross(v1, v2)]\n\n      // Not commutative because cross(v1, v2) != cross(v2, v1)!\n\n      var w1 = this['w'];\n      var x1 = this['x'];\n      var y1 = this['y'];\n      var z1 = this['z'];\n\n      var w2 = P['w'];\n      var x2 = P['x'];\n      var y2 = P['y'];\n      var z2 = P['z'];\n\n      return new Quaternion(\n        w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2,\n        w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2,\n        w1 * y2 + y1 * w2 + z1 * x2 - x1 * z2,\n        w1 * z2 + z1 * w2 + x1 * y2 - y1 * x2);\n    },\n    /**\n     * Scales a quaternion by a scalar, faster than using multiplication\n     *\n     * @param {number} s scaling factor\n     * @returns {Quaternion}\n     */\n    'scale': function(s) {\n\n      return new Quaternion(\n        this['w'] * s,\n        this['x'] * s,\n        this['y'] * s,\n        this['z'] * s);\n    },\n    /**\n     * Calculates the dot product of two quaternions\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {number}\n     */\n    'dot': function(w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      // dot(Q1, Q2) := w1 * w2 + dot(v1, v2)\n\n      return this['w'] * P['w'] + this['x'] * P['x'] + this['y'] * P['y'] + this['z'] * P['z'];\n    },\n    /**\n     * Calculates the inverse of a quat for non-normalized quats such that\n     * Q^-1 * Q = 1 and Q * Q^-1 = 1\n     *\n     * @returns {Quaternion}\n     */\n    'inverse': function() {\n\n      // Q^-1 := Q' / |Q|^2\n      //       = [w / (w^2 + |v|^2), -v / (w^2 + |v|^2)]\n\n      // Proof:\n      // Q * Q^-1 = [w, v] * [w / (w^2 + |v|^2), -v / (w^2 + |v|^2)]\n      //          = [1, 0]\n      // Q^-1 * Q = [w / (w^2 + |v|^2), -v / (w^2 + |v|^2)] * [w, v]\n      //          = [1, 0].\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      var normSq = w * w + x * x + y * y + z * z;\n\n      if (normSq === 0) {\n        return Quaternion['ZERO']; // TODO: Is the result zero or one when the norm is zero?\n      }\n\n      normSq = 1 / normSq;\n\n      return new Quaternion(w * normSq, -x * normSq, -y * normSq, -z * normSq);\n    },\n    /**\n     * Multiplies a quaternion with the inverse of a second quaternion\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {Quaternion}\n     */\n    'div': function(w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      // Q1 / Q2 := Q1 * Q2^-1\n\n      var w1 = this['w'];\n      var x1 = this['x'];\n      var y1 = this['y'];\n      var z1 = this['z'];\n\n      var w2 = P['w'];\n      var x2 = P['x'];\n      var y2 = P['y'];\n      var z2 = P['z'];\n\n      var normSq = w2 * w2 + x2 * x2 + y2 * y2 + z2 * z2;\n\n      if (normSq === 0) {\n        return Quaternion['ZERO']; // TODO: Is the result zero or one when the norm is zero?\n      }\n\n      normSq = 1 / normSq;\n\n      return new Quaternion(\n        (w1 * w2 + x1 * x2 + y1 * y2 + z1 * z2) * normSq,\n        (x1 * w2 - w1 * x2 - y1 * z2 + z1 * y2) * normSq,\n        (y1 * w2 - w1 * y2 - z1 * x2 + x1 * z2) * normSq,\n        (z1 * w2 - w1 * z2 - x1 * y2 + y1 * x2) * normSq);\n    },\n    /**\n     * Calculates the conjugate of a quaternion\n     *\n     * @returns {Quaternion}\n     */\n    'conjugate': function() {\n\n      // Q' = [s, -v]\n\n      // If the quaternion is normalized,\n      // the conjugate is the inverse of the quaternion - but faster\n      // Q' * Q = Q * Q' = 1\n\n      // Additionally, the conjugate of a unit quaternion is a rotation with the same\n      // angle but the opposite axis.\n\n      // Moreover the following property holds:\n      // (Q1 * Q2)' = Q2' * Q1'\n\n      return new Quaternion(this['w'], -this['x'], -this['y'], -this['z']);\n    },\n    /**\n     * Calculates the natural exponentiation of the quaternion\n     *\n     * @returns {Quaternion}\n     */\n    'exp': function() {\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      var vNorm = Math.sqrt(x * x + y * y + z * z);\n      var wExp = Math.exp(w);\n      var scale = wExp / vNorm * Math.sin(vNorm);\n\n      if (vNorm === 0) {\n        //return new Quaternion(wExp * Math.cos(vNorm), 0, 0, 0);\n        return new Quaternion(wExp, 0, 0, 0);\n      }\n\n      return new Quaternion(\n        wExp * Math.cos(vNorm),\n        x * scale,\n        y * scale,\n        z * scale);\n    },\n    /**\n     * Calculates the natural logarithm of the quaternion\n     *\n     * @returns {Quaternion}\n     */\n    'log': function() {\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      if (y === 0 && z === 0) {\n        return new Quaternion(\n          logHypot(w, x),\n          Math.atan2(x, w), 0, 0);\n      }\n\n      var qNorm2 = x * x + y * y + z * z + w * w;\n      var vNorm = Math.sqrt(x * x + y * y + z * z);\n\n      var scale = Math.atan2(vNorm, w) / vNorm;\n\n      return new Quaternion(\n        Math.log(qNorm2) * 0.5,\n        x * scale,\n        y * scale,\n        z * scale);\n    },\n    /**\n     * Calculates the power of a quaternion raised to a real number or another quaternion\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {Quaternion}\n     */\n    'pow': function(w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      if (P['y'] === 0 && P['z'] === 0) {\n\n        if (P['w'] === 1 && P['x'] === 0) {\n          return this;\n        }\n\n        if (P['w'] === 0 && P['x'] === 0) {\n          return Quaternion['ONE'];\n        }\n\n        // Check if we can operate in C\n        // Borrowed from complex.js\n        if (this['y'] === 0 && this['z'] === 0) {\n\n          var a = this['w'];\n          var b = this['x'];\n\n          if (a === 0 && b === 0) {\n            return Quaternion['ZERO'];\n          }\n\n          var arg = Math.atan2(b, a);\n          var loh = logHypot(a, b);\n\n          if (P['x'] === 0) {\n\n            if (b === 0 && a >= 0) {\n\n              return new Quaternion(Math.pow(a, P['w']), 0, 0, 0);\n\n            } else if (a === 0) {\n\n              switch (P['w'] % 4) {\n                case 0:\n                  return new Quaternion(Math.pow(b, P['w']), 0, 0, 0);\n                case 1:\n                  return new Quaternion(0, Math.pow(b, P['w']), 0, 0);\n                case 2:\n                  return new Quaternion(-Math.pow(b, P['w']), 0, 0, 0);\n                case 3:\n                  return new Quaternion(0, -Math.pow(b, P['w']), 0, 0);\n              }\n            }\n          }\n\n          a = Math.exp(P['w'] * loh - P['x'] * arg);\n          b = P['x'] * loh + P['w'] * arg;\n          return new Quaternion(\n            a * Math.cos(b),\n            a * Math.sin(b), 0, 0);\n        }\n      }\n\n      // Normal quaternion behavior\n      // q^p = e^ln(q^p) = e^(ln(q)*p)\n      return this['log']()['mul'](P)['exp']();\n    },\n    /**\n     * Checks if two quats are the same\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {boolean}\n     */\n    'equals': function(w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      var eps = Quaternion['EPSILON'];\n\n      // maybe check for NaN's here?\n      return Math.abs(P['w'] - this['w']) < eps\n        && Math.abs(P['x'] - this['x']) < eps\n        && Math.abs(P['y'] - this['y']) < eps\n        && Math.abs(P['z'] - this['z']) < eps;\n    },\n    /**\n     * Checks if all parts of a quaternion are finite\n     *\n     * @returns {boolean}\n     */\n    'isFinite': function() {\n\n      return isFinite(this['w']) && isFinite(this['x']) && isFinite(this['y']) && isFinite(this['z']);\n    },\n    /**\n     * Checks if any of the parts of the quaternion is not a number\n     *\n     * @returns {boolean}\n     */\n    'isNaN': function() {\n\n      return isNaN(this['w']) || isNaN(this['x']) || isNaN(this['y']) || isNaN(this['z']);\n    },\n    /**\n     * Gets the Quaternion as a well formatted string\n     *\n     * @returns {string}\n     */\n    'toString': function() {\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n      var ret = '';\n\n      if (isNaN(w) || isNaN(x) || isNaN(y) || isNaN(z)) {\n        return 'NaN';\n      }\n\n      // Alternative design?\n      // '(%f, [%f %f %f])'\n\n      ret = numToStr(w, '', ret);\n      ret += numToStr(x, 'i', ret);\n      ret += numToStr(y, 'j', ret);\n      ret += numToStr(z, 'k', ret);\n\n      if ('' === ret)\n        return '0';\n\n      return ret;\n    },\n    /**\n     * Returns the real part of the quaternion\n     *\n     * @returns {number}\n     */\n    'real': function() {\n\n      return this['w'];\n    },\n    /**\n     * Returns the imaginary part of the quaternion as a 3D vector / array\n     *\n     * @returns {Array}\n     */\n    'imag': function() {\n\n      return [this['x'], this['y'], this['z']];\n    },\n    /**\n     * Gets the actual quaternion as a 4D vector / array\n     *\n     * @returns {Array}\n     */\n    'toVector': function() {\n\n      return [this['w'], this['x'], this['y'], this['z']];\n    },\n    /**\n     * Calculates the 3x3 rotation matrix for the current quat\n     *\n     * @param {boolean=} twoD\n     * @returns {Array}\n     */\n    'toMatrix': function(twoD) {\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      var wx = w * x, wy = w * y, wz = w * z;\n      var xx = x * x, xy = x * y, xz = x * z;\n      var yy = y * y, yz = y * z, zz = z * z;\n\n      if (twoD) {\n        return [\n          [1 - 2 * (yy + zz), 2 * (xy - wz), 2 * (xz + wy)],\n          [2 * (xy + wz), 1 - 2 * (xx + zz), 2 * (yz - wx)],\n          [2 * (xz - wy), 2 * (yz + wx), 1 - 2 * (xx + yy)]];\n      }\n\n      return [\n        1 - 2 * (yy + zz), 2 * (xy - wz), 2 * (xz + wy),\n        2 * (xy + wz), 1 - 2 * (xx + zz), 2 * (yz - wx),\n        2 * (xz - wy), 2 * (yz + wx), 1 - 2 * (xx + yy)];\n    },\n    /**\n     * Calculates the homogeneous 4x4 rotation matrix for the current quat\n     *\n     * @param {boolean=} twoD\n     * @returns {Array}\n     */\n    'toMatrix4': function(twoD) {\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      var wx = w * x, wy = w * y, wz = w * z;\n      var xx = x * x, xy = x * y, xz = x * z;\n      var yy = y * y, yz = y * z, zz = z * z;\n\n      if (twoD) {\n        return [\n          [1 - 2 * (yy + zz), 2 * (xy - wz), 2 * (xz + wy), 0],\n          [2 * (xy + wz), 1 - 2 * (xx + zz), 2 * (yz - wx), 0],\n          [2 * (xz - wy), 2 * (yz + wx), 1 - 2 * (xx + yy), 0],\n          [0, 0, 0, 1]];\n      }\n\n      return [\n        1 - 2 * (yy + zz), 2 * (xy - wz), 2 * (xz + wy), 0,\n        2 * (xy + wz), 1 - 2 * (xx + zz), 2 * (yz - wx), 0,\n        2 * (xz - wy), 2 * (yz + wx), 1 - 2 * (xx + yy), 0,\n        0, 0, 0, 1];\n    },\n    /**\n     * Calculates the Euler angles represented by the current quat\n     * \n     * @returns {Object}\n     */\n    'toEuler': function() {\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      var t = 2 * (w * y - z * x);\n\n      return {\n        // X-axis rotation\n        roll: Math.atan2(2 * (w * x + y * z), 1 - 2 * (x * x + y * y)),\n        // Y-axis rotation\n        pitch: t >= 1 ? Math.PI / 2 : (t <= -1 ? -Math.PI / 2 : Math.asin(t)),\n        // Z-axis rotation\n        yaw: Math.atan2(2 * (w * z + x * y), 1 - 2 * (y * y + z * z))\n      };\n    },\n    /**\n     * Clones the actual object\n     *\n     * @returns {Quaternion}\n     */\n    'clone': function() {\n\n      return new Quaternion(this);\n    },\n    /**\n     * Rotates a vector according to the current quaternion, assumes |q|=1\n     * @link https://www.xarg.org/proof/vector-rotation-using-quaternions/\n     *\n     * @param {Array} v The vector to be rotated\n     * @returns {Array}\n     */\n    'rotateVector': function(v) {\n\n      var qw = this['w'];\n      var qx = this['x'];\n      var qy = this['y'];\n      var qz = this['z'];\n\n      var vx = v[0];\n      var vy = v[1];\n      var vz = v[2];\n\n      // t = 2q x v\n      var tx = 2 * (qy * vz - qz * vy);\n      var ty = 2 * (qz * vx - qx * vz);\n      var tz = 2 * (qx * vy - qy * vx);\n\n      // v + w t + q x t\n      return [\n        vx + qw * tx + qy * tz - qz * ty,\n        vy + qw * ty + qz * tx - qx * tz,\n        vz + qw * tz + qx * ty - qy * tx];\n    },\n\n    /**\n     * Gets a function to spherically interpolate between two quaternions\n     * \n     * @returns Function\n     */\n    'slerp': function(w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      // slerp(Q1, Q2, t) := Q1(Q1^-1 Q2)^t\n\n      var w1 = this['w'];\n      var x1 = this['x'];\n      var y1 = this['y'];\n      var z1 = this['z'];\n\n      var w2 = P['w'];\n      var x2 = P['x'];\n      var y2 = P['y'];\n      var z2 = P['z'];\n\n      var cosTheta0 = w1 * w2 + x1 * x2 + y1 * y2 + z1 * z2;\n\n      if (cosTheta0 < 0) {\n        w1 = -w1;\n        x1 = -x1;\n        y1 = -y1;\n        z1 = -z1;\n        cosTheta0 = -cosTheta0;\n      }\n\n      if (cosTheta0 >= 1 - Quaternion['EPSILON']) {\n        return function(pct) {\n          return new Quaternion(\n            w1 + pct * (w2 - w1),\n            x1 + pct * (x2 - x1),\n            y1 + pct * (y2 - y1),\n            z1 + pct * (z2 - z1))['normalize']();\n        };\n      }\n\n      var Theta0 = Math.acos(cosTheta0);\n      var sinTheta0 = Math.sin(Theta0);\n\n      return function(pct) {\n\n        var Theta = Theta0 * pct;\n        var sinTheta = Math.sin(Theta);\n        var cosTheta = Math.cos(Theta);\n\n        var s0 = cosTheta - cosTheta0 * sinTheta / sinTheta0;\n        var s1 = sinTheta / sinTheta0;\n\n        return new Quaternion(\n          s0 * w1 + s1 * w2,\n          s0 * x1 + s1 * x2,\n          s0 * y1 + s1 * y2,\n          s0 * z1 + s1 * z2);\n      };\n    }\n  };\n\n  Quaternion['ZERO'] = new Quaternion(0, 0, 0, 0); // This is the additive identity Quaternion\n  Quaternion['ONE'] = new Quaternion(1, 0, 0, 0); // This is the multiplicative identity Quaternion\n  Quaternion['I'] = new Quaternion(0, 1, 0, 0);\n  Quaternion['J'] = new Quaternion(0, 0, 1, 0);\n  Quaternion['K'] = new Quaternion(0, 0, 0, 1);\n  Quaternion['EPSILON'] = 1e-16;\n\n  /**\n   * Creates quaternion by a rotation given as axis-angle orientation\n   *\n   * @param {Array} axis The axis around which to rotate\n   * @param {number} angle The angle in radians\n   * @returns {Quaternion}\n   */\n  Quaternion['fromAxisAngle'] = function(axis, angle) {\n\n    // Q = [cos(angle / 2), v * sin(angle / 2)]\n\n    var halfAngle = angle * 0.5;\n\n    var a = axis[0];\n    var b = axis[1];\n    var c = axis[2];\n\n    var sin_2 = Math.sin(halfAngle);\n    var cos_2 = Math.cos(halfAngle);\n\n    var sin_norm = sin_2 / Math.sqrt(a * a + b * b + c * c);\n\n    return new Quaternion(cos_2, a * sin_norm, b * sin_norm, c * sin_norm);\n  };\n\n  /**\n   * Calculates the quaternion to rotate one vector onto another\n   * @link https://www.xarg.org/proof/quaternion-from-two-vectors/\n   *\n   * @param {Array} u\n   * @param {Array} v\n   */\n  Quaternion['fromBetweenVectors'] = function(u, v) {\n\n    var ux = u[0];\n    var uy = u[1];\n    var uz = u[2];\n\n    var vx = v[0];\n    var vy = v[1];\n    var vz = v[2];\n\n    var dot = ux * vx + uy * vy + uz * vz;\n\n    // Parallel check (TODO must be normalized)\n    if (dot >= 1 - Quaternion['EPSILON']) {\n      //return Quaternion['ONE'];\n    }\n\n    // Close to PI @TODO\n    //if (1 + dot <= Quaternion['EPSILON']) {\n    // return Quaternion.fromAxisAngle(Math.abs(ux) > Math.abs(uz) ? [-uy,  ux, 0] : [0, -uz,  uy], 0) -> OR\n    // return Quaternion.fromAxisAngle(Math.abs(ux) > Math.abs(uz) ? [ uy, -ux, 0] : [0,  uz, -uy], 0)\n    //}\n\n    var wx = uy * vz - uz * vy;\n    var wy = uz * vx - ux * vz;\n    var wz = ux * vy - uy * vx;\n\n    return new Quaternion(\n      dot + Math.sqrt(dot * dot + wx * wx + wy * wy + wz * wz),\n      wx,\n      wy,\n      wz\n    ).normalize();\n  };\n\n  /**\n   * Gets a spherical random number\n   * @link http://planning.cs.uiuc.edu/node198.html\n   */\n  Quaternion['random'] = function() {\n\n    var u1 = Math.random();\n    var u2 = Math.random();\n    var u3 = Math.random();\n\n    var s = Math.sqrt(1 - u1);\n    var t = Math.sqrt(u1);\n\n    return new Quaternion(\n      t * Math.cos(2 * Math.PI * u3),\n      s * Math.sin(2 * Math.PI * u2),\n      s * Math.cos(2 * Math.PI * u2),\n      t * Math.sin(2 * Math.PI * u3)\n    );\n  };\n\n  /**\n   * Creates a quaternion by a rotation given by Euler angles\n   *\n   * @param {number} phi\n   * @param {number} theta\n   * @param {number} psi\n   * @param {string=} order\n   * @returns {Quaternion}\n   */\n  Quaternion['fromEuler'] = function(phi, theta, psi, order) {\n\n    var _x = phi * 0.5;\n    var _y = theta * 0.5;\n    var _z = psi * 0.5;\n\n    var cX = Math.cos(_x);\n    var cY = Math.cos(_y);\n    var cZ = Math.cos(_z);\n\n    var sX = Math.sin(_x);\n    var sY = Math.sin(_y);\n    var sZ = Math.sin(_z);\n\n    if (order === undefined || order === 'ZXY') {\n      // axisAngle([0, 0, 1], x) * axisAngle([1, 0, 0], y) * axisAngle([0, 1, 0], z)\n      return new Quaternion(\n        cX * cY * cZ - sX * sY * sZ,\n        cX * cZ * sY - cY * sX * sZ,\n        cX * cY * sZ + cZ * sX * sY,\n        cY * cZ * sX + cX * sY * sZ);\n    }\n\n    if (order === 'XYZ' || order === 'RPY') {\n      // axisAngle([1, 0, 0], x) * axisAngle([0, 1, 0], y) * axisAngle([0, 0, 1], z)\n      return new Quaternion(\n        cX * cY * cZ - sX * sY * sZ,\n        cY * cZ * sX + cX * sY * sZ,\n        cX * cZ * sY - cY * sX * sZ,\n        cX * cY * sZ + cZ * sX * sY);\n    }\n\n    if (order === 'YXZ') {\n      // axisAngle([0, 1, 0], x) * axisAngle([1, 0, 0], y) * axisAngle([0, 0, 1], z)\n      return new Quaternion(\n        cX * cY * cZ + sX * sY * sZ,\n        cX * cZ * sY + cY * sX * sZ,\n        cY * cZ * sX - cX * sY * sZ,\n        cX * cY * sZ - cZ * sX * sY);\n    }\n\n    if (order === 'ZYX' || order === 'YPR') {\n      // axisAngle([0, 0, 1], x) * axisAngle([0, 1, 0], y) * axisAngle([1, 0, 0], z)\n      return new Quaternion(\n        cX * cY * cZ + sX * sY * sZ,\n        cX * cY * sZ - cZ * sX * sY,\n        cX * cZ * sY + cY * sX * sZ,\n        cY * cZ * sX - cX * sY * sZ);\n    }\n\n    if (order === 'YZX') {\n      // axisAngle([0, 1, 0], x) * axisAngle([0, 0, 1], y) * axisAngle([1, 0, 0], z)\n      return new Quaternion(\n        cX * cY * cZ - sX * sY * sZ,\n        cX * cY * sZ + cZ * sX * sY,\n        cY * cZ * sX + cX * sY * sZ,\n        cX * cZ * sY - cY * sX * sZ);\n    }\n\n    if (order === 'XZY') {\n      // axisAngle([1, 0, 0], x) * axisAngle([0, 0, 1], z) * axisAngle([0, 1, 0], y)\n      return new Quaternion(\n        cX * cY * cZ + sX * sY * sZ,\n        cY * cZ * sX - cX * sY * sZ,\n        cX * cY * sZ - cZ * sX * sY,\n        cX * cZ * sY + cY * sX * sZ);\n    }\n    return null;\n  };\n\n  /**\n   * Creates a quaternion by a rotation matrix\n   *\n   * @param {Array} matrix\n   * @returns {Quaternion}\n   */\n  Quaternion['fromMatrix'] = function(matrix) {\n\n    if (matrix.length === 9) {\n\n      var m00 = matrix[0];\n      var m01 = matrix[1];\n      var m02 = matrix[2];\n\n      var m10 = matrix[3];\n      var m11 = matrix[4];\n      var m12 = matrix[5];\n\n      var m20 = matrix[6];\n      var m21 = matrix[7];\n      var m22 = matrix[8];\n\n    } else {\n      var m00 = matrix[0][0];\n      var m01 = matrix[0][1];\n      var m02 = matrix[0][2];\n\n      var m10 = matrix[1][0];\n      var m11 = matrix[1][1];\n      var m12 = matrix[1][2];\n\n      var m20 = matrix[2][0];\n      var m21 = matrix[2][1];\n      var m22 = matrix[2][2];\n    }\n\n    var tr = m00 + m11 + m22;\n\n    if (tr > 0) { \n      var S = Math.sqrt(tr+1.0) * 2; // S=4*qw\n\n      return new Quaternion(\n        0.25 * S,\n        (m21 - m12) / S,\n        (m02 - m20) / S,\n        (m10 - m01) / S);\n    } else if ((m00 > m11)&(m00 > m22)) { \n      var S = Math.sqrt(1.0 + m00 - m11 - m22) * 2; // S=4*qx\n\n      return new Quaternion(\n        (m21 - m12) / S,\n        0.25 * S,\n        (m01 + m10) / S,\n        (m02 + m20) / S);\n    } else if (m11 > m22) { \n      var S = Math.sqrt(1.0 + m11 - m00 - m22) * 2; // S=4*qy\n\n      return new Quaternion(\n        (m02 - m20) / S,\n        (m01 + m10) / S,\n        0.25 * S,\n        (m12 + m21) / S);\n    } else { \n      var S = Math.sqrt(1.0 + m22 - m00 - m11) * 2; // S=4*qz\n\n      return new Quaternion(\n        (m10 - m01) / S,\n        (m02 + m20) / S,\n        (m12 + m21) / S,\n        0.25 * S);\n    }\n  };\n\n  if (typeof define === 'function' && define['amd']) {\n    define([], function() {\n      return Quaternion;\n    });\n  } else if (typeof exports === 'object') {\n    Object.defineProperty(Quaternion, \"__esModule\", { 'value': true });\n    Quaternion['default'] = Quaternion;\n    Quaternion['Quaternion'] = Quaternion;\n    module['exports'] = Quaternion;\n  } else {\n    root['Quaternion'] = Quaternion;\n  }\n\n})(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
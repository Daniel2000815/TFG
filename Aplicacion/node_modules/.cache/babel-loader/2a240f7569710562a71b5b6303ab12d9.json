{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _clone from \"lodash/clone\";\nimport _isNil from \"lodash/isNil\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _isArray from \"lodash/isArray\";\nimport _intersection from \"lodash/intersection\";\nimport shallowEqual from '../utils/shallowEqual';\nimport shallowEqualArray from '../utils/shallowEqualArray';\nimport { TREE_NODE_DROP_POSITION } from '../constants';\nvar SEARCH_BAR_HEIGHT = 48;\nvar MENU_PADDING = 12; // Tree Node 之间的 间隔\n\nvar TREE_NODE_GAP = 4;\n/**\n * 判断当前节点是否应该显示\n * @param {*} expandItemValues\n * @param {*} parentKeys\n */\n\nexport function shouldShowNodeByExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n\n  var intersectionKeys = _intersection(expandItemValues, parentKeys);\n\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * 拍平树结构为数组\n * @param {*} tree\n * @param {*} childrenKey\n * @param {*} executor\n */\n\nexport function flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n\n  var flattenData = [];\n\n  var traverse = function traverse(data, parent) {\n    if (!_isArray(data)) {\n      return;\n    }\n\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      node.parent = parent;\n      flattenData.push(_extends({}, node));\n\n      if (item[childrenKey]) {\n        traverse(item[childrenKey], item);\n      }\n    });\n  };\n\n  traverse(tree, null);\n  return flattenData;\n}\n/**\n * 获取树节点所有的祖先节点\n * @param {*} node\n */\n\nexport function getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n\n  var parents = [];\n\n  var traverse = function traverse(node) {\n    if (node === null || node === void 0 ? void 0 : node[parentKey]) {\n      traverse(node[parentKey]);\n\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n\n  traverse(node);\n  return parents;\n}\n/**\n * 获取 VirtualList 的高度\n * @param {*} inline\n * @param {*} height\n */\n\nexport function getVirtualLisHeight(inline, searchable, height) {\n  if (height === void 0) {\n    height = 0;\n  }\n\n  var searchBarHeight = searchable ? SEARCH_BAR_HEIGHT : 0;\n  return inline ? height - MENU_PADDING * 2 : height - searchBarHeight - MENU_PADDING * 2;\n}\n/**\n * 判断节点是否存在可见的子节点。\n * @param node\n */\n\nexport function hasVisibleChildren(node, childrenKey) {\n  if (!Array.isArray(node[childrenKey])) {\n    return false;\n  }\n\n  return node[childrenKey].some(function (child) {\n    return child.visible;\n  });\n}\n/**\n * 废弃 prop warning\n * @param prop\n */\n\nexport function treeDeprecatedWarning(props, keys) {\n  if (keys === void 0) {\n    keys = [];\n  }\n\n  keys.forEach(function (key) {\n    if (!_isUndefined(props[key])) {\n      console.warn(\"'Warning: \" + key + \" is deprecated and will be removed in a future release.'\");\n    }\n  });\n}\n/**\n * 浅比较两个数组是否不一样\n * @param a\n * @param b\n */\n\nexport function compareArray(a, b) {\n  return _isArray(a) && _isArray(b) && !shallowEqualArray(a, b);\n}\n/**\n * 获取 expandAll 的 value\n * @param props\n */\n\nexport function getExpandAll(props) {\n  var expandAll = props.expandAll,\n      defaultExpandAll = props.defaultExpandAll;\n  return !_isUndefined(expandAll) ? expandAll : defaultExpandAll;\n}\n/**\n * 获取 expandItemValues 的 value\n * @param props\n */\n\nexport function getExpandItemValues(props) {\n  var expandItemValues = props.expandItemValues,\n      defaultExpandItemValues = props.defaultExpandItemValues;\n\n  if (!_isUndefined(expandItemValues) && Array.isArray(expandItemValues)) {\n    return expandItemValues;\n  }\n\n  if (!_isUndefined(defaultExpandItemValues) && Array.isArray(defaultExpandItemValues)) {\n    return defaultExpandItemValues;\n  }\n\n  return [];\n}\n/**\n * 获取节点展开状态\n * @param node\n * @param props\n */\n\nexport function getExpandState(node, props) {\n  var _node$childrenKey;\n\n  var valueKey = props.valueKey,\n      childrenKey = props.childrenKey,\n      expandItemValues = props.expandItemValues;\n  var expandAll = getExpandAll(props);\n  var expand = getExpandItemValues(props).some(function (value) {\n    return shallowEqual(node[valueKey], value);\n  });\n\n  if (!_isUndefined(expandItemValues)) {\n    return expand;\n  } else if ((_node$childrenKey = node[childrenKey]) === null || _node$childrenKey === void 0 ? void 0 : _node$childrenKey.length) {\n    if (!_isNil(node.expand)) {\n      return !!node.expand;\n    } else if (expandAll) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return false;\n}\n/**\n * 获取拖拽节点及子节点的key\n * @param node\n * @param childrenKey\n * @param valueKey\n */\n\nexport function getDragNodeKeys(dragNode, childrenKey, valueKey) {\n  var dragNodeKeys = [dragNode[valueKey]];\n\n  var traverse = function traverse(data) {\n    if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n      data.forEach(function (node) {\n        dragNodeKeys = dragNodeKeys.concat([node[valueKey]]);\n\n        if (node[childrenKey]) {\n          traverse(node[childrenKey]);\n        }\n      });\n    }\n  };\n\n  traverse(dragNode[childrenKey]);\n  return dragNodeKeys;\n}\nexport function calDropNodePosition(event, treeNodeElement) {\n  var clientY = event.clientY;\n\n  var _treeNodeElement$getB = treeNodeElement.getBoundingClientRect(),\n      top = _treeNodeElement$getB.top,\n      bottom = _treeNodeElement$getB.bottom;\n\n  var gap = TREE_NODE_GAP; // 处于节点下方\n\n  if (clientY >= bottom - gap && clientY <= bottom) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n  } // 处于节点上方\n\n\n  if (clientY <= top + gap && clientY >= top) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_TOP;\n  }\n\n  if (clientY >= top + gap && clientY <= bottom - gap) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER;\n  }\n\n  return -1;\n}\nexport function removeDragNode(data, params, _ref) {\n  var valueKey = _ref.valueKey,\n      childrenKey = _ref.childrenKey;\n  var dragNode = params.dragNode;\n\n  var traverse = function traverse(items, parent) {\n    for (var _index = 0; _index < items.length; _index += 1) {\n      var item = items[_index];\n\n      if (shallowEqual(item[valueKey], dragNode[valueKey])) {\n        items.splice(_index, 1); // 当 children 为空，需要删除 children 属性，不显示角标\n\n        if (items.length === 0 && parent) {\n          delete parent.children;\n        }\n\n        break;\n      }\n\n      if (Array.isArray(item[childrenKey])) {\n        traverse(item[childrenKey], item);\n      }\n    }\n  };\n\n  traverse(data);\n}\n/**\n * 移动节点valueKey，先删除 dragNode 原本所在的数据，再将 dragNode 移动到拖动的位置\n * @param data\n * @param params\n */\n\nexport function createUpdateTreeDataFunction(params, _ref2) {\n  var valueKey = _ref2.valueKey,\n      childrenKey = _ref2.childrenKey;\n  return function (tree) {\n    var data = [].concat(tree);\n    var dragNode = params.dragNode,\n        dropNode = params.dropNode,\n        dropNodePosition = params.dropNodePosition;\n    removeDragNode(data, params, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n\n    var updateTree = function updateTree(items) {\n      for (var _index2 = 0; _index2 < items.length; _index2 += 1) {\n        var item = items[_index2];\n\n        if (shallowEqual(item[valueKey], dropNode[valueKey])) {\n          // 拖拽到 dropNode内，作为 dropNode 的子节点\n          if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER) {\n            item[childrenKey] = _isNil(item[childrenKey]) ? [] : item[childrenKey];\n            item[childrenKey].push(dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_TOP) {\n            // 拖拽到 dropNode 的上面\n            items.splice(_index2, 0, dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM) {\n            // 拖拽到 dropNode 的下面\n            items.splice(_index2 + 1, 0, dragNode);\n            break;\n          }\n        }\n\n        if (Array.isArray(item[childrenKey]) && item[childrenKey].length > 0) {\n          updateTree(item[childrenKey]);\n        }\n      }\n    };\n\n    updateTree(data);\n    return [].concat(data);\n  };\n}\nexport function findNodeOfTree(data, check) {\n  var findNode = function findNode(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      var item = nodes[i];\n\n      if (_isArray(item.children)) {\n        var _node = findNode(item.children);\n\n        if (_node) {\n          return _node;\n        }\n      }\n\n      if (check(item)) {\n        return item;\n      }\n    }\n\n    return undefined;\n  };\n\n  return findNode(data);\n}\nexport function filterNodesOfTree(data, check) {\n  var findNodes = function findNodes(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    var nextNodes = [];\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      if (_isArray(nodes[i].children)) {\n        var nextChildren = findNodes(nodes[i].children);\n\n        if (nextChildren.length) {\n          var item = _clone(nodes[i]);\n\n          item.children = nextChildren;\n          nextNodes.push(item);\n          continue;\n        }\n      }\n\n      if (check(nodes[i])) {\n        nextNodes.push(nodes[i]);\n      }\n    }\n\n    return nextNodes;\n  };\n\n  return findNodes(data);\n}\n/**\n * 根据是否处于搜索状态来返回 expand 的值。如果处于搜索状态下，则展开所有的节点\n * @param searchKeyword\n * @param expand\n */\n\nexport function getExpandWhenSearching(searchKeyword, expand) {\n  return !_isEmpty(searchKeyword) ? true : expand;\n}","map":{"version":3,"names":["_extends","_isEmpty","_clone","_isNil","_isUndefined","_isArray","_intersection","shallowEqual","shallowEqualArray","TREE_NODE_DROP_POSITION","SEARCH_BAR_HEIGHT","MENU_PADDING","TREE_NODE_GAP","shouldShowNodeByExpanded","expandItemValues","parentKeys","intersectionKeys","length","flattenTree","tree","childrenKey","executor","flattenData","traverse","data","parent","forEach","item","index","node","push","getNodeParents","parentKey","valueKey","parents","getVirtualLisHeight","inline","searchable","height","searchBarHeight","hasVisibleChildren","Array","isArray","some","child","visible","treeDeprecatedWarning","props","keys","key","console","warn","compareArray","a","b","getExpandAll","expandAll","defaultExpandAll","getExpandItemValues","defaultExpandItemValues","getExpandState","_node$childrenKey","expand","value","getDragNodeKeys","dragNode","dragNodeKeys","concat","calDropNodePosition","event","treeNodeElement","clientY","_treeNodeElement$getB","getBoundingClientRect","top","bottom","gap","DRAG_OVER_BOTTOM","DRAG_OVER_TOP","DRAG_OVER","removeDragNode","params","_ref","items","_index","splice","children","createUpdateTreeDataFunction","_ref2","dropNode","dropNodePosition","updateTree","_index2","findNodeOfTree","check","findNode","nodes","i","_node","undefined","filterNodesOfTree","findNodes","nextNodes","nextChildren","getExpandWhenSearching","searchKeyword"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/rsuite/es/utils/treeUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _clone from \"lodash/clone\";\nimport _isNil from \"lodash/isNil\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _isArray from \"lodash/isArray\";\nimport _intersection from \"lodash/intersection\";\nimport shallowEqual from '../utils/shallowEqual';\nimport shallowEqualArray from '../utils/shallowEqualArray';\nimport { TREE_NODE_DROP_POSITION } from '../constants';\nvar SEARCH_BAR_HEIGHT = 48;\nvar MENU_PADDING = 12; // Tree Node 之间的 间隔\n\nvar TREE_NODE_GAP = 4;\n/**\n * 判断当前节点是否应该显示\n * @param {*} expandItemValues\n * @param {*} parentKeys\n */\n\nexport function shouldShowNodeByExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n\n  var intersectionKeys = _intersection(expandItemValues, parentKeys);\n\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * 拍平树结构为数组\n * @param {*} tree\n * @param {*} childrenKey\n * @param {*} executor\n */\n\nexport function flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n\n  var flattenData = [];\n\n  var traverse = function traverse(data, parent) {\n    if (!_isArray(data)) {\n      return;\n    }\n\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      node.parent = parent;\n      flattenData.push(_extends({}, node));\n\n      if (item[childrenKey]) {\n        traverse(item[childrenKey], item);\n      }\n    });\n  };\n\n  traverse(tree, null);\n  return flattenData;\n}\n/**\n * 获取树节点所有的祖先节点\n * @param {*} node\n */\n\nexport function getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n\n  var parents = [];\n\n  var traverse = function traverse(node) {\n    if (node === null || node === void 0 ? void 0 : node[parentKey]) {\n      traverse(node[parentKey]);\n\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n\n  traverse(node);\n  return parents;\n}\n/**\n * 获取 VirtualList 的高度\n * @param {*} inline\n * @param {*} height\n */\n\nexport function getVirtualLisHeight(inline, searchable, height) {\n  if (height === void 0) {\n    height = 0;\n  }\n\n  var searchBarHeight = searchable ? SEARCH_BAR_HEIGHT : 0;\n  return inline ? height - MENU_PADDING * 2 : height - searchBarHeight - MENU_PADDING * 2;\n}\n/**\n * 判断节点是否存在可见的子节点。\n * @param node\n */\n\nexport function hasVisibleChildren(node, childrenKey) {\n  if (!Array.isArray(node[childrenKey])) {\n    return false;\n  }\n\n  return node[childrenKey].some(function (child) {\n    return child.visible;\n  });\n}\n/**\n * 废弃 prop warning\n * @param prop\n */\n\nexport function treeDeprecatedWarning(props, keys) {\n  if (keys === void 0) {\n    keys = [];\n  }\n\n  keys.forEach(function (key) {\n    if (!_isUndefined(props[key])) {\n      console.warn(\"'Warning: \" + key + \" is deprecated and will be removed in a future release.'\");\n    }\n  });\n}\n/**\n * 浅比较两个数组是否不一样\n * @param a\n * @param b\n */\n\nexport function compareArray(a, b) {\n  return _isArray(a) && _isArray(b) && !shallowEqualArray(a, b);\n}\n/**\n * 获取 expandAll 的 value\n * @param props\n */\n\nexport function getExpandAll(props) {\n  var expandAll = props.expandAll,\n      defaultExpandAll = props.defaultExpandAll;\n  return !_isUndefined(expandAll) ? expandAll : defaultExpandAll;\n}\n/**\n * 获取 expandItemValues 的 value\n * @param props\n */\n\nexport function getExpandItemValues(props) {\n  var expandItemValues = props.expandItemValues,\n      defaultExpandItemValues = props.defaultExpandItemValues;\n\n  if (!_isUndefined(expandItemValues) && Array.isArray(expandItemValues)) {\n    return expandItemValues;\n  }\n\n  if (!_isUndefined(defaultExpandItemValues) && Array.isArray(defaultExpandItemValues)) {\n    return defaultExpandItemValues;\n  }\n\n  return [];\n}\n/**\n * 获取节点展开状态\n * @param node\n * @param props\n */\n\nexport function getExpandState(node, props) {\n  var _node$childrenKey;\n\n  var valueKey = props.valueKey,\n      childrenKey = props.childrenKey,\n      expandItemValues = props.expandItemValues;\n  var expandAll = getExpandAll(props);\n  var expand = getExpandItemValues(props).some(function (value) {\n    return shallowEqual(node[valueKey], value);\n  });\n\n  if (!_isUndefined(expandItemValues)) {\n    return expand;\n  } else if ((_node$childrenKey = node[childrenKey]) === null || _node$childrenKey === void 0 ? void 0 : _node$childrenKey.length) {\n    if (!_isNil(node.expand)) {\n      return !!node.expand;\n    } else if (expandAll) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return false;\n}\n/**\n * 获取拖拽节点及子节点的key\n * @param node\n * @param childrenKey\n * @param valueKey\n */\n\nexport function getDragNodeKeys(dragNode, childrenKey, valueKey) {\n  var dragNodeKeys = [dragNode[valueKey]];\n\n  var traverse = function traverse(data) {\n    if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n      data.forEach(function (node) {\n        dragNodeKeys = dragNodeKeys.concat([node[valueKey]]);\n\n        if (node[childrenKey]) {\n          traverse(node[childrenKey]);\n        }\n      });\n    }\n  };\n\n  traverse(dragNode[childrenKey]);\n  return dragNodeKeys;\n}\nexport function calDropNodePosition(event, treeNodeElement) {\n  var clientY = event.clientY;\n\n  var _treeNodeElement$getB = treeNodeElement.getBoundingClientRect(),\n      top = _treeNodeElement$getB.top,\n      bottom = _treeNodeElement$getB.bottom;\n\n  var gap = TREE_NODE_GAP; // 处于节点下方\n\n  if (clientY >= bottom - gap && clientY <= bottom) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n  } // 处于节点上方\n\n\n  if (clientY <= top + gap && clientY >= top) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_TOP;\n  }\n\n  if (clientY >= top + gap && clientY <= bottom - gap) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER;\n  }\n\n  return -1;\n}\nexport function removeDragNode(data, params, _ref) {\n  var valueKey = _ref.valueKey,\n      childrenKey = _ref.childrenKey;\n  var dragNode = params.dragNode;\n\n  var traverse = function traverse(items, parent) {\n    for (var _index = 0; _index < items.length; _index += 1) {\n      var item = items[_index];\n\n      if (shallowEqual(item[valueKey], dragNode[valueKey])) {\n        items.splice(_index, 1); // 当 children 为空，需要删除 children 属性，不显示角标\n\n        if (items.length === 0 && parent) {\n          delete parent.children;\n        }\n\n        break;\n      }\n\n      if (Array.isArray(item[childrenKey])) {\n        traverse(item[childrenKey], item);\n      }\n    }\n  };\n\n  traverse(data);\n}\n/**\n * 移动节点valueKey，先删除 dragNode 原本所在的数据，再将 dragNode 移动到拖动的位置\n * @param data\n * @param params\n */\n\nexport function createUpdateTreeDataFunction(params, _ref2) {\n  var valueKey = _ref2.valueKey,\n      childrenKey = _ref2.childrenKey;\n  return function (tree) {\n    var data = [].concat(tree);\n    var dragNode = params.dragNode,\n        dropNode = params.dropNode,\n        dropNodePosition = params.dropNodePosition;\n    removeDragNode(data, params, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n\n    var updateTree = function updateTree(items) {\n      for (var _index2 = 0; _index2 < items.length; _index2 += 1) {\n        var item = items[_index2];\n\n        if (shallowEqual(item[valueKey], dropNode[valueKey])) {\n          // 拖拽到 dropNode内，作为 dropNode 的子节点\n          if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER) {\n            item[childrenKey] = _isNil(item[childrenKey]) ? [] : item[childrenKey];\n            item[childrenKey].push(dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_TOP) {\n            // 拖拽到 dropNode 的上面\n            items.splice(_index2, 0, dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM) {\n            // 拖拽到 dropNode 的下面\n            items.splice(_index2 + 1, 0, dragNode);\n            break;\n          }\n        }\n\n        if (Array.isArray(item[childrenKey]) && item[childrenKey].length > 0) {\n          updateTree(item[childrenKey]);\n        }\n      }\n    };\n\n    updateTree(data);\n    return [].concat(data);\n  };\n}\nexport function findNodeOfTree(data, check) {\n  var findNode = function findNode(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      var item = nodes[i];\n\n      if (_isArray(item.children)) {\n        var _node = findNode(item.children);\n\n        if (_node) {\n          return _node;\n        }\n      }\n\n      if (check(item)) {\n        return item;\n      }\n    }\n\n    return undefined;\n  };\n\n  return findNode(data);\n}\nexport function filterNodesOfTree(data, check) {\n  var findNodes = function findNodes(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    var nextNodes = [];\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      if (_isArray(nodes[i].children)) {\n        var nextChildren = findNodes(nodes[i].children);\n\n        if (nextChildren.length) {\n          var item = _clone(nodes[i]);\n\n          item.children = nextChildren;\n          nextNodes.push(item);\n          continue;\n        }\n      }\n\n      if (check(nodes[i])) {\n        nextNodes.push(nodes[i]);\n      }\n    }\n\n    return nextNodes;\n  };\n\n  return findNodes(data);\n}\n/**\n * 根据是否处于搜索状态来返回 expand 的值。如果处于搜索状态下，则展开所有的节点\n * @param searchKeyword\n * @param expand\n */\n\nexport function getExpandWhenSearching(searchKeyword, expand) {\n  return !_isEmpty(searchKeyword) ? true : expand;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
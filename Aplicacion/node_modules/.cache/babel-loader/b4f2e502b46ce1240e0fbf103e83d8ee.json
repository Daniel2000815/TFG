{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tokenizer = void 0;\n\nvar Token_1 = require(\"./Token\");\n\nvar Utils_1 = require(\"../Core/Utils\");\n\nvar Math2_1 = require(\"../Functions/Math2\");\n\nvar Settings_1 = require(\"../Settings\");\n\nvar Node_1 = require(\"./Node\");\n\nvar Errors_1 = require(\"../Core/Errors\");\n\nvar ParityError = /*#__PURE__*/function (_Error) {\n  _inherits(ParityError, _Error);\n\n  var _super = _createSuper(ParityError);\n\n  function ParityError() {\n    var _this;\n\n    _classCallCheck(this, ParityError);\n\n    _this = _super.apply(this, arguments);\n    _this.name = 'ParityError';\n    return _this;\n  }\n\n  return _createClass(ParityError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar Tokenizer = /*#__PURE__*/function () {\n  function Tokenizer(functionsProvider, operators, units) {\n    _classCallCheck(this, Tokenizer);\n\n    this.preprocessors = {\n      names: [],\n      actions: []\n    };\n    this.functions = functionsProvider;\n    this.brackets = operators.getBrackets();\n    this.operators = operators;\n    this.units = units;\n  }\n  /*\n   * Tokenizes the string\n   * @param {String} e\n   * @returns {Token[]}\n   */\n\n\n  _createClass(Tokenizer, [{\n    key: \"tokenize\",\n    value: function tokenize(e) {\n      var shouldPrepare = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (shouldPrepare) {\n        e = this.prepareExpression(e);\n      }\n\n      var t = new InnerTokenizer(this.functions, this.brackets, this.operators, this.units, e);\n      return t.tokenize();\n    }\n  }, {\n    key: \"addPreprocessor\",\n    value: function addPreprocessor(name, action, order, shift_cells) {\n      var names = this.preprocessors.names || [];\n      var actions = this.preprocessors.actions || [];\n      if (typeof action !== 'function') //the person probably forgot to specify a name\n        throw new Errors_1.PreprocessorError('Incorrect parameters. Function expected!');\n\n      if (!order) {\n        names.push(name);\n        actions.push(action);\n      } else {\n        if (shift_cells) {\n          names.splice(order, 0, name);\n          actions.splice(order, 0, action);\n        } else {\n          names[order] = name;\n          actions[order] = action;\n        }\n      }\n    }\n  }, {\n    key: \"getPreprocessors\",\n    value: function getPreprocessors() {\n      var _a;\n\n      var preprocessors = {};\n      if ((_a = this.preprocessors.names) === null || _a === void 0 ? void 0 : _a.length) for (var i = 0, l = this.preprocessors.names.length; i < l; i++) {\n        var name = this.preprocessors.names[i] || '';\n        preprocessors[name] = {\n          order: i,\n          action: this.preprocessors.actions[i]\n        };\n      }\n      return preprocessors;\n    }\n  }, {\n    key: \"removePreprocessor\",\n    value: function removePreprocessor(name, shift_cells) {\n      var i = this.preprocessors.names.indexOf(name);\n\n      if (shift_cells) {\n        (0, Utils_1.remove)(this.preprocessors.names, i);\n        (0, Utils_1.remove)(this.preprocessors.actions, i);\n      } else {\n        this.preprocessors.names[i] = undefined;\n        this.preprocessors.actions[i] = undefined;\n      }\n    }\n  }, {\n    key: \"prepareExpression\",\n    value:\n    /*\n     * Preforms preprocessing on the string. Useful for making early modification before\n     * sending to the parser\n     * @param {String} e\n     */\n    function prepareExpression(e) {\n      var _this2 = this;\n\n      var _a;\n      /*\n       * Since variables cannot start with a number, the assumption is made that when this occurs the\n       * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for\n       * a side-by-side close and open parenthesis\n       */\n\n\n      e = String(e); //apply preprocessors\n\n      for (var i = 0; i < this.preprocessors.actions.length; i++) {\n        e = ((_a = this.preprocessors.actions[i]) === null || _a === void 0 ? void 0 : _a.call(this, e)) || e;\n      } //e = e.split(' ').join('');//strip empty spaces\n      //replace multiple spaces with one space\n\n\n      e = e.replace(/\\s+/g, ' '); //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\n\n      if (/e/gi.test(e)) {\n        //replace scientific numbers\n        e = e.replace(/-*\\d+\\.*\\d*e\\+?-?\\d+/gi, function (x) {\n          // @ts-ignore\n          return Math2_1.Math2.scientificToDecimal(x);\n        });\n      } //allow omission of multiplication after coefficients\n\n\n      e = e.replace(Settings_1.Settings.IMPLIED_MULTIPLICATION_REGEX, function (match, group1, group2, start, str) {\n        var first = str.charAt(start),\n            before = '',\n            d = '*';\n        if (!first.match(/[+\\-\\/*]/)) before = str.charAt(start - 1);\n        if (before.match(/[a-z]/i)) d = '';\n        return group1 + d + group2;\n      });\n      e = e.replace(/([a-z0-9_]+)/gi, function (match, a) {\n        if (!Settings_1.Settings.USE_MULTICHARACTER_VARS && !_this2.functions.getFunctionDescriptor(a)) {\n          if (!isNaN(a)) return a;\n          return a.split('').join('*');\n        }\n\n        return a;\n      }); //allow omission of multiplication sign between brackets\n\n      e = e.replace(/\\)\\(/g, ')*(') || '0'; //replace x(x+a) with x*(x+a)\n\n      while (true) {\n        var e_org = e; //store the original\n\n        e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\n          var g1 = a || c,\n              g2 = b || d;\n          if (_this2.functions.getFunctionDescriptor(g1)) //create a passthroughs for functions\n            return g1 + g2;\n          return g1 + '*' + g2;\n        }); //if the original equals the replace we're done\n\n        if (e_org === e) break;\n      }\n\n      return e;\n    }\n  }, {\n    key: \"tree\",\n    value: function tree(tokens) {\n      var Q = [];\n\n      for (var i = 0; i < tokens.length; i++) {\n        var e = tokens[i]; //Arrays indicate a new scope so parse that out\n\n        if (Array.isArray(e)) {\n          e = this.tree(e); //if it's a comma then it's just arguments\n\n          Q.push(e);\n          continue;\n        }\n\n        if (e.type === Token_1.Token.OPERATOR) {\n          if (e.is_prefix || e.postfix) {\n            //prefixes go to the left, postfix to the right\n            var location = e.is_prefix ? 'left' : 'right';\n            var last = Q.pop();\n            e = new Node_1.Node(e);\n            e[location] = last;\n            Q.push(e);\n          } else {\n            e = new Node_1.Node(e);\n            e.right = Q.pop();\n            e.left = Q.pop();\n            Q.push(e);\n          }\n        } else if (e.type === Token_1.Token.FUNCTION) {\n          e = new Node_1.Node(e);\n          var args = Q.pop();\n          e.right = args;\n\n          if (e.value === 'object') {\n            //check if Q has a value\n            var _last = Q[Q.length - 1];\n\n            if (_last) {\n              while (_last.right) {\n                _last = _last.right;\n              }\n\n              _last.right = e;\n              continue;\n            }\n          }\n\n          Q.push(e);\n        } else {\n          Q.push(new Node_1.Node(e));\n        }\n      }\n\n      return Q[0];\n    }\n  }]);\n\n  return Tokenizer;\n}();\n\nexports.Tokenizer = Tokenizer;\n\nvar InnerTokenizer = /*#__PURE__*/function () {\n  function InnerTokenizer(functions, brackets, operators, units, expression) {\n    _classCallCheck(this, InnerTokenizer);\n\n    this.expression = expression;\n    this.functions = functions;\n    this.brackets = brackets;\n    this.operators = operators;\n    this.units = units;\n    this.tokens = []; //the tokens container\n\n    this.col = 0; //the column position\n\n    this.lpos = 0; //marks beginning of next token\n\n    this.scopes = [this.tokens]; //initiate with the tokens as the highest scope\n\n    this.target = this.tokens; //the target to which the tokens are added. This can swing up or down\n\n    this.depth = 0; //cast to String\n\n    var e = String(this.expression); //remove multiple white spaces and spaces at beginning and end of string\n\n    e = e.trim().replace(/\\s+/g, ' '); //remove spaces before and after brackets\n\n    for (var x in this.brackets) {\n      var regex = new RegExp(this.brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\n      e = e.replace(regex, x);\n    }\n\n    this.expression = e;\n  }\n  /**\n   * Adds a scope to tokens\n   * @param {String} scope_type\n   * @param {int} column\n   * @returns {undefined}\n   */\n\n\n  _createClass(InnerTokenizer, [{\n    key: \"addScope\",\n    value: function addScope(scope_type, column) {\n      // TODO: need to refactor this mix of array and object\n      var new_scope = []; //create a new scope\n\n      if (scope_type !== undefined) {\n        new_scope.type = scope_type;\n      }\n\n      new_scope.column = column; //mark the column of the scope\n\n      this.scopes.push(new_scope); //add it to the list of scopes\n\n      this.target.push(new_scope); //add it to the tokens list since now it's a scope\n\n      this.target = new_scope; //point to it\n\n      this.depth++; //go down one in scope\n    }\n    /**\n     * Goes up in scope by one\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"goUp\",\n    value: function goUp() {\n      this.scopes.pop(); //remove the scope from the scopes stack\n\n      this.target = this.scopes[--this.depth]; //point the above scope\n    }\n    /**\n     * Extracts all the operators from the expression string starting at postion start_at\n     * @param e\n     * @param {int} start_at\n     * @returns {string}\n     */\n\n  }, {\n    key: \"get_operator_str\",\n    value: function get_operator_str(e, start_at) {\n      //mark the end of the operator as the start since we're just going\n      //to be walking along the string\n      var end = start_at + 1; //just keep moving along\n\n      while (this.operators.isOperator(e.charAt(end++))) {} //remember that we started at one position ahead. The beginning operator is what triggered\n      //this function to be called in the first place. String.CharAt is zero based so we now\n      //have to correct two places. The initial increment + the extra++ at the end of end during\n      //the last iteration.\n\n\n      return e.substring(start_at, end - 1);\n    }\n    /**\n     * Breaks operator up in to several different operators as defined in operators\n     * @param {string} operator_str\n     * @returns {string[]}\n     */\n\n  }, {\n    key: \"chunkify\",\n    value: function chunkify(operator_str) {\n      var start = this.col - operator_str.length; //start of operator\n\n      var _operators = [];\n      var operator = operator_str.charAt(0); //grab the largest possible chunks but start at 2 since we already know\n      //that the first character is an operator\n\n      var index = start + 1;\n      var operatorLength = operator_str.length;\n\n      for (var i = 1; i < operatorLength; i++, index++) {\n        var ch = operator_str.charAt(i);\n        var o = operator + ch; //since the operator now is undefined then the last operator\n        //was the largest possible combination.\n\n        if (!this.operators.isOperator(o)) {\n          _operators.push(new Token_1.Token(operator, Token_1.Token.OPERATOR, index, this.operators.getOperator(operator)));\n\n          operator = ch;\n        } else operator = o; //now the operator is the larger chunk\n\n      } //add the last operator\n\n\n      _operators.push(new Token_1.Token(operator, Token_1.Token.OPERATOR, index, this.operators.getOperator(operator)));\n\n      return _operators;\n    }\n    /**\n     * Is used to add a token to the tokens array. Makes sure that no empty token is added\n     * @param {int} at\n     * @param {String} token\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"add_token\",\n    value: function add_token(at, token) {\n      //grab the token if we're not supplied one\n      if (token === undefined) {\n        token = this.expression.substring(this.lpos, at);\n      } //only add it if it's not an empty string\n\n\n      if (token in this.units) {\n        this.target.push(new Token_1.Token(token, Token_1.Token.UNIT, this.lpos));\n      } else if (token !== '') {\n        this.target.push(new Token_1.Token(token, Token_1.Token.VARIABLE_OR_LITERAL, this.lpos));\n      }\n    }\n    /**\n     * Adds a function to the output\n     * @param {String} f\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"add_function\",\n    value: function add_function(f) {\n      this.target.push(new Token_1.Token(f, Token_1.Token.FUNCTION, this.lpos));\n    }\n    /**\n     * Tokens are found between operators so this marks the location of where the last token was found\n     * @param {int} position\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"set_last_position\",\n    value: function set_last_position(position) {\n      this.lpos = position + 1;\n    }\n    /**\n     * When a operator is found and added, especially a combo operator, then the column location\n     * has to be adjusted to the end of the operator\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"adjust_column_position\",\n    value: function adjust_column_position(operator_str) {\n      this.lpos = this.lpos + operator_str.length - 2;\n      this.col = this.lpos - 1;\n    }\n    /**\n     * Tokenizes the string\n     * @param {String} e\n     * @returns {Token[]}\n     */\n\n  }, {\n    key: \"tokenize\",\n    value: function tokenize() {\n      var e = this.expression;\n      var L = e.length; //expression length\n\n      var open_brackets = [];\n      var has_space = false; //marks if an open space character was found\n\n      var SPACE = ' ';\n      var EMPTY_STRING = '';\n      var COMMA = ',';\n      var MINUS = '-';\n      var MULT = '*'; //Possible source of bug. Review\n\n      /*\n       //gets the next space\n       var next_space = function(from) {\n       for (var i=from; i<L; i++) {\n       if (e.charAt(i) === ' ')\n       return i;\n       }\n        return L; //assume the end of the string instead\n       };\n       */\n\n      for (; this.col < L; this.col++) {\n        var ch = e.charAt(this.col);\n\n        if (this.operators.isOperator(ch)) {\n          this.add_token(this.col); //is the last token numeric?\n\n          var last_token_is_numeric = this.target[0] && (0, Utils_1.isNumber)(this.target[0]); //is this character multiplication?\n\n          var is_multiplication = last_token_is_numeric && ch === MULT; //if we're in a new scope then go up by one but if the space\n          //is right befor an operator then it makes no sense to go up in scope\n          //consider sin -x. The last position = current position at the minus sign\n          //this means that we're going for sin(x) -x which is wrong\n          //Ignore comma since comma is still part of the existing scope.\n\n          if (has_space && this.lpos < this.col && !(ch === COMMA || is_multiplication)) {\n            has_space = false;\n            this.goUp();\n          } //mark the last position that a\n\n\n          this.set_last_position(this.col + 1);\n          var operator_str = this.get_operator_str(e, this.col);\n          this.adjust_column_position(operator_str);\n          this.target.push.apply(this.target, this.chunkify(operator_str));\n        } else if (ch in this.brackets) {\n          var bracket = this.brackets[ch];\n\n          if (bracket.is_open) {\n            //mark the bracket\n            open_brackets.push([bracket, this.lpos]);\n            var f = e.substring(this.lpos, this.col);\n\n            if (this.functions.getFunctionDescriptor(f)) {\n              this.add_function(f);\n            } else if (f !== '') {\n              //assume multiplication\n              //TODO: Add the multiplication to stack\n              this.target.push(new Token_1.Token(f, Token_1.Token.VARIABLE_OR_LITERAL, this.lpos));\n            } //go down one in scope\n\n\n            this.addScope(bracket.maps_to, this.col);\n          } else if (bracket.is_close) {\n            //get the matching bracket\n            var pair = open_brackets.pop(); //throw errors accordingly\n            //missing open bracket\n\n            if (!pair) throw new ParityError('Missing open bracket for bracket at: ' + (this.col + 1)); //incorrect pair\n            else if (pair[0].id !== bracket.id - 1) throw new ParityError('Parity error');\n            this.add_token(this.col);\n            this.goUp();\n          }\n\n          this.set_last_position(this.col);\n        } else if (ch === SPACE) {\n          var prev = e.substring(this.lpos, this.col); //look back\n\n          var nxt = e.charAt(this.col + 1); //look forward\n\n          if (has_space) {\n            if (this.operators.isOperator(prev)) {\n              this.target.push(new Token_1.Token(prev, Token_1.Token.OPERATOR, this.col, this.operators.getOperator(prev)));\n            } else {\n              this.add_token(undefined, prev); //we're at the closing space\n\n              this.goUp(); //go up in scope if we're at a space\n              //assume multiplication if it's not an operator except for minus\n\n              var is_operator = this.operators.isOperator(nxt);\n\n              if (is_operator && this.operators.getOperator(nxt).value === MINUS || !is_operator) {\n                this.target.push(new Token_1.Token(MULT, Token_1.Token.OPERATOR, this.col, this.operators.getOperator(MULT)));\n              }\n            }\n\n            has_space = false; //remove the space\n          } else {\n            //we're at the closing space\n            //check if it's a function\n            var _f = e.substring(this.lpos, this.col);\n\n            if (this.functions.getFunctionDescriptor(_f)) {\n              //there's no need to go up in scope if the next character is an operator\n              has_space = true; //mark that a space was found\n\n              this.add_function(_f);\n              this.addScope();\n            } else if (this.operators.isOperator(_f)) {\n              this.target.push(new Token_1.Token(_f, Token_1.Token.OPERATOR, this.col, this.operators.getOperator(_f)));\n            } else {\n              this.add_token(undefined, _f); //peek ahead to the next character\n\n              var _nxt = e.charAt(this.col + 1); //If it's a number then add the multiplication operator to the stack but make sure that the next character\n              //is not an operator\n\n\n              if (prev !== EMPTY_STRING && _nxt !== EMPTY_STRING && !this.operators.isOperator(prev) && !this.operators.isOperator(_nxt)) this.target.push(new Token_1.Token(MULT, Token_1.Token.OPERATOR, this.col, this.operators.getOperator(MULT)));\n            } //Possible source of bug. Review\n\n            /*\n             //space can mean multiplication so add the symbol if the is encountered\n             if (/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\n             var next = e.charAt(col+1);\n             var next_is_operator = next in operators;\n             var ns = next_space(col+1);\n             var next_word = e.substring(col+1, ns);\n             //the next can either be a prefix operator or no operator\n             if ((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\n             this.target.push(new Token('*', Token.OPERATOR, col));\n             }\n             */\n\n          }\n\n          this.set_last_position(this.col); //mark this location\n        }\n      } //check that all brackets were closed\n\n\n      if (open_brackets.length) {\n        var b = open_brackets.pop();\n        throw new ParityError('Missing closed bracket for bracket at ' + (b ? b[1] + 1 : 'undefined'));\n      } //add the last token\n\n\n      this.add_token(this.col);\n      return this.tokens;\n    }\n  }]);\n\n  return InnerTokenizer;\n}();","map":{"version":3,"mappings":"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","names":["ParityError","Error","Tokenizer","functionsProvider","operators","units","names","actions","functions","brackets","getBrackets","e","shouldPrepare","prepareExpression","t","InnerTokenizer","tokenize","name","action","order","shift_cells","preprocessors","Errors_1","push","splice","_a","length","i","l","indexOf","undefined","String","call","replace","test","Math2_1","scientificToDecimal","x","Settings_1","IMPLIED_MULTIPLICATION_REGEX","match","group1","group2","start","str","first","charAt","before","d","a","USE_MULTICHARACTER_VARS","getFunctionDescriptor","isNaN","split","join","e_org","b","c","g1","g2","tokens","Q","Array","isArray","tree","type","Token_1","OPERATOR","is_prefix","postfix","location","last","pop","Node_1","right","left","FUNCTION","args","value","exports","expression","col","lpos","scopes","target","depth","trim","regex","RegExp","is_close","scope_type","column","new_scope","start_at","end","isOperator","substring","operator_str","_operators","operator","index","operatorLength","ch","o","getOperator","at","token","UNIT","VARIABLE_OR_LITERAL","f","position","L","open_brackets","has_space","SPACE","EMPTY_STRING","COMMA","MINUS","MULT","add_token","last_token_is_numeric","is_multiplication","goUp","set_last_position","get_operator_str","adjust_column_position","apply","chunkify","bracket","is_open","add_function","addScope","maps_to","pair","id","prev","nxt","is_operator"],"sourceRoot":"","sources":["../../src/Parser/Tokenizer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
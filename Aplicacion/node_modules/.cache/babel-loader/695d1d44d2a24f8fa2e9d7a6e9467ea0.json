{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { escape } from '../../utils/string.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { toSymbol } from '../../utils/latex.js';\nvar name = 'SymbolNode';\nvar dependencies = ['math', '?Unit', 'Node'];\nexport var createSymbolNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var math = _ref.math,\n      Unit = _ref.Unit,\n      Node = _ref.Node;\n  /**\r\n   * Check whether some name is a valueless unit like \"inch\".\r\n   * @param {string} name\r\n   * @return {boolean}\r\n   */\n\n  function isValuelessUnit(name) {\n    return Unit ? Unit.isValuelessUnit(name) : false;\n  }\n\n  var SymbolNode = /*#__PURE__*/function (_Node) {\n    _inherits(SymbolNode, _Node);\n\n    var _super = _createSuper(SymbolNode);\n\n    /**\r\n     * @constructor SymbolNode\r\n     * @extends {Node}\r\n     * A symbol node can hold and resolve a symbol\r\n     * @param {string} name\r\n     * @extends {Node}\r\n     */\n    function SymbolNode(name) {\n      var _this;\n\n      _classCallCheck(this, SymbolNode);\n\n      _this = _super.call(this); // validate input\n\n      if (typeof name !== 'string') {\n        throw new TypeError('String expected for parameter \"name\"');\n      }\n\n      _this.name = name;\n      return _this;\n    }\n\n    _createClass(SymbolNode, [{\n      key: \"type\",\n      get: function get() {\n        return 'SymbolNode';\n      }\n    }, {\n      key: \"isSymbolNode\",\n      get: function get() {\n        return true;\n      }\n      /**\r\n       * Compile a node into a JavaScript function.\r\n       * This basically pre-calculates as much as possible and only leaves open\r\n       * calculations which depend on a dynamic scope with variables.\r\n       * @param {Object} math     Math.js namespace with functions and constants.\r\n       * @param {Object} argNames An object with argument names as key and `true`\r\n       *                          as value. Used in the SymbolNode to optimize\r\n       *                          for arguments from user assigned functions\r\n       *                          (see FunctionAssignmentNode) or special symbols\r\n       *                          like `end` (see IndexNode).\r\n       * @return {function} Returns a function which can be called like:\r\n       *                        evalNode(scope: Object, args: Object, context: *)\r\n       */\n\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        var name = this.name;\n\n        if (argNames[name] === true) {\n          // this is a FunctionAssignment argument\n          // (like an x when inside the expression of a function\n          // assignment `f(x) = ...`)\n          return function (scope, args, context) {\n            return args[name];\n          };\n        } else if (name in math) {\n          return function (scope, args, context) {\n            return scope.has(name) ? scope.get(name) : getSafeProperty(math, name);\n          };\n        } else {\n          var isUnit = isValuelessUnit(name);\n          return function (scope, args, context) {\n            return scope.has(name) ? scope.get(name) : isUnit ? new Unit(null, name) : SymbolNode.onUndefinedSymbol(name);\n          };\n        }\n      }\n      /**\r\n       * Execute a callback for each of the child nodes of this node\r\n       * @param {function(child: Node, path: string, parent: Node)} callback\r\n       */\n\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {// nothing to do, we don't have any children\n      }\n      /**\r\n       * Create a new SymbolNode with children produced by the given callback.\r\n       * Trivial since a SymbolNode has no children\r\n       * @param {function(child: Node, path: string, parent: Node) : Node} callback\r\n       * @returns {SymbolNode} Returns a clone of the node\r\n       */\n\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        return this.clone();\n      }\n      /**\r\n       * Throws an error 'Undefined symbol {name}'\r\n       * @param {string} name\r\n       */\n\n    }, {\n      key: \"clone\",\n      value:\n      /**\r\n       * Create a clone of this node, a shallow copy\r\n       * @return {SymbolNode}\r\n       */\n      function clone() {\n        return new SymbolNode(this.name);\n      }\n      /**\r\n       * Get string representation\r\n       * @param {Object} options\r\n       * @return {string} str\r\n       * @override\r\n       */\n\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        return this.name;\n      }\n      /**\r\n       * Get HTML representation\r\n       * @param {Object} options\r\n       * @return {string} str\r\n       * @override\r\n       */\n\n    }, {\n      key: \"toHTML\",\n      value: function toHTML(options) {\n        var name = escape(this.name);\n\n        if (name === 'true' || name === 'false') {\n          return '<span class=\"math-symbol math-boolean\">' + name + '</span>';\n        } else if (name === 'i') {\n          return '<span class=\"math-symbol math-imaginary-symbol\">' + name + '</span>';\n        } else if (name === 'Infinity') {\n          return '<span class=\"math-symbol math-infinity-symbol\">' + name + '</span>';\n        } else if (name === 'NaN') {\n          return '<span class=\"math-symbol math-nan-symbol\">' + name + '</span>';\n        } else if (name === 'null') {\n          return '<span class=\"math-symbol math-null-symbol\">' + name + '</span>';\n        } else if (name === 'undefined') {\n          return '<span class=\"math-symbol math-undefined-symbol\">' + name + '</span>';\n        }\n\n        return '<span class=\"math-symbol\">' + name + '</span>';\n      }\n      /**\r\n       * Get a JSON representation of the node\r\n       * @returns {Object}\r\n       */\n\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: 'SymbolNode',\n          name: this.name\n        };\n      }\n      /**\r\n       * Instantiate a SymbolNode from its JSON representation\r\n       * @param {Object} json  An object structured like\r\n       *                       `{\"mathjs\": \"SymbolNode\", name: \"x\"}`,\r\n       *                       where mathjs is optional\r\n       * @returns {SymbolNode}\r\n       */\n\n    }, {\n      key: \"_toTex\",\n      value:\n      /**\r\n       * Get LaTeX representation\r\n       * @param {Object} options\r\n       * @return {string} str\r\n       * @override\r\n       */\n      function _toTex(options) {\n        var isUnit = false;\n\n        if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {\n          isUnit = true;\n        }\n\n        var symbol = toSymbol(this.name, isUnit);\n\n        if (symbol[0] === '\\\\') {\n          // no space needed if the symbol starts with '\\'\n          return symbol;\n        } // the space prevents symbols from breaking stuff like '\\cdot'\n        // if it's written right before the symbol\n\n\n        return ' ' + symbol;\n      }\n    }], [{\n      key: \"onUndefinedSymbol\",\n      value: function onUndefinedSymbol(name) {\n        throw new Error('Undefined symbol ' + name);\n      }\n    }, {\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new SymbolNode(json.name);\n      }\n    }]);\n\n    return SymbolNode;\n  }(Node);\n\n  return SymbolNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["escape","getSafeProperty","factory","toSymbol","name","dependencies","createSymbolNode","_ref","math","Unit","Node","isValuelessUnit","SymbolNode","TypeError","argNames","scope","args","context","has","get","isUnit","onUndefinedSymbol","callback","clone","options","mathjs","symbol","Error","json","isClass","isNode"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/mathjs/lib/esm/expression/node/SymbolNode.js"],"sourcesContent":["import { escape } from '../../utils/string.js';\r\nimport { getSafeProperty } from '../../utils/customs.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { toSymbol } from '../../utils/latex.js';\r\nvar name = 'SymbolNode';\r\nvar dependencies = ['math', '?Unit', 'Node'];\r\nexport var createSymbolNode = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    math,\r\n    Unit,\r\n    Node\r\n  } = _ref;\r\n\r\n  /**\r\n   * Check whether some name is a valueless unit like \"inch\".\r\n   * @param {string} name\r\n   * @return {boolean}\r\n   */\r\n  function isValuelessUnit(name) {\r\n    return Unit ? Unit.isValuelessUnit(name) : false;\r\n  }\r\n\r\n  class SymbolNode extends Node {\r\n    /**\r\n     * @constructor SymbolNode\r\n     * @extends {Node}\r\n     * A symbol node can hold and resolve a symbol\r\n     * @param {string} name\r\n     * @extends {Node}\r\n     */\r\n    constructor(name) {\r\n      super(); // validate input\r\n\r\n      if (typeof name !== 'string') {\r\n        throw new TypeError('String expected for parameter \"name\"');\r\n      }\r\n\r\n      this.name = name;\r\n    }\r\n\r\n    get type() {\r\n      return 'SymbolNode';\r\n    }\r\n\r\n    get isSymbolNode() {\r\n      return true;\r\n    }\r\n    /**\r\n     * Compile a node into a JavaScript function.\r\n     * This basically pre-calculates as much as possible and only leaves open\r\n     * calculations which depend on a dynamic scope with variables.\r\n     * @param {Object} math     Math.js namespace with functions and constants.\r\n     * @param {Object} argNames An object with argument names as key and `true`\r\n     *                          as value. Used in the SymbolNode to optimize\r\n     *                          for arguments from user assigned functions\r\n     *                          (see FunctionAssignmentNode) or special symbols\r\n     *                          like `end` (see IndexNode).\r\n     * @return {function} Returns a function which can be called like:\r\n     *                        evalNode(scope: Object, args: Object, context: *)\r\n     */\r\n\r\n\r\n    _compile(math, argNames) {\r\n      var name = this.name;\r\n\r\n      if (argNames[name] === true) {\r\n        // this is a FunctionAssignment argument\r\n        // (like an x when inside the expression of a function\r\n        // assignment `f(x) = ...`)\r\n        return function (scope, args, context) {\r\n          return args[name];\r\n        };\r\n      } else if (name in math) {\r\n        return function (scope, args, context) {\r\n          return scope.has(name) ? scope.get(name) : getSafeProperty(math, name);\r\n        };\r\n      } else {\r\n        var isUnit = isValuelessUnit(name);\r\n        return function (scope, args, context) {\r\n          return scope.has(name) ? scope.get(name) : isUnit ? new Unit(null, name) : SymbolNode.onUndefinedSymbol(name);\r\n        };\r\n      }\r\n    }\r\n    /**\r\n     * Execute a callback for each of the child nodes of this node\r\n     * @param {function(child: Node, path: string, parent: Node)} callback\r\n     */\r\n\r\n\r\n    forEach(callback) {// nothing to do, we don't have any children\r\n    }\r\n    /**\r\n     * Create a new SymbolNode with children produced by the given callback.\r\n     * Trivial since a SymbolNode has no children\r\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\r\n     * @returns {SymbolNode} Returns a clone of the node\r\n     */\r\n\r\n\r\n    map(callback) {\r\n      return this.clone();\r\n    }\r\n    /**\r\n     * Throws an error 'Undefined symbol {name}'\r\n     * @param {string} name\r\n     */\r\n\r\n\r\n    static onUndefinedSymbol(name) {\r\n      throw new Error('Undefined symbol ' + name);\r\n    }\r\n    /**\r\n     * Create a clone of this node, a shallow copy\r\n     * @return {SymbolNode}\r\n     */\r\n\r\n\r\n    clone() {\r\n      return new SymbolNode(this.name);\r\n    }\r\n    /**\r\n     * Get string representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\r\n\r\n\r\n    _toString(options) {\r\n      return this.name;\r\n    }\r\n    /**\r\n     * Get HTML representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\r\n\r\n\r\n    toHTML(options) {\r\n      var name = escape(this.name);\r\n\r\n      if (name === 'true' || name === 'false') {\r\n        return '<span class=\"math-symbol math-boolean\">' + name + '</span>';\r\n      } else if (name === 'i') {\r\n        return '<span class=\"math-symbol math-imaginary-symbol\">' + name + '</span>';\r\n      } else if (name === 'Infinity') {\r\n        return '<span class=\"math-symbol math-infinity-symbol\">' + name + '</span>';\r\n      } else if (name === 'NaN') {\r\n        return '<span class=\"math-symbol math-nan-symbol\">' + name + '</span>';\r\n      } else if (name === 'null') {\r\n        return '<span class=\"math-symbol math-null-symbol\">' + name + '</span>';\r\n      } else if (name === 'undefined') {\r\n        return '<span class=\"math-symbol math-undefined-symbol\">' + name + '</span>';\r\n      }\r\n\r\n      return '<span class=\"math-symbol\">' + name + '</span>';\r\n    }\r\n    /**\r\n     * Get a JSON representation of the node\r\n     * @returns {Object}\r\n     */\r\n\r\n\r\n    toJSON() {\r\n      return {\r\n        mathjs: 'SymbolNode',\r\n        name: this.name\r\n      };\r\n    }\r\n    /**\r\n     * Instantiate a SymbolNode from its JSON representation\r\n     * @param {Object} json  An object structured like\r\n     *                       `{\"mathjs\": \"SymbolNode\", name: \"x\"}`,\r\n     *                       where mathjs is optional\r\n     * @returns {SymbolNode}\r\n     */\r\n\r\n\r\n    static fromJSON(json) {\r\n      return new SymbolNode(json.name);\r\n    }\r\n    /**\r\n     * Get LaTeX representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\r\n\r\n\r\n    _toTex(options) {\r\n      var isUnit = false;\r\n\r\n      if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {\r\n        isUnit = true;\r\n      }\r\n\r\n      var symbol = toSymbol(this.name, isUnit);\r\n\r\n      if (symbol[0] === '\\\\') {\r\n        // no space needed if the symbol starts with '\\'\r\n        return symbol;\r\n      } // the space prevents symbols from breaking stuff like '\\cdot'\r\n      // if it's written right before the symbol\r\n\r\n\r\n      return ' ' + symbol;\r\n    }\r\n\r\n  }\r\n\r\n  return SymbolNode;\r\n}, {\r\n  isClass: true,\r\n  isNode: true\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}
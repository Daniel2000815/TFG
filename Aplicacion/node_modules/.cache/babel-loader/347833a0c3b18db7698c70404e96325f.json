{"ast":null,"code":"\"use strict\";\n\n// noinspection JSUnusedGlobalSymbols\nvar _classCallCheck = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Author : Martin Donk\n * Website : http://www.nerdamer.com\n * Email : martin.r.donk@gmail.com\n * Source : https://github.com/jiggzson/nerdamer\n */\nvar Expression_1 = require(\"./Parser/Expression\");\nvar Settings_1 = require(\"./Settings\");\nvar Core_1 = require(\"./Core/Core\");\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\nvar Utils = __importStar(require(\"./Core/Utils\"));\nvar LaTeX_1 = require(\"./LaTeX/LaTeX\");\nvar Errors_1 = require(\"./Core/Errors\");\n//version ======================================================================\nvar VERSION = '1.1.12';\n// set bigInt the precision to js precision\ndecimal_js_1.default.set({\n  precision: 250\n});\nvar defaultCore = new Core_1.Core();\nvar parser = defaultCore.PARSER;\nvar functionProvider = defaultCore.functionProvider;\nvar variableDictionary = defaultCore.variableDictionary;\nvar EXPRESSIONS = defaultCore.EXPRESSIONS;\nvar peekers = defaultCore.peekers;\nvar operators = defaultCore.operators;\n/**\n *\n * @param {string|Expression} expression   The expression being parsed.\n * @param {object} subs         An object of known values\n * @param {string} options       A string or array containing additional options such as parsing directly to number\n *                                  or expanding the expression. Use \"numer\" to when wanting the expression to be\n *                                  evaluated. Use \"expand\" when wanting the expression to be expanded.\n * @param {number} location     The index of where the expression should be stored.\n * @returns {Expression & Spread<[Math]>}\n */\nfunction nerdamer(expression, subs, options, location) {\n  // Initiate the numer flag\n  var numer = false;\n  // let variable, fn, args;\n  // Convert any expression passed in to a string\n  if (typeof expression !== 'string') {\n    expression = expression.toString();\n  }\n  // Is the user declaring a function?\n  var fndec = /^([a-z_][a-z\\d_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\n  if (fndec) {\n    return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);\n  }\n  // Convert it to an array for simplicity\n  if (!options) {\n    options = [];\n  } else if (!Array.isArray(options)) {\n    options = [options.toString()];\n  }\n  options.forEach(function (o) {\n    // Turn on the numer flag if requested\n    if (o === 'numer') {\n      numer = true;\n      return;\n    }\n    // Wrap it in a function if requested. This only holds true for\n    // functions that take a single argument which is the expression\n    var f = functionProvider.getFunctionDescriptor(o);\n    // If there's a function and it takes a single argument, then wrap\n    // the expression in it\n    if (f && f[1] === 1) {\n      expression = \"\".concat(o, \"(\").concat(expression, \")\");\n    }\n  });\n  var e = Utils.block('PARSE2NUMBER', function () {\n    return parser.parse(expression, subs);\n  }, numer || Settings_1.Settings.PARSE2NUMBER);\n  if (location) {\n    EXPRESSIONS[location - 1] = e;\n  } else {\n    EXPRESSIONS.push(e);\n  }\n  return new Expression_1.Expression(e);\n}\n(function (nerdamer) {\n  /**\n   * Converts expression into rpn form\n   * @param {string} expression\n   * @returns {Token[]}\n   */\n  function rpn(expression) {\n    return parser.toRPN(parser.tokenize(expression));\n  }\n  nerdamer.rpn = rpn;\n  /**\n   * Generates Converts and expression to LaTeX without evaluating expression.\n   * @param {string} expression The expression being converted\n   * @param {ConvertToLaTeXOptions} options\n   * @returns {string}\n   */\n  function convertToLaTeX(expression, options) {\n    return parser.toTeX(expression, options);\n  }\n  nerdamer.convertToLaTeX = convertToLaTeX;\n  /**\n   * Attempts to import a LaTeX string.\n   * @param {string} expression The expression being converted\n   * @returns {string}\n   */\n  function convertFromLaTeX(expression) {\n    var txt = LaTeX_1.LaTeX.parse(parser.tokenize(expression));\n    return new Expression_1.Expression(parser.parse(txt));\n  }\n  nerdamer.convertFromLaTeX = convertFromLaTeX;\n  /**\n   * Get the version of nerdamer or a loaded add-on\n   * @param {string} addon - The add-on being checked\n   * @returns {string} returns the version of nerdamer\n   */\n  function version(addon) {\n    if (addon) {\n      try {\n        return defaultCore[addon].version;\n      } catch (e) {\n        return \"No module named \" + addon + \" found!\";\n      }\n    }\n    return VERSION;\n  }\n  nerdamer.version = version;\n  /**\n   * Get nerdamer generated warnings\n   * @returns {string[]}\n   */\n  function getWarnings() {\n    return Utils.WARNINGS;\n  }\n  nerdamer.getWarnings = getWarnings;\n  /**\n   * Sets a constant value which nerdamer will automatically substitute when parsing expression/equation.\n   * Set to \"delete\" or \"\" to unset.\n   * @param {string} constant                 The name of the constant to be set\n   * @param {number|Expression|string} value  The value of the constant\n   * @returns {Nerdamer}                      Returns the nerdamer object\n   */\n  function setConstant(constant, value) {\n    Utils.validateName(constant);\n    if (!variableDictionary.isReserved(constant)) {\n      //fix for issue #127\n      if (value === 'delete' || value === '') {\n        variableDictionary.deleteConstant(constant);\n      } else {\n        // TODO: fix check\n        // if (isNaN(value)) {\n        //     throw new NerdamerTypeError('Constant must be a number!');\n        // }\n        variableDictionary.setConstant(constant, value);\n      }\n    }\n    return nerdamer;\n  }\n  nerdamer.setConstant = setConstant;\n  /**\n   * Returns the value of a previously set constant\n   * @param {string} constant\n   * @returns {string}\n   */\n  function getConstant(constant) {\n    return String(variableDictionary.getConstant(constant));\n  }\n  nerdamer.getConstant = getConstant;\n  /**\n   * Sets a function which can then be called using nerdamer.\n   * @param {string} name The name of the function\n   * @param {string[]} params_array A list containing the parameter name of the functions\n   * @param {string} body The body of the function\n   * @returns {boolean} returns true if succeeded and falls on fail\n   * @example nerdamer.setFunction('f',['x'], 'x^2+2');\n   */\n  function setFunction(name, params_array, body) {\n    parser.setFunction(name, params_array, body);\n  }\n  nerdamer.setFunction = setFunction;\n  /**\n   * Returns the nerdamer core object. This object contains all the core functions of nerdamer and houses the parser.\n   * @returns {Core} Exports the nerdamer core functions and objects\n   */\n  function getCore() {\n    return defaultCore;\n  }\n  nerdamer.getCore = getCore;\n  /**\n   * Returns stored expression at index. For first index use 1 not 0.\n   * @param {number|string} expression_number\n   * @param {boolean} asType\n   */\n  function getExpression(expression_number) {\n    var asType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return Expression_1.Expression.getExpression(expression_number, asType);\n  }\n  nerdamer.getExpression = getExpression;\n  nerdamer.getEquation = getExpression;\n  /**\n   *\n   * @param {boolean} asArray The returned names are returned as an array if this is set to true;\n   * @returns {string|string[]}\n   */\n  function reserved() {\n    var asArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var reserved = variableDictionary.getReserved();\n    if (asArray) {\n      return reserved;\n    }\n    return reserved.join(', ');\n  }\n  nerdamer.reserved = reserved;\n  /**\n   *\n   * @param {number|'all'} equation_number          the number of the equation to clear.\n   *                                              If 'all' is supplied then all equations are cleared\n   * @param {boolean} keep_EXPRESSIONS_fixed  use true if you don't want to keep EXPRESSIONS length fixed\n   * @returns {Nerdamer}                      Returns the nerdamer object\n   */\n  function clear(equation_number) {\n    var keep_EXPRESSIONS_fixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (equation_number === 'all') {\n      EXPRESSIONS.splice(0, EXPRESSIONS.length);\n    } else if (equation_number === 'last') {\n      EXPRESSIONS.pop();\n    } else if (equation_number === 'first') {\n      EXPRESSIONS.shift();\n    } else {\n      var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\n      keep_EXPRESSIONS_fixed ? EXPRESSIONS[index] = undefined : Utils.remove(EXPRESSIONS, index);\n    }\n    return nerdamer;\n  }\n  nerdamer.clear = clear;\n  /**\n   * Clears all stored expressions.;\n   * Alias for nerdamer.clear('all')\n   */\n  function flush() {\n    clear('all');\n    return nerdamer;\n  }\n  nerdamer.flush = flush;\n  /**\n   *\n   * @param {boolean} asObject\n   * @param {boolean} asLaTeX\n   * @param {string|string[]} options\n   * @returns {Array}\n   */\n  function expressions(asObject, asLaTeX, options) {\n    var result = asObject ? {} : [];\n    for (var i = 0; i < EXPRESSIONS.length; i++) {\n      var eq = asLaTeX ? LaTeX_1.LaTeX.latex(EXPRESSIONS[i], options) : Utils.text(EXPRESSIONS[i], options);\n      asObject ? result[i + 1] = eq : result.push(eq);\n    }\n    return result;\n  }\n  nerdamer.expressions = expressions;\n  /**\n   * Registers a module function with nerdamer. The object needs to contain at a minimum, a name property (text),\n   * a numargs property (int), this is -1 for variable arguments or an array containing the min and max arguments,\n   * the visible property (bool) which allows use of this function through nerdamer, defaults to true, and a\n   * build property containing a function which returns the function to be used. This function is also handy for\n   * creating aliases to functions. See below how the alias D was created for the diff function).\n   * @param {object|object[]} obj\n   */\n  function register(obj) {\n    var core = defaultCore;\n    if (Array.isArray(obj)) {\n      for (var i = 0; i < obj.length; i++) {\n        if (obj) {\n          register(obj[i]);\n        }\n      }\n    } else if (obj && 'name' in obj && Settings_1.Settings.exclude.indexOf(obj.name) === -1) {\n      //make sure all the dependencies are available\n      if (obj.dependencies) {\n        for (var _i = 0; _i < obj.dependencies.length; _i++) {\n          if (!core[obj.dependencies[_i]]) throw new Error(Utils.format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[_i]));\n        }\n      }\n      //if no parent object is provided then the function does not have an address and cannot be called directly\n      var parent_obj = obj.parent,\n        fn = obj.build.call(core); //call constructor to get function\n      if (parent_obj) {\n        if (!core[parent_obj]) core[obj.parent] = {};\n        var ref_obj = parent_obj === 'nerdamer' ? nerdamer : core[parent_obj];\n        //attach the function to the core\n        ref_obj[obj.name] = fn;\n      }\n      if (obj.visible) {\n        functionProvider.setFunctionDescriptor(obj.name, [fn, obj.numargs]); //make the function available\n      }\n    }\n  }\n\n  nerdamer.register = register;\n  /**\n   * Enforces rule: \"must start with a letter or underscore and\n   * can have any number of underscores, letters, and numbers thereafter.\"\n   * @param {string} name The name of the symbol being checked\n   * @param {string} type - The type of symbols that's being validated\n   * @throws {InvalidVariableNameError}  - Throws an exception on fail\n   */\n  function validateName(name) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'variable';\n    return Utils.validateName(name, type);\n  }\n  nerdamer.validateName = validateName;\n  /**\n   * This method can be used to check that the variable meets variable name requirements for nerdamer.\n   * Variable names Must start with a letter or underscore and may contains any combination of numbers,\n   * letters, and underscores after that.\n   * @param {string} varname The variable name being validated\n   * @returns {boolean} validates if the profided string is a valid variable name\n   */\n  function validVarName(varname) {\n    try {\n      Utils.validateName(varname);\n      return !variableDictionary.isReserved(varname);\n    } catch (e) {\n      return false;\n    }\n  }\n  nerdamer.validVarName = validVarName;\n  /**\n   * Array of functions currently supported by nerdamer\n   * @returns {Array}\n   */\n  function supported() {\n    return Object.keys(functionProvider.getFunctionDescriptors());\n  }\n  nerdamer.supported = supported;\n  /**\n   *\n   * @returns {Number} The number equations/expressions currently loaded\n   */\n  function numExpressions() {\n    return EXPRESSIONS.length;\n  }\n  nerdamer.numExpressions = numExpressions;\n  /**\n   * Sets a known value in nerdamer. This differs from setConstant as the value can be overridden trough\n   * the scope. See example. Set to \"delete\" or \"\" to unset\n   * @param {string} v The known value to be set\n   * @param {string|number|Expression} val The value for the expression to be set to.\n   * @returns {nerdamer} Returns the nerdamer object\n   */\n  function setVar(v, val) {\n    Utils.validateName(v);\n    //check if it's not already a constant\n    if (variableDictionary.isConstant(v)) {\n      (0, Errors_1.err)('Cannot set value for constant ' + v);\n    }\n    if (val === 'delete' || val === '') {\n      variableDictionary.deleteVar(v);\n    } else {\n      var value = Utils.isSymbol(val) ? val : parser.parse(val);\n      variableDictionary.setVar(v, value);\n    }\n    return nerdamer;\n  }\n  nerdamer.setVar = setVar;\n  /**\n   * Returns the value of a set variable\n   * @param {string} v\n   * @returns {any}\n   */\n  function getVar(v) {\n    return variableDictionary.getVar(v);\n  }\n  nerdamer.getVar = getVar;\n  /**\n   * Gets all previously set variables.\n   * @param {string} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\n   * @param {string|string[]} options\n   * @returns {object} Returns an object with the variables\n   */\n  function getVars(output, options) {\n    output = output || 'text';\n    var variables = variableDictionary.getAllVars();\n    switch (output) {\n      case 'object':\n        return variables;\n      case 'latex':\n        return variables.map(function (v) {\n          return v.latex(options);\n        });\n      case 'text':\n        return variables.map(function (v) {\n          return v.text(options);\n        });\n    }\n    return {};\n  }\n  nerdamer.getVars = getVars;\n  /**\n   * Clear the variables from the VARS object\n   * @returns {Object} Returns the nerdamer object\n   */\n  function clearVars() {\n    variableDictionary.clearAllVars();\n    return nerdamer;\n  }\n  nerdamer.clearVars = clearVars;\n  /**\n   *\n   * @param {Function} loader\n   * @returns {nerdamer}\n   */\n  function load(loader) {\n    loader.call(nerdamer);\n    return nerdamer;\n  }\n  nerdamer.load = load;\n  /**\n   * Some settings within nerdamer can be changed if needed to accommodate your current needs.\n   * @param {string} setting The setting to be changed\n   * @param {any} value\n   */\n  function set(setting, value) {\n    // FIXME: !!!\n    //current options:\n    //PARSE2NUMBER, suppress_errors\n    // if (typeof setting === 'object')\n    //     for (let x in setting) {\n    //         set(x, setting[x]);\n    //     }\n    //\n    // let disallowed = ['SAFE'];\n    // if (disallowed.indexOf(setting) !== -1)\n    //     err('Cannot modify setting: ' + setting);\n    //\n    // if (setting === 'PRECISION') {\n    //     bigDec.set({precision: value});\n    //     Settings.PRECISION = value;\n    //\n    //     // Avoid that nerdamer puts out garbage after 21 decimal place\n    //     if (value > 21) {\n    //         this.set('USE_BIG', true);\n    //     }\n    // }\n    // else if (setting === 'USE_LN' && value === true) {\n    //     //set log as LN\n    //     Settings.LOG = 'LN';\n    //     //set log10 as log\n    //     Settings.LOG10 = 'log';\n    //     //point the functions in the right direction\n    //\n    //     const logFunc = x => {\n    //         if (x.isConstant())\n    //             return new Symbol(Math.log10(x));\n    //         return symfunction(Settings.LOG10, [x]);\n    //     };\n    //\n    //     functionProvider.setFunctionDescriptor('log', [logFunc, [1, 2]])\n    //     functionProvider.setFunctionDescriptor('LN', Settings.LOG_FNS.log);\n    //\n    //     //remove log10\n    //     functionProvider.removeFunctionDescriptor('log10');\n    // }\n    // else {\n    //     Settings[setting] = value;\n    // }\n  }\n  nerdamer.set = set;\n  /**\n   * Get the value of a setting\n   * @param {type} setting\n   * @returns {undefined}\n   */\n  function get(setting) {\n    return Settings_1.Settings[setting];\n  }\n  nerdamer.get = get;\n  function replaceFunction(name, fn, num_args) {\n    var existing = functionProvider.getFunctionDescriptor(name);\n    var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\n    functionProvider.setFunctionDescriptor(name, [fn.call(undefined, existing[0], defaultCore), new_num_args]);\n  }\n  nerdamer.replaceFunction = replaceFunction;\n  /**\n   * Replaces nerdamer.setOperator\n   * @param {object} operator\n   * @param action\n   * @param {'over' | 'under'} shift\n   */\n  function setOperator(operator, action, shift) {\n    return operators.setOperator(operator, action, shift);\n  }\n  nerdamer.setOperator = setOperator;\n  /**\n   * Gets an opererator by its symbol\n   * @param {String} operator\n   * @returns {OperatorDescriptor}\n   */\n  function getOperator(operator) {\n    return operators.getOperator(operator);\n  }\n  nerdamer.getOperator = getOperator;\n  function aliasOperator(operator, withOperator) {\n    return operators.aliasOperator(operator, withOperator);\n  }\n  nerdamer.aliasOperator = aliasOperator;\n  /**\n   * Generates an RPN object which can be evaluated manually.\n   * @param {string} expression\n   */\n  function tree(expression) {\n    return parser.tree(expression);\n  }\n  nerdamer.tree = tree;\n  /**\n   * Generates the RPN for the expression using Expression.tree and then formats it to HTML.\n   * @param expression\n   * @param indent\n   */\n  function htmlTree(expression, indent) {\n    var tr = tree(expression);\n    return '<div class=\"tree\">\\n' + '    <ul>\\n' + '        <li>\\n' + tr.toHTML(3, indent) + '\\n' + '        </li>\\n' + '    </ul>\\n' + '</div>';\n  }\n  nerdamer.htmlTree = htmlTree;\n  function addPeeker(name, f) {\n    if (peekers[name]) {\n      peekers[name].push(f);\n    }\n  }\n  nerdamer.addPeeker = addPeeker;\n  function removePeeker(name, f) {\n    Utils.remove(peekers[name], f);\n  }\n  nerdamer.removePeeker = removePeeker;\n  function parse(e) {\n    return String(e).split(';').map(function (x) {\n      return parser.parse(x);\n    });\n  }\n  nerdamer.parse = parse;\n  var Nerdamer = /*#__PURE__*/function () {\n    function Nerdamer(expression, subs, options) {\n      _classCallCheck(this, Nerdamer);\n    }\n    _createClass(Nerdamer, null, [{\n      key: \"withModules\",\n      value: function withModules() {\n        return new Nerdamer();\n      }\n    }]);\n    return Nerdamer;\n  }();\n  nerdamer.Nerdamer = Nerdamer;\n  /**\n   * DEPRECATED! Added functions available immediately.\n   *\n   * This functions makes internal functions available externally\n   * @param {boolean} override Override the functions when calling api if it exists\n   * @deprecated\n   */\n  function api() {\n    var override = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  }\n  nerdamer.api = api;\n})(nerdamer || (nerdamer = {}));\n//Required<NerdamerBaseType> | CoreFunction\nvar proxy = new Proxy(nerdamer, {\n  get: function get(target, name) {\n    if (name in target) {\n      return target[name];\n    }\n    if (functionProvider.getFunctionDescriptor(name)) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        for (var i = 0; i < args.length; i++) {\n          args[i] = parser.parse(args[i]);\n        }\n        return new Expression_1.Expression(Utils.block('PARSE2NUMBER', function () {\n          return parser.callfunction(String(name), args);\n        }));\n      };\n    }\n    throw new Error('Requested non-existent property: ' + String(name));\n  }\n});\nexports.default = proxy;","map":{"version":3,"mappings":"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","names":["VERSION","decimal_js_1","set","precision","defaultCore","Core_1","parser","PARSER","functionProvider","variableDictionary","EXPRESSIONS","peekers","operators","nerdamer","expression","subs","options","location","numer","toString","fndec","exec","setFunction","split","Array","isArray","forEach","o","f","getFunctionDescriptor","e","Utils","block","parse","Settings_1","PARSE2NUMBER","push","Expression_1","rpn","toRPN","tokenize","convertToLaTeX","toTeX","convertFromLaTeX","txt","LaTeX_1","version","addon","getWarnings","WARNINGS","setConstant","constant","value","validateName","isReserved","deleteConstant","getConstant","String","name","params_array","body","getCore","getExpression","expression_number","asType","reserved","asArray","getReserved","join","clear","equation_number","keep_EXPRESSIONS_fixed","splice","length","pop","shift","index","undefined","remove","flush","expressions","asObject","asLaTeX","result","i","eq","latex","text","register","obj","core","exclude","indexOf","dependencies","Error","format","parent_obj","parent","fn","build","call","ref_obj","visible","setFunctionDescriptor","numargs","type","validVarName","varname","supported","Object","keys","getFunctionDescriptors","numExpressions","setVar","v","val","isConstant","deleteVar","isSymbol","getVar","getVars","output","variables","getAllVars","map","clearVars","clearAllVars","load","loader","setting","get","replaceFunction","num_args","existing","new_num_args","setOperator","operator","action","getOperator","aliasOperator","withOperator","tree","htmlTree","indent","tr","toHTML","addPeeker","removePeeker","x","Nerdamer","api","override","proxy","Proxy","target","args","callfunction","exports"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.factorial = void 0;\nvar Vector_1 = require(\"../../../Types/Vector\");\nvar Matrix_1 = require(\"../../../Types/Matrix\");\nvar Settings_1 = require(\"../../../Settings\");\nvar Utils_1 = require(\"../../../Core/Utils\");\nvar Math2_1 = require(\"../../Math2\");\nvar Frac_1 = require(\"../../../Types/Frac\");\nvar add_1 = require(\"../operations/add\");\nvar Symbol_1 = require(\"../../../Types/Symbol\");\nvar index_1 = require(\"../index\");\nvar Parser_1 = require(\"../../../Parser/Parser\");\n/**\n * The factorial function\n * @param {Symbol} symbol\n * @return {Symbol}\n */\nfunction factorial(symbol) {\n  var retval;\n  if ((0, Utils_1.isVector)(symbol)) {\n    var V = new Vector_1.Vector();\n    symbol.each(function (x, i) {\n      //i start at one.\n      V.set(i - 1, factorial(x));\n    });\n    return V;\n  }\n  if ((0, Utils_1.isMatrix)(symbol)) {\n    var M = new Matrix_1.Matrix();\n    symbol.each(function (x, i, j) {\n      //i start at one.\n      M.set(i, j, factorial(x));\n    });\n    return M;\n  }\n  if (Settings_1.Settings.PARSE2NUMBER && symbol.isConstant()) {\n    if ((0, Utils_1.isInt)(symbol)) {\n      retval = Math2_1.Math2.bigfactorial(symbol);\n    } else {\n      retval = Math2_1.Math2.gamma(symbol.multiplier.add(new Frac_1.Frac(1)).toDecimal());\n    }\n    retval = (0, Symbol_1.bigConvert)(retval);\n    return retval;\n  } else if (symbol.isConstant()) {\n    var den = symbol.getDenom();\n    if (den.equals(2)) {\n      var num = symbol.getNum();\n      var a, b, c, n;\n      if (!symbol.multiplier.isNegative()) {\n        n = (0, add_1.add)(num, new Symbol_1.Symbol(1)).multiplier.divide(new Frac_1.Frac(2));\n        a = Math2_1.Math2.bigfactorial(new Frac_1.Frac(2).multiply(n));\n        b = (0, index_1.pow)(new Symbol_1.Symbol(4), new Symbol_1.Symbol(n)).multiplier.multiply(Math2_1.Math2.bigfactorial(n));\n      } else {\n        n = (0, index_1.subtract)(num.negate(), new Symbol_1.Symbol(1)).multiplier.divide(new Frac_1.Frac(2));\n        a = (0, index_1.pow)(new Symbol_1.Symbol(-4), new Symbol_1.Symbol(n)).multiplier.multiply(Math2_1.Math2.bigfactorial(n));\n        b = Math2_1.Math2.bigfactorial(new Frac_1.Frac(2).multiply(n));\n      }\n      c = a.divide(b);\n      return (0, index_1.multiply)((0, Parser_1.parse)('sqrt(pi)'), new Symbol_1.Symbol(c));\n    }\n  }\n  return (0, Symbol_1.symfunction)(Settings_1.Settings.FACTORIAL, [symbol]);\n}\nexports.factorial = factorial;","map":{"version":3,"mappings":"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","names":["factorial","symbol","retval","V","Vector_1","each","x","i","set","M","Matrix_1","j","Settings_1","PARSE2NUMBER","isConstant","Math2_1","bigfactorial","gamma","multiplier","add","Frac_1","toDecimal","den","getDenom","equals","num","getNum","a","b","c","n","isNegative","Symbol_1","divide","multiply","negate","FACTORIAL","exports"],"sourceRoot":"","sources":["../../../../src/Functions/Core/math/factorial.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
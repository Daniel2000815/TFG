{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.vectrim = void 0;\nvar index_1 = require(\"../../index\");\nvar Parser_1 = require(\"../../../../Parser/Parser\");\n/**\n * Removes duplicates from a vector\n * @param {Vector} vector\n * @param {Number} tolerance\n * @returns {Vector}\n */\nfunction vectrim(vector, tolerance) {\n  tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\n  vector = vector.clone();\n  tolerance = Number(tolerance);\n  //place algebraic solutions first\n  vector.elements.sort(function (a, b) {\n    return b.group - a.group;\n  });\n  //depending on the start point we may have duplicates so we need to clean those up a bit.\n  //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\n  vector.elements = removeDuplicates(vector.elements, function (a, b) {\n    var diff = Number((0, index_1.subtract)((0, Parser_1.evaluate)(a), (0, Parser_1.evaluate)(b)).abs());\n    return diff <= tolerance;\n  });\n  return vector;\n}\nexports.vectrim = vectrim;\n/**\n * Removes duplicates from an array. Returns a new array\n * @param {Array} arr\n * @param {Function} condition\n */\nfunction removeDuplicates(arr, condition) {\n  var conditionType = typeof condition;\n  if (conditionType !== 'function' || conditionType === 'undefined') {\n    condition = function condition(a, b) {\n      return a === b;\n    };\n  }\n  var seen = [];\n  while (arr.length) {\n    var a = arr[0];\n    //only one element left so we're done\n    if (arr.length === 1) {\n      seen.push(a);\n      break;\n    }\n    var temp = [];\n    seen.push(a); //we already scanned these\n    for (var i = 1; i < arr.length; i++) {\n      var b = arr[i];\n      //if the number is outside the specified tolerance\n      if (!condition(a, b)) temp.push(b);\n    }\n    //start over with the remainder\n    arr = temp;\n  }\n  return seen;\n}","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEA;;;;;;AAMA,SAAgBA,OAAO,CAACC,MAAM,EAAEC,SAAS;EACrCA,SAAS,GAAG,OAAOA,SAAS,KAAK,WAAW,GAAG,KAAK,GAAGA,SAAS;EAEhED,MAAM,GAAGA,MAAM,CAACE,KAAK,EAAE;EAEvBD,SAAS,GAAGE,MAAM,CAACF,SAAS,CAAC;EAC7B;EACAD,MAAM,CAACI,QAAQ,CAACC,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC;IAC/B,OAAOA,CAAC,CAACC,KAAK,GAAGF,CAAC,CAACE,KAAK;EAC5B,CAAC,CAAC;EACF;EACA;EACAR,MAAM,CAACI,QAAQ,GAAGK,gBAAgB,CAACT,MAAM,CAACI,QAAQ,EAAE,UAAUE,CAAC,EAAEC,CAAC;IAC9D,IAAIG,IAAI,GAAGP,MAAM,CAAC,oBAAQ,EAAC,qBAAQ,EAACG,CAAC,CAAC,EAAE,qBAAQ,EAACC,CAAC,CAAC,CAAC,CAACI,GAAG,EAAE,CAAC;IAC3D,OAAOD,IAAI,IAAIT,SAAS;EAC5B,CAAC,CAAC;EAEF,OAAOD,MAAM;AACjB;AAlBAY;AAoBA;;;;;AAKA,SAASH,gBAAgB,CAACI,GAAG,EAAEC,SAAS;EACpC,IAAIC,aAAa,GAAG,OAAOD,SAAS;EAEpC,IAAIC,aAAa,KAAK,UAAU,IAAIA,aAAa,KAAK,WAAW,EAAE;IAC/DD,SAAS,GAAG,mBAAUR,CAAC,EAAEC,CAAC;MACtB,OAAOD,CAAC,KAAKC,CAAC;IAClB,CAAC;;EAGL,IAAIS,IAAI,GAAG,EAAE;EAEb,OAAMH,GAAG,CAACI,MAAM,EAAE;IACd,IAAIX,CAAC,GAAGO,GAAG,CAAC,CAAC,CAAC;IACd;IACA,IAAIA,GAAG,CAACI,MAAM,KAAK,CAAC,EAAE;MAClBD,IAAI,CAACE,IAAI,CAACZ,CAAC,CAAC;MACZ;;IAEJ,IAAIa,IAAI,GAAG,EAAE;IACbH,IAAI,CAACE,IAAI,CAACZ,CAAC,CAAC,CAAC,CAAC;IACd,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,GAAG,CAACI,MAAM,EAAEG,CAAC,EAAE,EAAE;MACjC,IAAIb,CAAC,GAAGM,GAAG,CAACO,CAAC,CAAC;MACd;MACA,IAAI,CAACN,SAAS,CAACR,CAAC,EAAEC,CAAC,CAAC,EAChBY,IAAI,CAACD,IAAI,CAACX,CAAC,CAAC;;IAEpB;IACAM,GAAG,GAAGM,IAAI;;EAGd,OAAOH,IAAI;AACf","names":["vectrim","vector","tolerance","clone","Number","elements","sort","a","b","group","removeDuplicates","diff","abs","exports","arr","condition","conditionType","seen","length","push","temp","i"],"sourceRoot":"","sources":["../../../../../src/Functions/Core/matrix_vector/vector/vectrim.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
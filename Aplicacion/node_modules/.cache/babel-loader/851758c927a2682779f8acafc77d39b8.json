{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'equal';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createEqual = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      DenseMatrix = _ref.DenseMatrix;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed: typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed: typed,\n    matrix: matrix\n  });\n  /**\r\n   * Test whether two values are equal.\r\n   *\r\n   * The function tests whether the relative difference between x and y is\r\n   * smaller than the configured epsilon. The function cannot be used to\r\n   * compare values smaller than approximately 2.22e-16.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\r\n   *\r\n   * Values `null` and `undefined` are compared strictly, thus `null` is only\r\n   * equal to `null` and nothing else, and `undefined` is only equal to\r\n   * `undefined` and nothing else. Strings are compared by their numerical value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.equal(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.equal(2 + 2, 3)         // returns false\r\n   *    math.equal(2 + 2, 4)         // returns true\r\n   *\r\n   *    const a = math.unit('50 cm')\r\n   *    const b = math.unit('5 m')\r\n   *    math.equal(a, b)             // returns true\r\n   *\r\n   *    const c = [2, 5, 1]\r\n   *    const d = [2, 7, 1]\r\n   *\r\n   *    math.equal(c, d)             // returns [true, false, true]\r\n   *    math.deepEqual(c, d)         // returns false\r\n   *\r\n   *    math.equal(\"1000\", \"1e3\")    // returns true\r\n   *    math.equal(0, null)          // returns false\r\n   *\r\n   * See also:\r\n   *\r\n   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText\r\n   *\r\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\r\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\r\n   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false\r\n   */\n\n  return typed(name, createEqualNumber({\n    typed: typed,\n    equalScalar: equalScalar\n  }), matrixAlgorithmSuite({\n    elop: equalScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createEqualNumber = factory(name, ['typed', 'equalScalar'], function (_ref2) {\n  var typed = _ref2.typed,\n      equalScalar = _ref2.equalScalar;\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y === null;\n      }\n\n      if (y === null) {\n        return x === null;\n      }\n\n      if (x === undefined) {\n        return y === undefined;\n      }\n\n      if (y === undefined) {\n        return x === undefined;\n      }\n\n      return equalScalar(x, y);\n    }\n  });\n});","map":{"version":3,"names":["factory","createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo12xSfs","createMatrixAlgorithmSuite","name","dependencies","createEqual","_ref","typed","matrix","equalScalar","DenseMatrix","matAlgo03xDSf","matAlgo07xSSf","matAlgo12xSfs","matrixAlgorithmSuite","createEqualNumber","elop","SS","DS","Ss","_ref2","anyAny","x","y","undefined"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/mathjs/lib/esm/function/relational/equal.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\r\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nvar name = 'equal';\r\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\r\nexport var createEqual = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    equalScalar,\r\n    DenseMatrix\r\n  } = _ref;\r\n  var matAlgo03xDSf = createMatAlgo03xDSf({\r\n    typed\r\n  });\r\n  var matAlgo07xSSf = createMatAlgo07xSSf({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix\r\n  });\r\n  /**\r\n   * Test whether two values are equal.\r\n   *\r\n   * The function tests whether the relative difference between x and y is\r\n   * smaller than the configured epsilon. The function cannot be used to\r\n   * compare values smaller than approximately 2.22e-16.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\r\n   *\r\n   * Values `null` and `undefined` are compared strictly, thus `null` is only\r\n   * equal to `null` and nothing else, and `undefined` is only equal to\r\n   * `undefined` and nothing else. Strings are compared by their numerical value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.equal(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.equal(2 + 2, 3)         // returns false\r\n   *    math.equal(2 + 2, 4)         // returns true\r\n   *\r\n   *    const a = math.unit('50 cm')\r\n   *    const b = math.unit('5 m')\r\n   *    math.equal(a, b)             // returns true\r\n   *\r\n   *    const c = [2, 5, 1]\r\n   *    const d = [2, 7, 1]\r\n   *\r\n   *    math.equal(c, d)             // returns [true, false, true]\r\n   *    math.deepEqual(c, d)         // returns false\r\n   *\r\n   *    math.equal(\"1000\", \"1e3\")    // returns true\r\n   *    math.equal(0, null)          // returns false\r\n   *\r\n   * See also:\r\n   *\r\n   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText\r\n   *\r\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\r\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\r\n   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false\r\n   */\r\n\r\n  return typed(name, createEqualNumber({\r\n    typed,\r\n    equalScalar\r\n  }), matrixAlgorithmSuite({\r\n    elop: equalScalar,\r\n    SS: matAlgo07xSSf,\r\n    DS: matAlgo03xDSf,\r\n    Ss: matAlgo12xSfs\r\n  }));\r\n});\r\nexport var createEqualNumber = factory(name, ['typed', 'equalScalar'], _ref2 => {\r\n  var {\r\n    typed,\r\n    equalScalar\r\n  } = _ref2;\r\n  return typed(name, {\r\n    'any, any': function anyAny(x, y) {\r\n      // strict equality for null and undefined?\r\n      if (x === null) {\r\n        return y === null;\r\n      }\r\n\r\n      if (y === null) {\r\n        return x === null;\r\n      }\r\n\r\n      if (x === undefined) {\r\n        return y === undefined;\r\n      }\r\n\r\n      if (y === undefined) {\r\n        return x === undefined;\r\n      }\r\n\r\n      return equalScalar(x, y);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,0BAAT,QAA2C,iDAA3C;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,aAApB,EAAmC,aAAnC,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeP,OAAO,CAACK,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC1E,IACEC,KADF,GAKID,IALJ,CACEC,KADF;EAAA,IAEEC,MAFF,GAKIF,IALJ,CAEEE,MAFF;EAAA,IAGEC,WAHF,GAKIH,IALJ,CAGEG,WAHF;EAAA,IAIEC,WAJF,GAKIJ,IALJ,CAIEI,WAJF;EAMA,IAAIC,aAAa,GAAGZ,mBAAmB,CAAC;IACtCQ,KAAK,EAALA;EADsC,CAAD,CAAvC;EAGA,IAAIK,aAAa,GAAGZ,mBAAmB,CAAC;IACtCO,KAAK,EAALA,KADsC;IAEtCG,WAAW,EAAXA;EAFsC,CAAD,CAAvC;EAIA,IAAIG,aAAa,GAAGZ,mBAAmB,CAAC;IACtCM,KAAK,EAALA,KADsC;IAEtCG,WAAW,EAAXA;EAFsC,CAAD,CAAvC;EAIA,IAAII,oBAAoB,GAAGZ,0BAA0B,CAAC;IACpDK,KAAK,EAALA,KADoD;IAEpDC,MAAM,EAANA;EAFoD,CAAD,CAArD;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOD,KAAK,CAACJ,IAAD,EAAOY,iBAAiB,CAAC;IACnCR,KAAK,EAALA,KADmC;IAEnCE,WAAW,EAAXA;EAFmC,CAAD,CAAxB,EAGRK,oBAAoB,CAAC;IACvBE,IAAI,EAAEP,WADiB;IAEvBQ,EAAE,EAAEL,aAFmB;IAGvBM,EAAE,EAAEP,aAHmB;IAIvBQ,EAAE,EAAEN;EAJmB,CAAD,CAHZ,CAAZ;AASD,CA5E8C,CAAxC;AA6EP,OAAO,IAAIE,iBAAiB,GAAGjB,OAAO,CAACK,IAAD,EAAO,CAAC,OAAD,EAAU,aAAV,CAAP,EAAiC,UAAAiB,KAAK,EAAI;EAC9E,IACEb,KADF,GAGIa,KAHJ,CACEb,KADF;EAAA,IAEEE,WAFF,GAGIW,KAHJ,CAEEX,WAFF;EAIA,OAAOF,KAAK,CAACJ,IAAD,EAAO;IACjB,YAAY,SAASkB,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;MAChC;MACA,IAAID,CAAC,KAAK,IAAV,EAAgB;QACd,OAAOC,CAAC,KAAK,IAAb;MACD;;MAED,IAAIA,CAAC,KAAK,IAAV,EAAgB;QACd,OAAOD,CAAC,KAAK,IAAb;MACD;;MAED,IAAIA,CAAC,KAAKE,SAAV,EAAqB;QACnB,OAAOD,CAAC,KAAKC,SAAb;MACD;;MAED,IAAID,CAAC,KAAKC,SAAV,EAAqB;QACnB,OAAOF,CAAC,KAAKE,SAAb;MACD;;MAED,OAAOf,WAAW,CAACa,CAAD,EAAIC,CAAJ,CAAlB;IACD;EApBgB,CAAP,CAAZ;AAsBD,CA3BqC,CAA/B"},"metadata":{},"sourceType":"module"}
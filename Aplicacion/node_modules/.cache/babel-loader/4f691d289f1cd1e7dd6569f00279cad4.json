{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LaTeX = void 0;\nvar Settings_1 = require(\"../Settings\");\nvar Utils_1 = require(\"../Core/Utils\");\nvar Groups_1 = require(\"../Types/Groups\");\nvar Set_1 = require(\"../Types/Set\");\nvar Collection_1 = require(\"../Parser/Collection\");\nvar Parser_1 = require(\"../Parser/Parser\");\nvar LaTeX = /*#__PURE__*/function () {\n  function LaTeX() {\n    _classCallCheck(this, LaTeX);\n  }\n  _createClass(LaTeX, null, [{\n    key: \"parser\",\n    get: function get() {\n      if (!LaTeX._parser) {\n        LaTeX._parser = LaTeX.createParser();\n      }\n      return LaTeX._parser;\n    }\n  }, {\n    key: \"createParser\",\n    value: function createParser() {\n      // create a parser and strip it from everything except the items that you need\n      var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\n      var parser = new Parser_1.Parser();\n      for (var x in parser) {\n        if (keep.indexOf(x) === -1) delete parser[x];\n      }\n      // declare the operators\n      parser.setOperator({\n        precedence: 8,\n        operator: '\\\\',\n        action: 'slash',\n        prefix: true,\n        postfix: false,\n        leftAssoc: true,\n        operation: function operation(e) {\n          return e; // bypass the slash\n        }\n      });\n\n      parser.setOperator({\n        precedence: 8,\n        operator: '\\\\,',\n        action: 'slash_comma',\n        prefix: true,\n        postfix: false,\n        leftAssoc: true,\n        operation: function operation(e) {\n          return e; // bypass the slash\n        }\n      });\n      // have braces not map to anything. We want them to be return as-is\n      var brackets = parser.getBrackets();\n      brackets['{'].maps_to = undefined;\n      return parser;\n    }\n  }, {\n    key: \"latex\",\n    value: function latex(symbol, option) {\n      // it might be an array\n      if (symbol.clone) {\n        symbol = symbol.clone(); // leave original as-is\n      }\n\n      if (symbol instanceof Collection_1.Collection) symbol = symbol.elements;\n      if (Array.isArray(symbol)) {\n        var LaTeXArray = [];\n        for (var i = 0; i < symbol.length; i++) {\n          var sym = symbol[i];\n          //This way I can generate LaTeX on an array of strings.\n          if (!(0, Utils_1.isSymbol)(sym)) sym = (0, Parser_1.parse)(sym);\n          LaTeXArray.push(this.latex(sym, option));\n        }\n        return this.brackets(LaTeXArray.join(', '), 'square');\n      } else if ((0, Utils_1.isMatrix)(symbol)) {\n        var TeX = '\\\\begin{pmatrix}\\n';\n        for (var i = 0; i < symbol.elements.length; i++) {\n          var rowTeX = [],\n            e = symbol.elements[i];\n          for (var j = 0; j < e.length; j++) {\n            rowTeX.push(this.latex(e[j], option));\n          }\n          TeX += rowTeX.join(' & ');\n          if (i < symbol.elements.length - 1) {\n            TeX += '\\\\\\\\\\n';\n          }\n        }\n        TeX += '\\\\end{pmatrix}';\n        return TeX;\n      } else if ((0, Utils_1.isVector)(symbol)) {\n        var TeX = '\\\\left[';\n        for (var i = 0; i < symbol.elements.length; i++) {\n          TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n        }\n        TeX += '\\\\right]';\n        return TeX;\n      } else if ((0, Set_1.isSet)(symbol)) {\n        var TeX = '\\\\{';\n        for (var i = 0; i < symbol.elements.length; i++) {\n          TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n        }\n        TeX += '\\\\}';\n        return TeX;\n      }\n      symbol = symbol.clone();\n      var decimal = option === 'decimal' || option === 'decimals',\n        power = symbol.power,\n        invert = (0, Utils_1.isNegative)(power),\n        negative = symbol.multiplier.lessThan(0);\n      if (symbol.group === Groups_1.Groups.P && decimal) {\n        return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\n      } else {\n        symbol.multiplier = symbol.multiplier.abs();\n        // if the user wants the result in decimal format then return it as such by placing it at the top part\n        var m_array;\n        if (decimal) {\n          var m = String(symbol.multiplier.toDecimal());\n          // if (String(m) === '1' && !decimal) m = '';\n          m_array = [m, ''];\n        } else {\n          m_array = [symbol.multiplier.num, symbol.multiplier.den];\n        }\n        // get the value as a two part array\n        var v_array = this.value(symbol, invert, option, negative),\n          p;\n        // make it all positive since we know whether to push the power to the numerator or denominator already.\n        if (invert) power.negate();\n        // the power is simple since it requires no additional formatting. We can get it to a\n        // string right away. pass in true to neglect unit powers\n        if (decimal) {\n          p = (0, Utils_1.isSymbol)(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\n          if (String(p) === '1') p = '';\n        }\n        // get the latex representation\n        else if ((0, Utils_1.isSymbol)(power)) p = this.latex(power, option);\n        // get it as a fraction\n        else p = this.formatFrac(power, true);\n        // use this array to specify if the power is getting attached to the top or the bottom\n        var p_array = ['', ''],\n          // stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\n          index = invert ? 1 : 0;\n        p_array[index] = p;\n        // special case group Groups.P and decimal\n        var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === Groups_1.Groups.CB);\n        return retval.replace(/\\+\\-/gi, '-');\n      }\n    }\n    // get the raw value of the symbol as an array\n  }, {\n    key: \"value\",\n    value: function value(symbol, inverted, option, negative) {\n      var group = symbol.group,\n        previousGroup = symbol.previousGroup,\n        v = ['', ''],\n        index = inverted ? 1 : 0;\n      /*if (group === Groups.N) // do nothing since we want to return top & bottom blank; */\n      if (symbol.isInfinity) {\n        v[index] = '\\\\infty';\n      } else if (group === Groups_1.Groups.S || group === Groups_1.Groups.P || previousGroup === Groups_1.Groups.S || previousGroup === Groups_1.Groups.P || previousGroup === Groups_1.Groups.N) {\n        var value = this.formatSubscripts(symbol.value);\n        if (value.replace) value = value.replace(/(.+)_$/, '$1\\\\_');\n        // split it so we can check for instances of alpha as well as alpha_b\n        var t_varray = String(value).split('_');\n        var greek = this.greek[t_varray[0]];\n        if (greek) {\n          t_varray[0] = greek;\n          value = t_varray.join('_');\n        }\n        var symbol = this.symbols[t_varray[0]];\n        if (symbol) {\n          t_varray[0] = symbol;\n          value = t_varray.join('_');\n        }\n        v[index] = value;\n      } else if (group === Groups_1.Groups.FN || previousGroup === Groups_1.Groups.FN) {\n        var name,\n          input = [],\n          fname = symbol.fname;\n        // collect the arguments\n        for (var i = 0; i < symbol.args.length; i++) {\n          var arg = symbol.args[i],\n            item;\n          if (typeof arg === 'string') item = arg;else {\n            item = this.latex(arg, option);\n          }\n          input.push(item);\n        }\n        if (fname === Settings_1.Settings.SQRT) {\n          v[index] = '\\\\sqrt' + this.braces(input.join(','));\n        } else if (fname === Settings_1.Settings.ABS) {\n          v[index] = this.brackets(input.join(','), 'abs');\n        } else if (fname === Settings_1.Settings.PARENTHESIS) {\n          v[index] = this.brackets(input.join(','), 'parens');\n        } else if (fname === 'limit') {\n          v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\n        } else if (fname === 'integrate') {\n          v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\n        } else if (fname === 'defint') {\n          v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\n        } else if (fname === Settings_1.Settings.FACTORIAL || fname === Settings_1.Settings.DOUBLEFACTORIAL) {\n          var arg = symbol.args[0];\n          if (arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\n            input[0] = this.brackets(input[0]);\n          }\n          v[index] = input[0] + (fname === Settings_1.Settings.FACTORIAL ? '!' : '!!');\n        } else if (fname === 'floor') {\n          v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\n        } else if (fname === 'ceil') {\n          v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\n        }\n        // capture log(a, b)\n        else if (fname === Settings_1.Settings.LOG && input.length > 1) {\n          v[index] = '\\\\mathrm' + this.braces(Settings_1.Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\n        }\n        // capture log(a, b)\n        else if (fname === Settings_1.Settings.LOG10) {\n          v[index] = '\\\\mathrm' + this.braces(Settings_1.Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\n        } else if (fname === 'sum') {\n          var a = input[0],\n            b = input[1],\n            c = input[2],\n            d = input[3];\n          v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n        } else if (fname === 'product') {\n          var a = input[0],\n            b = input[1],\n            c = input[2],\n            d = input[3];\n          v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n        } else if (fname === 'nthroot') {\n          v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\n        } else if (fname === 'mod') {\n          v[index] = input[0] + ' \\\\bmod ' + input[1];\n        } else if (fname === 'realpart') {\n          v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\n        } else if (fname === 'imagpart') {\n          v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\n        } else {\n          var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\n          if (symbol.isConversion) v[index] = name + this.brackets(input.join(''), 'parens');else v[index] = name + this.brackets(input.join(','), 'parens');\n        }\n      } else if (symbol.isComposite()) {\n        var collected = symbol.collectSymbols().sort(group === Groups_1.Groups.CP || previousGroup === Groups_1.Groups.CP ? function (a, b) {\n            return b.group - a.group;\n          } : function (a, b) {\n            var x = (0, Utils_1.isSymbol)(a.power) ? -1 : a.power;\n            var y = (0, Utils_1.isSymbol)(b.power) ? -1 : b.power;\n            return y - x;\n          }),\n          symbols = [],\n          l = collected.length;\n        for (var i = 0; i < l; i++) {\n          symbols.push(LaTeX.latex(collected[i], option));\n        }\n        var value = symbols.join('+');\n        v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\n      } else if (group === Groups_1.Groups.CB || previousGroup === Groups_1.Groups.EX || previousGroup === Groups_1.Groups.CB) {\n        if (group === Groups_1.Groups.CB) symbol.distributeExponent();\n        // This almost feels a little like cheating but I need to know if I should be wrapping the symbol\n        // in brackets or not. We'll do this by checking the value of the numerator and then comparing it\n        // to whether the symbol value is \"simple\" or not.\n        var denominator = [],\n          numerator = [];\n        // Generate a profile\n        var den_map = [],\n          num_map = [],\n          num_c = 0,\n          den_c = 0;\n        var setBrackets = function setBrackets(container, map, counter) {\n          if (counter > 1 && map.length > 0) {\n            var l = map.length;\n            for (var i = 0; i < l; i++) {\n              var idx = map[i],\n                item = container[idx];\n              if (!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\n                container[idx] = LaTeX.brackets(item, 'parens');\n              }\n            }\n          }\n          return container;\n        };\n        // Generate latex for each of them\n        symbol.each(function (x) {\n          var isDenom = (0, Utils_1.isNegative)(x.power),\n            laTex;\n          if (isDenom) {\n            laTex = LaTeX.latex(x.invert(), option);\n            den_c++;\n            if (x.isComposite()) {\n              if (symbol.multiplier.den != 1 && Math.abs(x.power) == 1) laTex = LaTeX.brackets(laTex, 'parens');\n              den_map.push(denominator.length); // make a note of where the composite was found\n            }\n\n            denominator.push(laTex);\n          } else {\n            laTex = LaTeX.latex(x, option);\n            num_c++;\n            if (x.isComposite()) {\n              if (symbol.multiplier.num != 1 && Math.abs(x.power) == 1) laTex = LaTeX.brackets(laTex, 'parens');\n              num_map.push(numerator.length); // make a note of where the composite was found\n            }\n\n            numerator.push(laTex);\n          }\n        });\n        // Apply brackets\n        setBrackets(numerator, num_map, num_c);\n        v[0] = numerator.join(this.dot); // collapse the numerator into one string\n        setBrackets(denominator, den_map, den_c);\n        v[1] = denominator.join(this.dot);\n      }\n      return v;\n    }\n  }, {\n    key: \"set\",\n    value: function set(m, v, p, combine_power) {\n      var isBracketed = function isBracketed(v) {\n        return /^\\\\left\\(.+\\\\right\\)$/.test(v);\n      };\n      // format the power if it exists\n      if (p) p = this.formatP(p);\n      // group Groups.CB will have to be wrapped since the power applies to both it's numerator and denominator\n      if (combine_power) {\n        // POSSIBLE BUG: If powers for group Groups.CB format wrong, investigate this since I might have overlooked something\n        // the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\n        // of a case where this isn't true\n        var tp = p[0];\n        p[0] = ''; // temporarily make p blank\n      }\n      // merge v and p. Not that v MUST be first since the order matters\n      v = this.merge(v, p);\n      var mn = m[0],\n        md = m[1],\n        vn = v[0],\n        vd = v[1];\n      // filters\n      // if the top has a variable but the numerator is one drop it\n      if (vn && Number(mn) === 1) mn = '';\n      // if denominator is 1 drop it always\n      if (Number(md) === 1) md = '';\n      // prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\n      var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');\n      // prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\n      var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');\n      // format the power if it exists\n      // make it a fraction if both top and bottom exists\n      if (top && bottom) {\n        var frac = this.frac(top, bottom);\n        if (combine_power && tp) frac = this.brackets(frac) + tp;\n        return frac;\n      }\n      // otherwise only the top exists so return that\n      else return top;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(a, b) {\n      var r = [];\n      for (var i = 0; i < 2; i++) {\n        r[i] = a[i] + b[i];\n      }\n      return r;\n    }\n    // joins together two strings if both exist\n  }, {\n    key: \"join\",\n    value: function join(n, d, glue) {\n      if (!n && !d) return '';\n      if (n && !d) return n;\n      if (d && !n) return d;\n      return n + glue + d;\n    }\n    /**\n     * Places subscripts in braces for proper formatting\n     * @param {String} v\n     * @returns {String}\n     */\n  }, {\n    key: \"formatSubscripts\",\n    value: function formatSubscripts(v) {\n      // Split it at the underscore\n      var arr = v.toString().split('_');\n      var name = '';\n      // Loop over all entries except the first one\n      while (arr.length > 1) {\n        // Wrap all in braces except for the last one\n        if (arr.length > 0) {\n          name = '_' + this.braces(arr.pop() + name);\n        }\n      }\n      return arr[0] + name;\n    }\n  }, {\n    key: \"formatP\",\n    value: function formatP(p_array) {\n      for (var i = 0; i < 2; i++) {\n        var p = p_array[i];\n        if (p) p_array[i] = '^' + this.braces(p);\n      }\n      return p_array;\n    }\n    /**\n     * formats the fractions accordingly.\n     * @param {Frac} f\n     * @param {boolean} is_pow\n     */\n  }, {\n    key: \"formatFrac\",\n    value: function formatFrac(f, is_pow) {\n      var n = f.num.toString(),\n        d = f.den.toString();\n      // no need to have x^1\n      if (is_pow && n === '1' && d === '1') return '';\n      // no need to have x/1\n      if (d === '1') return n;\n      return this.frac(n, d);\n    }\n  }, {\n    key: \"frac\",\n    value: function frac(n, d) {\n      return '\\\\frac' + this.braces(n) + this.braces(d);\n    }\n  }, {\n    key: \"braces\",\n    value: function braces(e) {\n      return '{' + e + '}';\n    }\n  }, {\n    key: \"brackets\",\n    value: function brackets(e, typ) {\n      typ = typ || 'parens';\n      var bracketTypes = {\n        parens: ['(', ')'],\n        square: ['[', ']'],\n        brace: ['{', '}'],\n        abs: ['|', '|'],\n        angle: ['\\\\langle', '\\\\rangle']\n      };\n      var bracket = bracketTypes[typ];\n      return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\n    }\n    /**\n     * Removes extreneous tokens\n     * @param {Tokens[]} tokens\n     * @returns {Tokens[]}\n     */\n  }, {\n    key: \"filterTokens\",\n    value: function filterTokens(tokens) {\n      var filtered = [];\n      // Copy over the type of the scope\n      if (Array.isArray(tokens)) {\n        filtered.type = tokens.type;\n      }\n      // the items that need to be disposed\n      var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n        var next_token = tokens[i + 1];\n        if (token.value === '\\\\' && next_token.value === '\\\\') {\n          filtered.push(token);\n        } else if (Array.isArray(token)) {\n          filtered.push(LaTeX.filterTokens(token));\n        } else if (d.indexOf(token.value) === -1) {\n          filtered.push(token);\n        }\n      }\n      return filtered;\n    }\n    /*\n     * Parses tokens from LaTeX string. Does not do any error checking\n     * @param {Tokens[]} rpn\n     * @returns {String}\n     */\n  }, {\n    key: \"parse\",\n    value: function parse(raw_tokens) {\n      var i, l;\n      var retval = '';\n      var tokens = this.filterTokens(raw_tokens);\n      var replace = {\n        'cdot': '',\n        'times': '',\n        'infty': 'Infinity'\n      };\n      // get the next token\n      var next = function next(n) {\n        return tokens[typeof n === 'undefined' ? ++i : i += n];\n      };\n      var parse_next = function parse_next() {\n        return LaTeX.parse(next());\n      };\n      var get = function get(token) {\n        if (token in replace) {\n          return replace[token];\n        }\n        // A quirk with implicit multiplication forces us to check for *\n        if (token === '*' && tokens[i + 1].value === '&') {\n          next(2); // skip this and the &\n          return ',';\n        }\n        if (token === '&') {\n          next();\n          return ','; // Skip the *\n        }\n        // If it's the end of a row, return the row separator\n        if (token === '\\\\') {\n          return '],[';\n        }\n        return token;\n      };\n      // start parsing the tokens\n      for (i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n        // fractions\n        if (token.value === 'frac') {\n          // parse and wrap it in brackets\n          var n = parse_next();\n          var d = parse_next();\n          retval += n + '/' + d;\n        } else if (token.value in LaTeX.symbols) {\n          if (token.value === Settings_1.Settings.SQRT && tokens[i + 1].type === 'vector' && tokens[i + 2].type === 'Set') {\n            var base = parse_next();\n            var expr = parse_next();\n            retval += expr + '^' + (0, Utils_1.inBrackets)('1/' + base);\n          } else {\n            retval += token.value + parse_next();\n          }\n        } else if (token.value === 'int') {\n          var f = parse_next();\n          // skip the comma\n          i++;\n          // get the variable of integration\n          var dx = next().value;\n          dx = get(dx.substring(1, dx.length));\n          retval += 'integrate' + (0, Utils_1.inBrackets)(f + ',' + dx);\n        } else if (token.value === 'int_') {\n          var l = parse_next(); // lower\n          i++; // skip the ^\n          var u = next().value; // upper\n          // if it is in brackets\n          if (u === undefined) {\n            i--;\n            var u = parse_next();\n          }\n          var f = parse_next(); // function\n          // get the variable of integration\n          var dx = next().value;\n          // skip the comma\n          if (dx === ',') {\n            var dx = next().value;\n          }\n          // if 'd', skip\n          if (dx === 'differentialD') {\n            // skip the *\n            i++;\n            var dx = next().value;\n          }\n          if (dx === 'mathrm') {\n            // skip the mathrm{d}\n            i++;\n            var dx = next().value;\n          }\n          retval += 'defint' + (0, Utils_1.inBrackets)(f + ',' + l + ',' + u + ',' + dx);\n        } else if (token.value && token.value.startsWith('int_')) {\n          // var l = parse_next(); // lower\n          var l = token.value.replace('int_', '');\n          console.log('uppernow');\n          i++; // skip the ^\n          var u = next().value; // upper\n          // if it is in brackets\n          if (u === undefined) {\n            i--;\n            var u = parse_next();\n          }\n          var f = parse_next(); // function\n          // get the variable of integration\n          var dx = next().value;\n          // skip the comma\n          if (dx === ',') {\n            var dx = next().value;\n          }\n          // if 'd', skip\n          if (dx === 'differentialD') {\n            // skip the *\n            i++;\n            var dx = next().value;\n          }\n          if (dx === 'mathrm') {\n            // skip the mathrm{d}\n            i++;\n            var dx = next().value;\n          }\n          retval += 'defint' + (0, Utils_1.inBrackets)(f + ',' + l + ',' + u + ',' + dx);\n        } else if (token.value === 'mathrm') {\n          var f = tokens[++i][0].value;\n          retval += f + parse_next();\n        }\n        // sum and product\n        else if (token.value === 'sum_' || token.value === 'prod_') {\n          var fn = token.value === 'sum_' ? 'sum' : 'product';\n          var nxt = next();\n          i++; // skip the caret\n          var end = parse_next();\n          var f = parse_next();\n          retval += fn + (0, Utils_1.inBrackets)([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\n        } else if (token.value === 'lim_') {\n          var nxt = next();\n          retval += 'limit' + (0, Utils_1.inBrackets)([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\n        } else if (token.value === 'begin') {\n          var nxt = next();\n          if (Array.isArray(nxt)) {\n            var v = nxt[0].value;\n            if (v === 'matrix') {\n              // Start a matrix\n              retval += 'matrix([';\n            }\n          }\n        } else if (token.value === 'end') {\n          var nxt = next();\n          if (Array.isArray(nxt)) {\n            var v = nxt[0].value;\n            if (v === 'matrix') {\n              // End a matrix\n              retval += '])';\n            }\n          }\n        } else {\n          if (Array.isArray(token)) {\n            retval += get(LaTeX.parse(token));\n          } else {\n            retval += get(token.value.toString());\n          }\n        }\n      }\n      return (0, Utils_1.inBrackets)(retval);\n    }\n  }]);\n  return LaTeX;\n}();\nexports.LaTeX = LaTeX;\n/** @deprecated */\nLaTeX.space = '~';\nLaTeX.dot = ' \\\\cdot ';\nLaTeX.greek = {\n  alpha: '\\\\alpha',\n  beta: '\\\\beta',\n  gamma: '\\\\gamma',\n  delta: '\\\\delta',\n  epsilon: '\\\\epsilon',\n  zeta: '\\\\zeta',\n  eta: '\\\\eta',\n  theta: '\\\\theta',\n  iota: '\\\\iota',\n  kappa: '\\\\kappa',\n  lambda: '\\\\lambda',\n  mu: '\\\\mu',\n  nu: '\\\\nu',\n  xi: '\\\\xi',\n  omnikron: '\\\\omnikron',\n  pi: '\\\\pi',\n  rho: '\\\\rho',\n  sigma: '\\\\sigma',\n  tau: '\\\\tau',\n  upsilon: \"\\\\upsilon\",\n  phi: '\\\\phi',\n  chi: '\\\\chi',\n  psi: '\\\\psi',\n  omega: '\\\\omega',\n  Gamma: '\\\\Gamma',\n  Delta: '\\\\Delta',\n  Epsilon: '\\\\Epsilon',\n  Theta: '\\\\Theta',\n  Lambda: '\\\\Lambda',\n  Xi: '\\\\Xi',\n  Pi: '\\\\Pi',\n  Sigma: '\\\\Sigma',\n  Phi: '\\\\Phi',\n  Psi: '\\\\Psi',\n  Omega: '\\\\Omega'\n};\nLaTeX.symbols = {\n  arccos: '\\\\arccos',\n  cos: '\\\\cos',\n  csc: '\\\\csc',\n  exp: '\\\\exp',\n  ker: '\\\\ker',\n  limsup: '\\\\limsup',\n  min: '\\\\min',\n  sinh: '\\\\sinh',\n  arcsin: '\\\\arcsin',\n  cosh: '\\\\cosh',\n  deg: '\\\\deg',\n  gcd: '\\\\gcd',\n  lg: '\\\\lg',\n  ln: '\\\\ln',\n  Pr: '\\\\Pr',\n  sqrt: '\\\\sqrt',\n  sup: '\\\\sup',\n  arctan: '\\\\arctan',\n  cot: '\\\\cot',\n  det: '\\\\det',\n  hom: '\\\\hom',\n  lim: '\\\\lim',\n  log: '\\\\log',\n  LN: '\\\\LN',\n  sec: '\\\\sec',\n  tan: '\\\\tan',\n  arg: '\\\\arg',\n  coth: '\\\\coth',\n  dim: '\\\\dim',\n  inf: '\\\\inf',\n  liminf: '\\\\liminf',\n  max: '\\\\max',\n  sin: '\\\\sin',\n  tanh: '\\\\tanh'\n};","map":{"version":3,"mappings":"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","names":["LaTeX","_parser","createParser","keep","parser","Parser_1","x","indexOf","setOperator","precedence","operator","action","prefix","postfix","leftAssoc","operation","e","brackets","getBrackets","maps_to","undefined","symbol","option","clone","Collection_1","elements","Array","isArray","LaTeXArray","i","length","sym","push","latex","join","TeX","rowTeX","j","decimal","power","invert","negative","multiplier","lessThan","group","Groups_1","P","String","toDecimal","Math","pow","value","abs","m_array","m","num","den","v_array","p","negate","formatFrac","p_array","index","retval","set","CB","replace","inverted","previousGroup","v","isInfinity","S","N","formatSubscripts","t_varray","split","greek","symbols","FN","name","input","fname","args","arg","item","Settings_1","SQRT","braces","ABS","PARENTHESIS","FACTORIAL","DOUBLEFACTORIAL","equals","isComposite","isCombination","LOG","LOG10","a","b","c","d","isConversion","collected","collectSymbols","sort","CP","y","l","isLinear","EX","distributeExponent","denominator","numerator","den_map","num_map","num_c","den_c","setBrackets","container","map","counter","idx","test","each","isDenom","laTex","dot","combine_power","isBracketed","formatP","tp","merge","mn","md","vn","vd","Number","top","bottom","frac","r","n","glue","arr","toString","pop","f","is_pow","typ","bracketTypes","parens","square","brace","angle","bracket","tokens","filtered","type","token","next_token","filterTokens","raw_tokens","next","parse_next","parse","get","base","expr","dx","substring","u","startsWith","console","log","fn","nxt","end","exports","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omnikron","pi","rho","sigma","tau","upsilon","phi","chi","psi","omega","Gamma","Delta","Epsilon","Theta","Lambda","Xi","Pi","Sigma","Phi","Psi","Omega","arccos","cos","csc","exp","ker","limsup","min","sinh","arcsin","cosh","deg","gcd","lg","ln","Pr","sqrt","sup","arctan","cot","det","hom","lim","LN","sec","tan","coth","dim","inf","liminf","max","sin","tanh"],"sourceRoot":"","sources":["../../src/LaTeX/LaTeX.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
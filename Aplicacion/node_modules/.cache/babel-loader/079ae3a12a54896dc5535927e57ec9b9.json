{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _inherits = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar _createSuper = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\nvar _wrapNativeSuper = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tokenizer = void 0;\nvar Token_1 = require(\"./Token\");\nvar Utils_1 = require(\"../Core/Utils\");\nvar Math2_1 = require(\"../Functions/Math2\");\nvar Settings_1 = require(\"../Settings\");\nvar Node_1 = require(\"./Node\");\nvar Errors_1 = require(\"../Core/Errors\");\nvar ParityError = /*#__PURE__*/function (_Error) {\n  _inherits(ParityError, _Error);\n  var _super = _createSuper(ParityError);\n  function ParityError() {\n    var _this;\n    _classCallCheck(this, ParityError);\n    _this = _super.apply(this, arguments);\n    _this.name = 'ParityError';\n    return _this;\n  }\n  return _createClass(ParityError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar Tokenizer = /*#__PURE__*/function () {\n  function Tokenizer(functionsProvider, operators, units) {\n    _classCallCheck(this, Tokenizer);\n    this.preprocessors = {\n      names: [],\n      actions: []\n    };\n    this.functions = functionsProvider;\n    this.brackets = operators.getBrackets();\n    this.operators = operators;\n    this.units = units;\n  }\n  /*\n   * Tokenizes the string\n   * @param {String} e\n   * @returns {Token[]}\n   */\n  _createClass(Tokenizer, [{\n    key: \"tokenize\",\n    value: function tokenize(e) {\n      var shouldPrepare = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (shouldPrepare) {\n        e = this.prepareExpression(e);\n      }\n      var t = new InnerTokenizer(this.functions, this.brackets, this.operators, this.units, e);\n      return t.tokenize();\n    }\n  }, {\n    key: \"addPreprocessor\",\n    value: function addPreprocessor(name, action, order, shift_cells) {\n      var names = this.preprocessors.names || [];\n      var actions = this.preprocessors.actions || [];\n      if (typeof action !== 'function')\n        //the person probably forgot to specify a name\n        throw new Errors_1.PreprocessorError('Incorrect parameters. Function expected!');\n      if (!order) {\n        names.push(name);\n        actions.push(action);\n      } else {\n        if (shift_cells) {\n          names.splice(order, 0, name);\n          actions.splice(order, 0, action);\n        } else {\n          names[order] = name;\n          actions[order] = action;\n        }\n      }\n    }\n  }, {\n    key: \"getPreprocessors\",\n    value: function getPreprocessors() {\n      var _a;\n      var preprocessors = {};\n      if ((_a = this.preprocessors.names) === null || _a === void 0 ? void 0 : _a.length) for (var i = 0, l = this.preprocessors.names.length; i < l; i++) {\n        var name = this.preprocessors.names[i] || '';\n        preprocessors[name] = {\n          order: i,\n          action: this.preprocessors.actions[i]\n        };\n      }\n      return preprocessors;\n    }\n  }, {\n    key: \"removePreprocessor\",\n    value: function removePreprocessor(name, shift_cells) {\n      var i = this.preprocessors.names.indexOf(name);\n      if (shift_cells) {\n        (0, Utils_1.remove)(this.preprocessors.names, i);\n        (0, Utils_1.remove)(this.preprocessors.actions, i);\n      } else {\n        this.preprocessors.names[i] = undefined;\n        this.preprocessors.actions[i] = undefined;\n      }\n    }\n  }, {\n    key: \"prepareExpression\",\n    value:\n    /*\n     * Preforms preprocessing on the string. Useful for making early modification before\n     * sending to the parser\n     * @param {String} e\n     */\n    function prepareExpression(e) {\n      var _this2 = this;\n      var _a;\n      /*\n       * Since variables cannot start with a number, the assumption is made that when this occurs the\n       * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for\n       * a side-by-side close and open parenthesis\n       */\n      e = String(e);\n      //apply preprocessors\n      for (var i = 0; i < this.preprocessors.actions.length; i++) {\n        e = ((_a = this.preprocessors.actions[i]) === null || _a === void 0 ? void 0 : _a.call(this, e)) || e;\n      }\n      //e = e.split(' ').join('');//strip empty spaces\n      //replace multiple spaces with one space\n      e = e.replace(/\\s+/g, ' ');\n      //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\n      if (/e/gi.test(e)) {\n        //replace scientific numbers\n        e = e.replace(/-*\\d+\\.*\\d*e\\+?-?\\d+/gi, function (x) {\n          // @ts-ignore\n          return Math2_1.Math2.scientificToDecimal(x);\n        });\n      }\n      //allow omission of multiplication after coefficients\n      e = e.replace(Settings_1.Settings.IMPLIED_MULTIPLICATION_REGEX, function (match, group1, group2, start, str) {\n        var first = str.charAt(start),\n          before = '',\n          d = '*';\n        if (!first.match(/[+\\-\\/*]/)) before = str.charAt(start - 1);\n        if (before.match(/[a-z]/i)) d = '';\n        return group1 + d + group2;\n      });\n      e = e.replace(/([a-z0-9_]+)/gi, function (match, a) {\n        if (!Settings_1.Settings.USE_MULTICHARACTER_VARS && !_this2.functions.getFunctionDescriptor(a)) {\n          if (!isNaN(a)) return a;\n          return a.split('').join('*');\n        }\n        return a;\n      });\n      //allow omission of multiplication sign between brackets\n      e = e.replace(/\\)\\(/g, ')*(') || '0';\n      //replace x(x+a) with x*(x+a)\n      while (true) {\n        var e_org = e; //store the original\n        e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\n          var g1 = a || c,\n            g2 = b || d;\n          if (_this2.functions.getFunctionDescriptor(g1))\n            //create a passthroughs for functions\n            return g1 + g2;\n          return g1 + '*' + g2;\n        });\n        //if the original equals the replace we're done\n        if (e_org === e) break;\n      }\n      return e;\n    }\n  }, {\n    key: \"tree\",\n    value: function tree(tokens) {\n      var Q = [];\n      for (var i = 0; i < tokens.length; i++) {\n        var e = tokens[i];\n        //Arrays indicate a new scope so parse that out\n        if (Array.isArray(e)) {\n          e = this.tree(e);\n          //if it's a comma then it's just arguments\n          Q.push(e);\n          continue;\n        }\n        if (e.type === Token_1.Token.OPERATOR) {\n          if (e.is_prefix || e.postfix) {\n            //prefixes go to the left, postfix to the right\n            var location = e.is_prefix ? 'left' : 'right';\n            var last = Q.pop();\n            e = new Node_1.Node(e);\n            e[location] = last;\n            Q.push(e);\n          } else {\n            e = new Node_1.Node(e);\n            e.right = Q.pop();\n            e.left = Q.pop();\n            Q.push(e);\n          }\n        } else if (e.type === Token_1.Token.FUNCTION) {\n          e = new Node_1.Node(e);\n          var args = Q.pop();\n          e.right = args;\n          if (e.value === 'object') {\n            //check if Q has a value\n            var _last = Q[Q.length - 1];\n            if (_last) {\n              while (_last.right) {\n                _last = _last.right;\n              }\n              _last.right = e;\n              continue;\n            }\n          }\n          Q.push(e);\n        } else {\n          Q.push(new Node_1.Node(e));\n        }\n      }\n      return Q[0];\n    }\n  }]);\n  return Tokenizer;\n}();\nexports.Tokenizer = Tokenizer;\nvar InnerTokenizer = /*#__PURE__*/function () {\n  function InnerTokenizer(functions, brackets, operators, units, expression) {\n    _classCallCheck(this, InnerTokenizer);\n    this.expression = expression;\n    this.functions = functions;\n    this.brackets = brackets;\n    this.operators = operators;\n    this.units = units;\n    this.tokens = []; //the tokens container\n    this.col = 0; //the column position\n    this.lpos = 0; //marks beginning of next token\n    this.scopes = [this.tokens]; //initiate with the tokens as the highest scope\n    this.target = this.tokens; //the target to which the tokens are added. This can swing up or down\n    this.depth = 0;\n    //cast to String\n    var e = String(this.expression);\n    //remove multiple white spaces and spaces at beginning and end of string\n    e = e.trim().replace(/\\s+/g, ' ');\n    //remove spaces before and after brackets\n    for (var x in this.brackets) {\n      var regex = new RegExp(this.brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\n      e = e.replace(regex, x);\n    }\n    this.expression = e;\n  }\n  /**\n   * Adds a scope to tokens\n   * @param {String} scope_type\n   * @param {int} column\n   * @returns {undefined}\n   */\n  _createClass(InnerTokenizer, [{\n    key: \"addScope\",\n    value: function addScope(scope_type, column) {\n      // TODO: need to refactor this mix of array and object\n      var new_scope = []; //create a new scope\n      if (scope_type !== undefined) {\n        new_scope.type = scope_type;\n      }\n      new_scope.column = column; //mark the column of the scope\n      this.scopes.push(new_scope); //add it to the list of scopes\n      this.target.push(new_scope); //add it to the tokens list since now it's a scope\n      this.target = new_scope; //point to it\n      this.depth++; //go down one in scope\n    }\n    /**\n     * Goes up in scope by one\n     * @returns {undefined}\n     */\n  }, {\n    key: \"goUp\",\n    value: function goUp() {\n      this.scopes.pop(); //remove the scope from the scopes stack\n      this.target = this.scopes[--this.depth]; //point the above scope\n    }\n    /**\n     * Extracts all the operators from the expression string starting at postion start_at\n     * @param e\n     * @param {int} start_at\n     * @returns {string}\n     */\n  }, {\n    key: \"get_operator_str\",\n    value: function get_operator_str(e, start_at) {\n      //mark the end of the operator as the start since we're just going\n      //to be walking along the string\n      var end = start_at + 1;\n      //just keep moving along\n      while (this.operators.isOperator(e.charAt(end++))) {}\n      //remember that we started at one position ahead. The beginning operator is what triggered\n      //this function to be called in the first place. String.CharAt is zero based so we now\n      //have to correct two places. The initial increment + the extra++ at the end of end during\n      //the last iteration.\n      return e.substring(start_at, end - 1);\n    }\n    /**\n     * Breaks operator up in to several different operators as defined in operators\n     * @param {string} operator_str\n     * @returns {string[]}\n     */\n  }, {\n    key: \"chunkify\",\n    value: function chunkify(operator_str) {\n      var start = this.col - operator_str.length; //start of operator\n      var _operators = [];\n      var operator = operator_str.charAt(0);\n      //grab the largest possible chunks but start at 2 since we already know\n      //that the first character is an operator\n      var index = start + 1;\n      var operatorLength = operator_str.length;\n      for (var i = 1; i < operatorLength; i++, index++) {\n        var ch = operator_str.charAt(i);\n        var o = operator + ch;\n        //since the operator now is undefined then the last operator\n        //was the largest possible combination.\n        if (!this.operators.isOperator(o)) {\n          _operators.push(new Token_1.Token(operator, Token_1.Token.OPERATOR, index, this.operators.getOperator(operator)));\n          operator = ch;\n        } else operator = o; //now the operator is the larger chunk\n      }\n      //add the last operator\n      _operators.push(new Token_1.Token(operator, Token_1.Token.OPERATOR, index, this.operators.getOperator(operator)));\n      return _operators;\n    }\n    /**\n     * Is used to add a token to the tokens array. Makes sure that no empty token is added\n     * @param {int} at\n     * @param {String} token\n     * @returns {undefined}\n     */\n  }, {\n    key: \"add_token\",\n    value: function add_token(at, token) {\n      //grab the token if we're not supplied one\n      if (token === undefined) {\n        token = this.expression.substring(this.lpos, at);\n      }\n      //only add it if it's not an empty string\n      if (token in this.units) {\n        this.target.push(new Token_1.Token(token, Token_1.Token.UNIT, this.lpos));\n      } else if (token !== '') {\n        this.target.push(new Token_1.Token(token, Token_1.Token.VARIABLE_OR_LITERAL, this.lpos));\n      }\n    }\n    /**\n     * Adds a function to the output\n     * @param {String} f\n     * @returns {undefined}\n     */\n  }, {\n    key: \"add_function\",\n    value: function add_function(f) {\n      this.target.push(new Token_1.Token(f, Token_1.Token.FUNCTION, this.lpos));\n    }\n    /**\n     * Tokens are found between operators so this marks the location of where the last token was found\n     * @param {int} position\n     * @returns {undefined}\n     */\n  }, {\n    key: \"set_last_position\",\n    value: function set_last_position(position) {\n      this.lpos = position + 1;\n    }\n    /**\n     * When a operator is found and added, especially a combo operator, then the column location\n     * has to be adjusted to the end of the operator\n     * @returns {undefined}\n     */\n  }, {\n    key: \"adjust_column_position\",\n    value: function adjust_column_position(operator_str) {\n      this.lpos = this.lpos + operator_str.length - 2;\n      this.col = this.lpos - 1;\n    }\n    /**\n     * Tokenizes the string\n     * @param {String} e\n     * @returns {Token[]}\n     */\n  }, {\n    key: \"tokenize\",\n    value: function tokenize() {\n      var e = this.expression;\n      var L = e.length; //expression length\n      var open_brackets = [];\n      var has_space = false; //marks if an open space character was found\n      var SPACE = ' ';\n      var EMPTY_STRING = '';\n      var COMMA = ',';\n      var MINUS = '-';\n      var MULT = '*';\n      //Possible source of bug. Review\n      /*\n       //gets the next space\n       var next_space = function(from) {\n       for (var i=from; i<L; i++) {\n       if (e.charAt(i) === ' ')\n       return i;\n       }\n        return L; //assume the end of the string instead\n       };\n       */\n      for (; this.col < L; this.col++) {\n        var ch = e.charAt(this.col);\n        if (this.operators.isOperator(ch)) {\n          this.add_token(this.col);\n          //is the last token numeric?\n          var last_token_is_numeric = this.target[0] && (0, Utils_1.isNumber)(this.target[0]);\n          //is this character multiplication?\n          var is_multiplication = last_token_is_numeric && ch === MULT;\n          //if we're in a new scope then go up by one but if the space\n          //is right befor an operator then it makes no sense to go up in scope\n          //consider sin -x. The last position = current position at the minus sign\n          //this means that we're going for sin(x) -x which is wrong\n          //Ignore comma since comma is still part of the existing scope.\n          if (has_space && this.lpos < this.col && !(ch === COMMA || is_multiplication)) {\n            has_space = false;\n            this.goUp();\n          }\n          //mark the last position that a\n          this.set_last_position(this.col + 1);\n          var operator_str = this.get_operator_str(e, this.col);\n          this.adjust_column_position(operator_str);\n          this.target.push.apply(this.target, this.chunkify(operator_str));\n        } else if (ch in this.brackets) {\n          var bracket = this.brackets[ch];\n          if (bracket.is_open) {\n            //mark the bracket\n            open_brackets.push([bracket, this.lpos]);\n            var f = e.substring(this.lpos, this.col);\n            if (this.functions.getFunctionDescriptor(f)) {\n              this.add_function(f);\n            } else if (f !== '') {\n              //assume multiplication\n              //TODO: Add the multiplication to stack\n              this.target.push(new Token_1.Token(f, Token_1.Token.VARIABLE_OR_LITERAL, this.lpos));\n            }\n            //go down one in scope\n            this.addScope(bracket.maps_to, this.col);\n          } else if (bracket.is_close) {\n            //get the matching bracket\n            var pair = open_brackets.pop();\n            //throw errors accordingly\n            //missing open bracket\n            if (!pair) throw new ParityError('Missing open bracket for bracket at: ' + (this.col + 1));\n            //incorrect pair\n            else if (pair[0].id !== bracket.id - 1) throw new ParityError('Parity error');\n            this.add_token(this.col);\n            this.goUp();\n          }\n          this.set_last_position(this.col);\n        } else if (ch === SPACE) {\n          var prev = e.substring(this.lpos, this.col); //look back\n          var nxt = e.charAt(this.col + 1); //look forward\n          if (has_space) {\n            if (this.operators.isOperator(prev)) {\n              this.target.push(new Token_1.Token(prev, Token_1.Token.OPERATOR, this.col, this.operators.getOperator(prev)));\n            } else {\n              this.add_token(undefined, prev);\n              //we're at the closing space\n              this.goUp(); //go up in scope if we're at a space\n              //assume multiplication if it's not an operator except for minus\n              var is_operator = this.operators.isOperator(nxt);\n              if (is_operator && this.operators.getOperator(nxt).value === MINUS || !is_operator) {\n                this.target.push(new Token_1.Token(MULT, Token_1.Token.OPERATOR, this.col, this.operators.getOperator(MULT)));\n              }\n            }\n            has_space = false; //remove the space\n          } else {\n            //we're at the closing space\n            //check if it's a function\n            var _f = e.substring(this.lpos, this.col);\n            if (this.functions.getFunctionDescriptor(_f)) {\n              //there's no need to go up in scope if the next character is an operator\n              has_space = true; //mark that a space was found\n              this.add_function(_f);\n              this.addScope();\n            } else if (this.operators.isOperator(_f)) {\n              this.target.push(new Token_1.Token(_f, Token_1.Token.OPERATOR, this.col, this.operators.getOperator(_f)));\n            } else {\n              this.add_token(undefined, _f);\n              //peek ahead to the next character\n              var _nxt = e.charAt(this.col + 1);\n              //If it's a number then add the multiplication operator to the stack but make sure that the next character\n              //is not an operator\n              if (prev !== EMPTY_STRING && _nxt !== EMPTY_STRING && !this.operators.isOperator(prev) && !this.operators.isOperator(_nxt)) this.target.push(new Token_1.Token(MULT, Token_1.Token.OPERATOR, this.col, this.operators.getOperator(MULT)));\n            }\n            //Possible source of bug. Review\n            /*\n             //space can mean multiplication so add the symbol if the is encountered\n             if (/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\n             var next = e.charAt(col+1);\n             var next_is_operator = next in operators;\n             var ns = next_space(col+1);\n             var next_word = e.substring(col+1, ns);\n             //the next can either be a prefix operator or no operator\n             if ((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\n             this.target.push(new Token('*', Token.OPERATOR, col));\n             }\n             */\n          }\n\n          this.set_last_position(this.col); //mark this location\n        }\n      }\n      //check that all brackets were closed\n      if (open_brackets.length) {\n        var b = open_brackets.pop();\n        throw new ParityError('Missing closed bracket for bracket at ' + (b ? b[1] + 1 : 'undefined'));\n      }\n      //add the last token\n      this.add_token(this.col);\n      return this.tokens;\n    }\n  }]);\n  return InnerTokenizer;\n}();","map":{"version":3,"mappings":"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","names":["ParityError","Error","Tokenizer","functionsProvider","operators","units","names","actions","functions","brackets","getBrackets","e","shouldPrepare","prepareExpression","t","InnerTokenizer","tokenize","name","action","order","shift_cells","preprocessors","Errors_1","push","splice","length","i","l","indexOf","undefined","String","call","replace","test","Math2_1","scientificToDecimal","x","Settings_1","IMPLIED_MULTIPLICATION_REGEX","match","group1","group2","start","str","first","charAt","before","d","a","USE_MULTICHARACTER_VARS","getFunctionDescriptor","isNaN","split","join","e_org","b","c","g1","g2","tokens","Q","Array","isArray","tree","type","Token_1","OPERATOR","is_prefix","postfix","location","last","pop","Node_1","right","left","FUNCTION","args","value","exports","expression","col","lpos","scopes","target","depth","trim","regex","RegExp","is_close","scope_type","column","new_scope","start_at","end","isOperator","substring","operator_str","_operators","operator","index","operatorLength","ch","o","getOperator","at","token","UNIT","VARIABLE_OR_LITERAL","f","position","L","open_brackets","has_space","SPACE","EMPTY_STRING","COMMA","MINUS","MULT","add_token","last_token_is_numeric","is_multiplication","goUp","set_last_position","get_operator_str","adjust_column_position","apply","chunkify","bracket","is_open","add_function","addScope","maps_to","pair","id","prev","nxt","is_operator"],"sourceRoot":"","sources":["../../src/Parser/Tokenizer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
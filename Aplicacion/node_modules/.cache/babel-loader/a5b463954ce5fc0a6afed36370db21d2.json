{"ast":null,"code":"/**\n * @license Polynomial.js v1.4.5 13/12/2017\n *\n * Copyright (c) 2017, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n(function (root) {\n  \"use strict\";\n  /**\n   * The actual field selected\n   * \n   * @type Object\n   */\n\n  var FIELD = {\n    // Run in R\n    \"add\": function add(a, b) {\n      return a + b;\n    },\n    \"sub\": function sub(a, b) {\n      return a - b;\n    },\n    \"mul\": function mul(a, b) {\n      return a * b;\n    },\n    \"div\": function div(a, b) {\n      if (b === 0) {\n        throw \"DIV/0\";\n      }\n\n      return a / b;\n    },\n    \"parse\": function parse(x) {\n      return parseFloat(x);\n    },\n    \"empty\": function empty(x) {\n      return !x; //undefined === x || 0 === x;\n    },\n    \"pow\": function pow(a, b) {\n      return Math.pow(a, b);\n    },\n    \"equals\": function equals(a, b) {\n      return a === b;\n    }\n  };\n  /**\n   * Save the original field for changes\n   * \n   * @type Object\n   */\n\n  var ORIG_FIELD = FIELD;\n  /**\n   * The Fraction callback\n   * \n   * @type Function\n   */\n\n  var Fraction;\n  /**\n   * The Complex callback\n   * \n   * @type Function\n   */\n\n  var Complex;\n  /**\n   * The Quaternion callback\n   * \n   * @type Function\n   */\n\n  var Quaternion;\n  var STR_REGEXP = /([+-]?)(?:([^+x-]+)?(?:x(?:\\^([\\d\\/]+))?)|([^+x-]+))/g;\n  /**\n   * The constructor function\n   * \n   * @constructor\n   * @param {String|Object|number} x The init polynomial\n   */\n\n  function Polynomial(x) {\n    if (!(this instanceof Polynomial)) {\n      return new Polynomial(x);\n    }\n\n    this['coeff'] = parse(x);\n  } // Trace poly div steps\n\n\n  Polynomial['trace'] = null;\n  /**\n   * Calculates the modular inverse\n   * \n   * @param {number} z\n   * @param {number} n\n   * @returns {number}\n   */\n\n  var modinv = function modinv(z, n) {\n    /**\n     *    z * s + n * t = 1 \n     * => z * s mod n = 1\n     * => z^-1 = s mod n\n     */\n    var tmp = egcd(z, n);\n\n    if (tmp[0] !== 1) {\n      throw \"DIV/-\";\n    }\n\n    return tmp[1];\n  };\n  /**\n   * Calculates the gcd\n   * \n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n\n\n  function gcd(a, b) {\n    var t;\n\n    while (b) {\n      t = a;\n      a = b;\n      b = t % b;\n    }\n\n    return Math.abs(a);\n  }\n\n  function clone(x) {\n    var res = {};\n\n    for (var i in x) {\n      res[i] = x[i];\n    }\n\n    return res;\n  }\n  /**\n   * Calculates the extended gcd\n   * \n   * @param {number} a\n   * @param {number} b\n   * @returns {Array}\n   */\n\n\n  var egcd = function egcd(a, b) {\n    // gcd = a * s  +  b * t\n    var s = 0,\n        t = 1,\n        u = 1,\n        v = 0;\n\n    while (a !== 0) {\n      var q = b / a | 0,\n          r = b % a;\n      var m = s - u * q,\n          n = t - v * q;\n      b = a;\n      a = r;\n      s = u;\n      t = v;\n      u = m;\n      v = n;\n    }\n\n    return [b\n    /* gcd*/\n    , s, t];\n  };\n  /**\n   * Calculates the mathematical modulo\n   * \n   * @param {number} n\n   * @param {number} m \n   * @returns {number}\n   */\n\n\n  var mod = function mod(n, m) {\n    return (n % m + m) % m;\n  };\n  /**\n   * Calculates the factorial n! / (n - k)!\n   * \n   * @param {number} n\n   * @param {number} k\n   * @returns {number}\n   */\n\n\n  var factorial = function factorial(n, k) {\n    var p = 1;\n\n    for (k = n - k; k < n; n--) {\n      p *= n;\n    }\n\n    return p;\n  };\n  /**\n   * The public coefficient object\n   * \n   * @type {Object}\n   */\n\n\n  Polynomial.prototype['coeff'] = {};\n  /**\n   * Combines the keys of two objects\n   * \n   * @param {Object} a\n   * @param {Object} b\n   * @returns {Object}\n   */\n\n  function keyUnion(a, b) {\n    var k = {};\n\n    for (var i in a) {\n      k[i] = 1;\n    }\n\n    for (var i in b) {\n      k[i] = 1;\n    }\n\n    return k;\n  }\n  /**\n   * Gets the degree of the actual polynomial\n   * \n   * @param {Object} x\n   * @returns {number}\n   */\n\n\n  function degree(x) {\n    var i = -Infinity;\n\n    for (var k in x) {\n      if (!FIELD['empty'](x[k])) i = Math.max(k, i);\n    }\n\n    return i;\n  }\n  /**\n   * Helper function for division\n   * \n   * @param {Object} x The numerator coefficients\n   * @param {Object} y The denominator coefficients\n   * @returns {Object}\n   */\n\n\n  var div = function div(x, y) {\n    var r = {};\n    var i = degree(x);\n    var j = degree(y);\n    var trace = [];\n\n    while (i >= j) {\n      var tmp = r[i - j] = FIELD['div'](x[i] || 0, y[j] || 0);\n\n      for (var k in y) {\n        x[+k + i - j] = FIELD['sub'](x[+k + i - j] || 0, FIELD['mul'](y[k] || 0, tmp));\n      }\n\n      if (Polynomial['trace'] !== null) {\n        var tr = {};\n\n        for (var k in y) {\n          tr[+k + i - j] = FIELD['mul'](y[k] || 0, tmp);\n        }\n\n        trace.push(new Polynomial(tr));\n      }\n\n      i = degree(x);\n    } // Add rest\n\n\n    if (Polynomial['trace'] !== null) {\n      trace.push(new Polynomial(x));\n      Polynomial['trace'] = trace;\n    }\n\n    return r;\n  };\n\n  function parseExp(sgn, exp) {\n    exp = String(exp).match(/[^*/]+|[*/]/g);\n    var num = FIELD['parse'](sgn + exp[0]);\n\n    for (var i = 1; i < exp.length; i += 2) {\n      if (exp[i] === '*') {\n        num = FIELD['mul'](num, FIELD['parse'](exp[i + 1] || 1));\n      } else if (exp[i] === '/') {\n        num = FIELD['div'](num, FIELD['parse'](exp[i + 1] || 1));\n      }\n    }\n\n    return num;\n  }\n  /**\n   * Parses the actual number\n   * \n   * @param {String|Object|null|number} x The polynomial to be parsed\n   * @returns {Object}\n   */\n\n\n  var parse = function parse(x) {\n    var ret = {};\n\n    if (x === null || x === undefined) {\n      x = 0;\n    }\n\n    switch (typeof x) {\n      case \"object\":\n        if (x['coeff']) {\n          x = x['coeff'];\n        }\n\n        if (Fraction && x instanceof Fraction || Complex && x instanceof Complex || Quaternion && x instanceof Quaternion) {\n          ret[0] = x;\n        } else // Handles Arrays the same way\n          for (var i in x) {\n            if (!FIELD['empty'](x[i])) {\n              ret[i] = FIELD['parse'](x[i]);\n            }\n          }\n\n        return ret;\n\n      case \"number\":\n        return {\n          '0': FIELD['parse'](x)\n        };\n\n      case \"string\":\n        var tmp;\n\n        while (null !== (tmp = STR_REGEXP['exec'](x))) {\n          var num = 1;\n          var exp = 1;\n\n          if (tmp[4] !== undefined) {\n            num = tmp[4];\n            exp = 0;\n          } else if (tmp[2] !== undefined) {\n            num = tmp[2];\n          }\n\n          num = parseExp(tmp[1], num); // Parse exponent\n\n          if (tmp[3] !== undefined) {\n            exp = parseInt(tmp[3], 10);\n          }\n\n          if (ret[exp] === undefined) {\n            ret[exp] = num;\n          } else {\n            ret[exp] = FIELD['add'](ret[exp], num);\n          }\n        }\n\n        return ret;\n    }\n\n    throw \"Invalid Param\";\n  };\n  /**\n   * Calculates the gcd of two polynomials\n   * \n   * @param {String|Object} x The denominator polynomial\n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['gcd'] = function (x) {\n    var a = clone(this['coeff']);\n    var b = parse(x);\n    var max;\n\n    while (!isNull(b)) {\n      var r = clone(a);\n      div(r, b);\n      a = b;\n      b = r;\n    }\n\n    max = lc(a);\n    return new Polynomial(monic(a, max));\n  };\n  /**\n   * Negate all coefficients of the polynomial\n   * \n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['neg'] = function () {\n    var ret = {};\n    var poly = this['coeff'];\n\n    for (var i in poly) {\n      ret[i] = FIELD['mul'](poly[i], -1);\n    }\n\n    return new Polynomial(ret);\n  };\n  /**\n   * Return the 'reciprocal polynomial', where the coefficients\n   * appear in opposite order; i.e. a[i] -> a[n-i].\n   * See e.g. https://en.wikipedia.org/wiki/Reciprocal_polynomial\n   *\n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['reciprocal'] = function () {\n    var ret = {};\n    var poly = this['coeff'];\n    var n = degree(poly);\n\n    for (var i in poly) {\n      ret[n - i] = poly[i];\n    }\n\n    return new Polynomial(ret);\n  };\n  /**\n   * Numerically evaluate the polynomial at a specific point x by\n   * using Horner's method.\n   * See e.g. https://en.wikipedia.org/wiki/Horner%27s_method\n   *\n   * @param {number} x The point where to evaluate this polynomial\n   * @returns {number} The value P(x)\n   */\n\n\n  Polynomial.prototype['eval'] = function (x) {\n    var poly = this['coeff'];\n    var n = degree(poly);\n\n    if (n < 0) {\n      return 0;\n    }\n\n    var ret = poly[n];\n\n    for (var i = n - 1; i >= 0; i--) {\n      ret = FIELD['mul'](ret, x);\n\n      if (!FIELD['empty'](poly[i])) {\n        ret = FIELD['add'](ret, poly[i]);\n      }\n    }\n\n    return ret;\n  };\n\n  function lc(poly) {\n    var max = null;\n\n    for (var i in poly) {\n      if (!FIELD['empty'](poly[i])) {\n        if (max === null || +max < +i) {\n          max = i;\n        }\n      }\n    }\n\n    return max;\n  }\n\n  function monic(a, max) {\n    if (max !== null) {\n      for (var i in a) {\n        a[i] = FIELD['div'](a[i], a[max]);\n      }\n    }\n\n    return a;\n  }\n  /**\n   * Gets the leading coefficient\n   * \n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['lc'] = function () {\n    var max = lc(this['coeff']);\n    return this['coeff'][max];\n  };\n  /**\n   * Gets the leading monomial\n   * \n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['lm'] = function () {\n    var max = lc(this['coeff']);\n    var res = {};\n    res[max] = this['coeff'][max];\n    return new Polynomial(res);\n  };\n  /**\n   * Divide all coefficients of f by lc(f)\n   * \n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['monic'] = function () {\n    return new Polynomial(monic(clone(this['coeff']), lc(this['coeff'])));\n  };\n  /**\n   * Calculates the sum of two polynomials\n   * \n   * @param {String|Object} x The summand polynomial\n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['add'] = function (x) {\n    var para = parse(x);\n    var ret = {};\n    var poly = this['coeff'];\n    var keys = keyUnion(para, poly);\n\n    for (var i in keys) {\n      ret[i] = FIELD['add'](poly[i] || 0, para[i] || 0);\n    }\n\n    return new Polynomial(ret);\n  };\n  /**\n   * Calculates the difference of two polynomials\n   * \n   * @param {String|Object} x The subtrahend polynomial\n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['sub'] = function (x) {\n    var para = parse(x);\n    var ret = {};\n    var poly = this['coeff'];\n    var keys = keyUnion(para, poly);\n\n    for (var i in keys) {\n      ret[i] = FIELD['sub'](poly[i] || 0, para[i] || 0);\n    }\n\n    return new Polynomial(ret);\n  };\n  /**\n   * Calculates the product of two polynomials\n   * \n   * @param {String|Object} x The minuend polynomial\n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['mul'] = function (x) {\n    var para = parse(x);\n    var ret = {};\n    var poly = this['coeff'];\n\n    for (var i in para) {\n      i = +i;\n\n      for (var j in poly) {\n        j = +j;\n        ret[i + j] = FIELD['add'](ret[i + j] || 0, FIELD['mul'](para[i] || 0, poly[j] || 0));\n      }\n    }\n\n    return new Polynomial(ret);\n  };\n  /**\n   * Calculates the product of the two parameters and adds it to the current number (linear combination)\n   * \n   * @param {String|Object} x The first factor polynomial\n   * @param {String|Object} y The second factor polynomial\n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['addmul'] = function (x, y) {\n    var _x = parse(x);\n\n    var _y = parse(y);\n\n    var res = {};\n\n    for (var i in _x) {\n      i = +i;\n\n      for (var j in _y) {\n        j = +j;\n        res[i + j] = FIELD['add'](res[i + j] || 0, FIELD['mul'](_x[i] || 0, _y[j] || 0));\n      }\n    }\n\n    return this['add'](res);\n  };\n  /**\n   * Calculates the quotient of two polynomials\n   * \n   * @param {String|Object} x The denominator polynomial\n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['div'] = function (x) {\n    return new Polynomial(div(clone(this['coeff']), parse(x)));\n  };\n  /**\n   * Calculates the pow of a polynomial to the exponent e\n   * \n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['pow'] = function (e) {\n    if (isNaN(e) || e < 0 || e % 1) {\n      // Only integer exponents\n      throw \"Invalid\";\n    }\n\n    var res = new Polynomial(1);\n    var tmp = this;\n\n    while (e > 0) {\n      if (e & 1) {\n        res = res['mul'](tmp);\n      }\n\n      tmp = tmp['mul'](tmp);\n      e >>= 1;\n    }\n\n    return res;\n  };\n  /**\n   * Calculates the modulo of a polynomial to another\n   * \n   * @param {String|Object} x The second poly\n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['mod'] = function (x) {\n    var mod = clone(this['coeff']);\n    div(mod, parse(x));\n    return new Polynomial(mod);\n  };\n  /**\n   * Calculates the nth derivative of the polynomial\n   * \n   * @param {number} n The nth derivative\n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['derive'] = function (n) {\n    if (n === undefined) {\n      n = 1;\n    } else if (n < 0) {\n      return null;\n    }\n\n    var poly = this['coeff'];\n    var ret = {};\n\n    for (var i in poly) {\n      if (+i >= n) ret[i - n] = FIELD['mul'](poly[i] || 0, factorial(+i, n));\n    }\n\n    return new Polynomial(ret);\n  };\n  /**\n   * Calculates the nth integral of the polynomial\n   * \n   * @param {number} n The nth integral\n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['integrate'] = function (n) {\n    if (n === undefined) {\n      n = 1;\n    } else if (n < 0) {\n      return null;\n    }\n\n    var poly = this['coeff'];\n    var ret = {};\n\n    for (var i in poly) {\n      ret[+i + n] = FIELD['div'](poly[i] || 0, factorial(+i + n, n));\n    }\n\n    return new Polynomial(ret);\n  };\n  /**\n   * (Deprecated) alias for 'eval'\n   */\n\n\n  Polynomial.prototype['result'] = Polynomial.prototype['eval'];\n  /**\n   * Form a (monic) polynomial out of an array of roots\n   *\n   * @param {Array<number>} roots - Array of roots\n   * @returns {Polynomial} The monic polynomial with those roots\n   */\n\n  Polynomial['fromRoots'] = function (roots) {\n    var n = roots.length;\n    var zero = FIELD['parse'](0);\n    var nonZeroRoots = roots.filter(function (root) {\n      return !FIELD['equals'](root, zero);\n    });\n    var numZeros = n - nonZeroRoots.length; // First we construct the depressed polynomial with a recursive\n    // strategy (this minimizes the number of multiplications)\n\n    var pOne = new Polynomial(FIELD['parse'](1));\n\n    function productHelper(r) {\n      switch (r.length) {\n        case 0:\n          return pOne;\n\n        case 1:\n          return new Polynomial([FIELD['mul'](r[0], -1), 1]);\n\n        default:\n          // recurse\n          var nLeft = Math.floor(r.length / 2);\n          var left = r.slice(0, nLeft);\n          var right = r.slice(nLeft, r.length);\n          return productHelper(left).mul(productHelper(right));\n      }\n    }\n\n    var dep = productHelper(nonZeroRoots); // Now raise the order by including numZeros zeros\n\n    var dcoeff = dep['coeff'];\n    var coeff = {};\n\n    for (var i in dcoeff) {\n      coeff[numZeros + parseInt(i, 10)] = dcoeff[i];\n    }\n\n    return new Polynomial(coeff);\n  };\n\n  function isNull(r) {\n    return degree(r) < 0;\n  }\n  /**\n   * Helper method to stringify\n   * \n   * @param {string} fn the callback name\n   * @returns {Function}\n   */\n\n\n  var toString = function toString(fn) {\n    /**\n     * The actual to string function \n     * \n     * @returns {string|null}\n     */\n    var Str = function Str() {\n      var poly = this['coeff'];\n      var keys = [];\n\n      for (var i in poly) {\n        keys.push(+i);\n      }\n\n      if (keys.length === 0) return \"0\";\n      keys.sort(function (a, b) {\n        return a - b;\n      });\n      var str = \"\";\n\n      for (var k = keys.length; k--;) {\n        var i = keys[k];\n        var cur = poly[i];\n        var val = cur;\n        if (val === null || val === undefined) continue;\n\n        if (Complex && val instanceof Complex) {\n          // Add real part\n          if (val['re'] !== 0) {\n            if (str !== \"\" && val['re'] > 0) {\n              str += \"+\";\n            }\n\n            if (val['re'] === -1 && i !== 0) {\n              str += \"-\";\n            } else if (val['re'] !== 1 || i === 0) {\n              str += val['re'];\n            } // Add exponent if necessary, no DRY, let's feed gzip\n\n\n            if (i === 1) str += \"x\";else if (i !== 0) str += \"x^\" + i;\n          } // Add imaginary part\n\n\n          if (val['im'] !== 0) {\n            if (str !== \"\" && val['im'] > 0) {\n              str += \"+\";\n            }\n\n            if (val['im'] === -1) {\n              str += \"-\";\n            } else if (val['im'] !== 1) {\n              str += val['im'];\n            }\n\n            str += \"i\"; // Add exponent if necessary, no DRY, let's feed gzip\n\n            if (i === 1) str += \"x\";else if (i !== 0) str += \"x^\" + i;\n          }\n        } else {\n          val = val.valueOf(); // Skip if it's zero\n\n          if (val === 0) continue; // Separate by +\n\n          if (str !== \"\" && val > 0) {\n            str += \"+\";\n          }\n\n          if (val === -1 && i !== 0) str += \"-\";else // Add number if it's not a \"1\" or the first position\n            if (val !== 1 || i === 0) str += cur[fn] ? cur[fn]() : cur['toString'](); // Add exponent if necessary, no DRY, let's feed gzip\n\n          if (i === 1) str += \"x\";else if (i !== 0) str += \"x^\" + i;\n        }\n      }\n\n      if (str === \"\") return cur[fn] ? cur[fn]() : cur['toString']();\n      return str;\n    };\n\n    return Str;\n  };\n  /**\n   * Formats the polynomial as a string\n   * \n   * @returns {string} The polynomial string\n   */\n\n\n  Polynomial.prototype['toString'] = toString(\"toString\");\n  /**\n   * Formats the polynomial as a latex representation\n   * \n   * @returns {string} The polynomial latex string\n   */\n\n  Polynomial.prototype['toLatex'] = toString(\"toLatex\");\n  /**\n   * Returns the actual polynomial in horner scheme\n   * \n   * @returns {string}\n   */\n\n  Polynomial.prototype['toHorner'] = function () {\n    var poly = this['coeff'];\n    var keys = [];\n\n    for (var i in poly) {\n      if (!FIELD.empty(poly[i])) keys.push(+i);\n    }\n\n    if (keys.length === 0) return \"0\";\n    keys.sort(function (a, b) {\n      return a - b;\n    }); // TODO: DRY, Combine with toString function\n\n    function valToString(val, hasSign) {\n      var str = \"\";\n\n      if (Complex && val instanceof Complex) {\n        if (val['im'] === 0) {\n          if (val['re'] > 0 && hasSign) {\n            str += \"+\";\n          }\n\n          str += val['re'];\n        } else if (val['re'] === 0) {\n          if (val['im'] === -1) {\n            str += \"-\";\n          } else if (val['im'] !== 1) {\n            if (val['im'] > 0 && hasSign) {\n              str += \"+\";\n            }\n\n            str += val['im'];\n          } else {\n            if (val['im'] > 0 && hasSign) {\n              str += \"+\";\n            }\n          }\n\n          str += \"i\";\n        } else {\n          if (hasSign) {\n            str += \"+\";\n          }\n\n          str += \"(\";\n          str += val.toString();\n          str += \")\";\n        }\n\n        return str;\n      } else {\n        if (val > 0 && hasSign) {\n          str += \"+\";\n        }\n\n        str += val.toString();\n      }\n\n      return str;\n    }\n\n    function rec(keys, pos) {\n      var ndx = keys.length - pos - 1;\n      var exp = keys[ndx] - (keys[ndx - 1] || 0);\n      var str1 = \"\";\n      var str2 = \"\";\n\n      if (exp > 0) {\n        str1 = \"x\";\n\n        if (exp > 1) {\n          str1 += \"^\" + exp;\n        }\n      }\n\n      if (ndx > 0) str1 += valToString(poly[keys[ndx - 1]], true);\n\n      if (pos === 0) {\n        return valToString(poly[keys[ndx]], false) + str1;\n      }\n\n      if (ndx >= 0 && keys[ndx]) str2 += \"(\";\n      str2 += rec(keys, pos - 1);\n      if (ndx >= 0 && keys[ndx]) str2 += \")\";\n      str2 += str1;\n      return str2;\n    }\n\n    return rec(keys, keys.length - 1);\n  };\n  /**\n   * Clones the actual object\n   * \n   * @returns {Polynomial}\n   */\n\n\n  Polynomial.prototype['clone'] = function () {\n    return new Polynomial(this);\n  };\n  /**\n   * Returns the degree of the polynomial\n   * \n   * @returns {number}\n   */\n\n\n  Polynomial.prototype['degree'] = function () {\n    return degree(this['coeff']);\n  };\n  /**\n   * Set the field globally\n   * \n   * @param {string|Object} field One of: C (complex), H (quaternion), Q (rational), R (real) or an object with methods for field\n   */\n\n\n  Polynomial['setField'] = function (field) {\n    // Fields with the same common API\n    var F = {\n      \"Q\": Fraction,\n      \"C\": Complex,\n      \"H\": Quaternion\n    }[field];\n\n    if (F !== undefined) {\n      FIELD = {\n        \"add\": function add(a, b) {\n          return new F(a)['add'](b);\n        },\n        \"sub\": function sub(a, b) {\n          return new F(a)['sub'](b);\n        },\n        \"mul\": function mul(a, b) {\n          return new F(a)['mul'](b);\n        },\n        \"div\": function div(a, b) {\n          return new F(a)['div'](b);\n        },\n        \"parse\": function parse(x) {\n          return new F(x);\n        },\n        \"empty\": function empty(x) {\n          return new F(x)['equals'](0);\n        },\n        \"pow\": function pow(a, b) {\n          return new F(a)['pow'](b);\n        },\n        \"equals\": function equals(a, b) {\n          return new F(a)['equals'](b);\n        }\n      };\n    } else if (!field || field === 'R') {\n      FIELD = ORIG_FIELD;\n    } else if (typeof field === 'object') {\n      FIELD = field;\n    } else if (field.charAt(0) === 'Z') {\n      var N = +field.slice(1);\n      FIELD = {\n        // Test in Z_n\n        \"add\": function add(a, b) {\n          return mod(a + b, N);\n        },\n        \"sub\": function sub(a, b) {\n          return mod(a - b, N);\n        },\n        \"mul\": function mul(a, b) {\n          return mod(a * b, N);\n        },\n        \"div\": function div(a, b) {\n          return mod(a * modinv(b, N), N);\n        },\n        \"parse\": function parse(x) {\n          return parseInt(x, 10);\n        },\n        \"empty\": function empty(x) {\n          return undefined === x || 0 === x;\n        },\n        \"pow\": function pow(a, b) {\n          for (var r = 1; b > 0; a = mod(a * a, N), b >>= 1) {\n            if (b & 1) {\n              r = mod(r * a, N);\n            }\n          }\n\n          return r;\n        },\n        \"equals\": function equals(a, b) {\n          return a == b;\n        }\n      };\n    }\n  };\n\n  if (typeof define === 'function' && define['amd']) {\n    define([\"fraction.js\", \"complex.js\", \"quaternion\"], function (frac, comp, quat) {\n      Fraction = frac;\n      Complex = comp;\n      Quaternion = quat;\n      return Polynomial;\n    });\n  } else if (typeof exports === 'object') {\n    Fraction = require(\"fraction.js\");\n    Complex = require(\"complex.js\");\n    Quaternion = require(\"quaternion\");\n    Object.defineProperty(exports, \"__esModule\", {\n      'value': true\n    });\n    Polynomial['default'] = Polynomial;\n    Polynomial['Polynomial'] = Polynomial;\n    module['exports'] = Polynomial;\n  } else {\n    Fraction = root['Fraction'];\n    Complex = root['Complex'];\n    Quaternion = root['Quaternion'];\n    root['Polynomial'] = Polynomial;\n  }\n})(this);","map":{"version":3,"names":["root","FIELD","a","b","x","parseFloat","Math","pow","ORIG_FIELD","Fraction","Complex","Quaternion","STR_REGEXP","Polynomial","parse","modinv","z","n","tmp","egcd","gcd","t","abs","clone","res","i","s","u","v","q","r","m","mod","factorial","k","p","prototype","keyUnion","degree","Infinity","max","div","y","j","trace","tr","push","parseExp","sgn","exp","String","match","num","length","ret","undefined","parseInt","isNull","lc","monic","poly","para","keys","_x","_y","e","isNaN","roots","zero","nonZeroRoots","filter","numZeros","pOne","productHelper","nLeft","floor","left","slice","right","mul","dep","dcoeff","coeff","toString","fn","Str","sort","str","cur","val","valueOf","empty","valToString","hasSign","rec","pos","ndx","str1","str2","field","F","charAt","N","define","frac","comp","quat","exports","require","Object","defineProperty","module"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/polynomial/polynomial.js"],"sourcesContent":["/**\n * @license Polynomial.js v1.4.5 13/12/2017\n *\n * Copyright (c) 2017, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n(function(root) {\n\n  \"use strict\";\n\n  /**\n   * The actual field selected\n   * \n   * @type Object\n   */\n  var FIELD = {// Run in R\n    \"add\": function(a, b) {\n      return a + b;\n    },\n    \"sub\": function(a, b) {\n      return a - b;\n    },\n    \"mul\": function(a, b) {\n      return a * b;\n    },\n    \"div\": function(a, b) {\n      if (b === 0) {\n        throw \"DIV/0\";\n      }\n      return a / b;\n    },\n    \"parse\": function(x) {\n      return parseFloat(x);\n    },\n    \"empty\": function(x) {\n      return !x; //undefined === x || 0 === x;\n    },\n    \"pow\": function(a, b) {\n      return Math.pow(a, b);\n    },\n    \"equals\": function(a, b) {\n      return a === b;\n    }\n  };\n\n  /**\n   * Save the original field for changes\n   * \n   * @type Object\n   */\n  var ORIG_FIELD = FIELD;\n\n  /**\n   * The Fraction callback\n   * \n   * @type Function\n   */\n  var Fraction;\n\n  /**\n   * The Complex callback\n   * \n   * @type Function\n   */\n  var Complex;\n\n  /**\n   * The Quaternion callback\n   * \n   * @type Function\n   */\n  var Quaternion;\n\n  var STR_REGEXP = /([+-]?)(?:([^+x-]+)?(?:x(?:\\^([\\d\\/]+))?)|([^+x-]+))/g;\n\n  /**\n   * The constructor function\n   * \n   * @constructor\n   * @param {String|Object|number} x The init polynomial\n   */\n  function Polynomial(x) {\n\n    if (!(this instanceof Polynomial)) {\n      return new Polynomial(x);\n    }\n    this['coeff'] = parse(x);\n  }\n\n  // Trace poly div steps\n  Polynomial['trace'] = null;\n\n  /**\n   * Calculates the modular inverse\n   * \n   * @param {number} z\n   * @param {number} n\n   * @returns {number}\n   */\n  var modinv = function(z, n) {\n\n    /**\n     *    z * s + n * t = 1 \n     * => z * s mod n = 1\n     * => z^-1 = s mod n\n     */\n    var tmp = egcd(z, n);\n    if (tmp[0] !== 1) {\n      throw \"DIV/-\";\n    }\n    return tmp[1];\n  };\n\n  /**\n   * Calculates the gcd\n   * \n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n  function gcd(a, b) {\n    var t;\n    while (b) {\n      t = a;\n      a = b;\n      b = t % b;\n    }\n    return Math.abs(a);\n  }\n\n  function clone(x) {\n\n    var res = {};\n    for (var i in x) {\n      res[i] = x[i];\n    }\n    return res;\n  }\n\n  /**\n   * Calculates the extended gcd\n   * \n   * @param {number} a\n   * @param {number} b\n   * @returns {Array}\n   */\n  var egcd = function(a, b) {\n\n    // gcd = a * s  +  b * t\n\n    var s = 0, t = 1, u = 1, v = 0;\n    while (a !== 0) {\n\n      var q = b / a | 0, r = b % a;\n      var m = s - u * q, n = t - v * q;\n\n      b = a;\n      a = r;\n      s = u;\n      t = v;\n      u = m;\n      v = n;\n    }\n    return [b /* gcd*/, s, t];\n  };\n\n  /**\n   * Calculates the mathematical modulo\n   * \n   * @param {number} n\n   * @param {number} m \n   * @returns {number}\n   */\n  var mod = function(n, m) {\n\n    return (n % m + m) % m;\n  };\n\n  /**\n   * Calculates the factorial n! / (n - k)!\n   * \n   * @param {number} n\n   * @param {number} k\n   * @returns {number}\n   */\n  var factorial = function(n, k) {\n\n    var p = 1;\n    for (k = n - k; k < n; n--) {\n      p *= n;\n    }\n    return p;\n  };\n\n  /**\n   * The public coefficient object\n   * \n   * @type {Object}\n   */\n  Polynomial.prototype['coeff'] = {};\n\n  /**\n   * Combines the keys of two objects\n   * \n   * @param {Object} a\n   * @param {Object} b\n   * @returns {Object}\n   */\n  function keyUnion(a, b) {\n\n    var k = {};\n    for (var i in a) {\n      k[i] = 1;\n    }\n    for (var i in b) {\n      k[i] = 1;\n    }\n    return k;\n  }\n\n  /**\n   * Gets the degree of the actual polynomial\n   * \n   * @param {Object} x\n   * @returns {number}\n   */\n  function degree(x) {\n\n    var i = -Infinity;\n\n    for (var k in x) {\n      if (!FIELD['empty'](x[k]))\n        i = Math.max(k, i);\n    }\n    return i;\n  }\n\n  /**\n   * Helper function for division\n   * \n   * @param {Object} x The numerator coefficients\n   * @param {Object} y The denominator coefficients\n   * @returns {Object}\n   */\n  var div = function(x, y) {\n\n    var r = {};\n\n    var i = degree(x);\n    var j = degree(y);\n    var trace = [];\n\n    while (i >= j) {\n\n      var tmp = r[i - j] = FIELD['div'](x[i] || 0, y[j] || 0);\n\n      for (var k in y) {\n        x[+k + i - j] = FIELD['sub'](x[+k + i - j] || 0, FIELD['mul'](y[k] || 0, tmp));\n      }\n\n      if (Polynomial['trace'] !== null) {\n\n        var tr = {};\n        for (var k in y) {\n          tr[+k + i - j] = FIELD['mul'](y[k] || 0, tmp);\n        }\n        trace.push(new Polynomial(tr));\n      }\n\n      i = degree(x);\n    }\n\n    // Add rest\n    if (Polynomial['trace'] !== null) {\n      trace.push(new Polynomial(x));\n      Polynomial['trace'] = trace;\n    }\n    return r;\n  };\n\n  function parseExp(sgn, exp) {\n\n    exp = String(exp).match(/[^*/]+|[*/]/g);\n\n    var num = FIELD['parse'](sgn + exp[0]);\n\n    for (var i = 1; i < exp.length; i += 2) {\n\n      if (exp[i] === '*') {\n        num = FIELD['mul'](num, FIELD['parse'](exp[i + 1] || 1));\n      } else if (exp[i] === '/') {\n        num = FIELD['div'](num, FIELD['parse'](exp[i + 1] || 1));\n      }\n    }\n    return num;\n  }\n\n  /**\n   * Parses the actual number\n   * \n   * @param {String|Object|null|number} x The polynomial to be parsed\n   * @returns {Object}\n   */\n  var parse = function(x) {\n\n    var ret = {};\n\n    if (x === null || x === undefined) {\n      x = 0;\n    }\n\n    switch (typeof x) {\n\n      case \"object\":\n\n        if (x['coeff']) {\n          x = x['coeff'];\n        }\n\n        if (Fraction && x instanceof Fraction || Complex && x instanceof Complex || Quaternion && x instanceof Quaternion) {\n          ret[0] = x;\n        } else\n          // Handles Arrays the same way\n          for (var i in x) {\n\n            if (!FIELD['empty'](x[i])) {\n              ret[i] = FIELD['parse'](x[i]);\n            }\n          }\n        return ret;\n\n      case  \"number\":\n        return {'0': FIELD['parse'](x)};\n\n      case \"string\":\n\n        var tmp;\n\n        while (null !== (tmp = STR_REGEXP['exec'](x))) {\n\n          var num = 1;\n          var exp = 1;\n\n          if (tmp[4] !== undefined) {\n            num = tmp[4];\n            exp = 0;\n          } else if (tmp[2] !== undefined) {\n            num = tmp[2];\n          }\n\n          num = parseExp(tmp[1], num);\n\n          // Parse exponent\n          if (tmp[3] !== undefined) {\n            exp = parseInt(tmp[3], 10);\n          }\n\n          if (ret[exp] === undefined) {\n            ret[exp] = num;\n          } else {\n            ret[exp] = FIELD['add'](ret[exp], num);\n          }\n        }\n        return ret;\n    }\n    throw \"Invalid Param\";\n  };\n\n  /**\n   * Calculates the gcd of two polynomials\n   * \n   * @param {String|Object} x The denominator polynomial\n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['gcd'] = function(x) {\n\n    var a = clone(this['coeff']);\n    var b = parse(x);\n\n    var max;\n\n    while (!isNull(b)) {\n\n      var r = clone(a);\n\n      div(r, b);\n\n      a = b;\n      b = r;\n    }\n\n    max = lc(a);\n\n    return new Polynomial(monic(a, max));\n  };\n\n  /**\n   * Negate all coefficients of the polynomial\n   * \n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['neg'] = function() {\n\n    var ret = {};\n    var poly = this['coeff'];\n\n    for (var i in poly) {\n      ret[i] = FIELD['mul'](poly[i], -1);\n    }\n    return new Polynomial(ret);\n  };\n\n  /**\n   * Return the 'reciprocal polynomial', where the coefficients\n   * appear in opposite order; i.e. a[i] -> a[n-i].\n   * See e.g. https://en.wikipedia.org/wiki/Reciprocal_polynomial\n   *\n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['reciprocal'] = function() {\n\n    var ret = {};\n    var poly = this['coeff'];\n    var n = degree(poly);\n\n    for (var i in poly) {\n      ret[n - i] = poly[i];\n    }\n    return new Polynomial(ret);\n  };\n\n  /**\n   * Numerically evaluate the polynomial at a specific point x by\n   * using Horner's method.\n   * See e.g. https://en.wikipedia.org/wiki/Horner%27s_method\n   *\n   * @param {number} x The point where to evaluate this polynomial\n   * @returns {number} The value P(x)\n   */\n  Polynomial.prototype['eval'] = function(x) {\n\n    var poly = this['coeff'];\n    var n = degree(poly);\n\n    if (n < 0) {\n      return 0;\n    }\n\n    var ret = poly[n];\n\n    for (var i = n - 1; i >= 0; i--) {\n      ret = FIELD['mul'](ret, x);\n      if (!FIELD['empty'](poly[i])) {\n        ret = FIELD['add'](ret, poly[i]);\n      }\n    }\n    return ret;\n  };\n\n  function lc(poly) {\n\n    var max = null;\n\n    for (var i in poly) {\n\n      if (!FIELD['empty'](poly[i])) {\n\n        if (max === null || +max < +i) {\n          max = i;\n        }\n      }\n    }\n    return max;\n  }\n\n  function monic(a, max) {\n\n    if (max !== null) {\n\n      for (var i in a) {\n        a[i] = FIELD['div'](a[i], a[max]);\n      }\n    }\n    return a;\n  }\n\n  /**\n   * Gets the leading coefficient\n   * \n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['lc'] = function() {\n\n    var max = lc(this['coeff']);\n\n    return this['coeff'][max];\n  };\n\n  /**\n   * Gets the leading monomial\n   * \n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['lm'] = function() {\n\n    var max = lc(this['coeff']);\n\n    var res = {};\n\n    res[max] = this['coeff'][max];\n    return new Polynomial(res);\n  };\n\n  /**\n   * Divide all coefficients of f by lc(f)\n   * \n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['monic'] = function() {\n\n    return new Polynomial(monic(clone(this['coeff']), lc(this['coeff'])));\n  };\n\n  /**\n   * Calculates the sum of two polynomials\n   * \n   * @param {String|Object} x The summand polynomial\n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['add'] = function(x) {\n\n    var para = parse(x);\n\n    var ret = {};\n    var poly = this['coeff'];\n\n    var keys = keyUnion(para, poly);\n\n    for (var i in keys) {\n      ret[i] = FIELD['add'](poly[i] || 0, para[i] || 0);\n    }\n    return new Polynomial(ret);\n  };\n\n  /**\n   * Calculates the difference of two polynomials\n   * \n   * @param {String|Object} x The subtrahend polynomial\n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['sub'] = function(x) {\n\n    var para = parse(x);\n\n    var ret = {};\n    var poly = this['coeff'];\n\n    var keys = keyUnion(para, poly);\n\n    for (var i in keys) {\n      ret[i] = FIELD['sub'](poly[i] || 0, para[i] || 0);\n    }\n    return new Polynomial(ret);\n  };\n\n  /**\n   * Calculates the product of two polynomials\n   * \n   * @param {String|Object} x The minuend polynomial\n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['mul'] = function(x) {\n\n    var para = parse(x);\n\n    var ret = {};\n    var poly = this['coeff'];\n\n    for (var i in para) {\n\n      i = +i;\n\n      for (var j in poly) {\n\n        j = +j;\n\n        ret[i + j] = FIELD['add'](ret[i + j] || 0, FIELD['mul'](para[i] || 0, poly[j] || 0));\n      }\n    }\n    return new Polynomial(ret);\n  };\n\n  /**\n   * Calculates the product of the two parameters and adds it to the current number (linear combination)\n   * \n   * @param {String|Object} x The first factor polynomial\n   * @param {String|Object} y The second factor polynomial\n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['addmul'] = function(x, y) {\n\n    var _x = parse(x);\n    var _y = parse(y);\n\n    var res = {};\n    for (var i in _x) {\n\n      i = +i;\n\n      for (var j in _y) {\n        j = +j;\n\n        res[i + j] = FIELD['add'](res[i + j] || 0, FIELD['mul'](_x[i] || 0, _y[j] || 0));\n      }\n    }\n    return this['add'](res);\n  };\n\n  /**\n   * Calculates the quotient of two polynomials\n   * \n   * @param {String|Object} x The denominator polynomial\n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['div'] = function(x) {\n\n    return new Polynomial(div(clone(this['coeff']), parse(x)));\n  };\n\n  /**\n   * Calculates the pow of a polynomial to the exponent e\n   * \n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['pow'] = function(e) {\n\n    if (isNaN(e) || e < 0 || e % 1) { // Only integer exponents\n      throw \"Invalid\";\n    }\n\n    var res = new Polynomial(1);\n    var tmp = this;\n\n    while (e > 0) {\n\n      if (e & 1) {\n        res = res['mul'](tmp);\n      }\n      tmp = tmp['mul'](tmp);\n      e >>= 1;\n    }\n    return res;\n  };\n\n  /**\n   * Calculates the modulo of a polynomial to another\n   * \n   * @param {String|Object} x The second poly\n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['mod'] = function(x) {\n\n    var mod = clone(this['coeff']);\n\n    div(mod, parse(x));\n\n    return new Polynomial(mod);\n  };\n\n  /**\n   * Calculates the nth derivative of the polynomial\n   * \n   * @param {number} n The nth derivative\n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['derive'] = function(n) {\n\n    if (n === undefined) {\n      n = 1;\n    } else if (n < 0) {\n      return null;\n    }\n\n    var poly = this['coeff'];\n    var ret = {};\n\n    for (var i in poly) {\n\n      if (+i >= n)\n        ret[i - n] = FIELD['mul'](poly[i] || 0, factorial(+i, n));\n    }\n    return new Polynomial(ret);\n  };\n\n  /**\n   * Calculates the nth integral of the polynomial\n   * \n   * @param {number} n The nth integral\n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['integrate'] = function(n) {\n\n    if (n === undefined) {\n      n = 1;\n    } else if (n < 0) {\n      return null;\n    }\n\n    var poly = this['coeff'];\n    var ret = {};\n\n    for (var i in poly) {\n      ret[+i + n] = FIELD['div'](poly[i] || 0, factorial(+i + n, n));\n    }\n    return new Polynomial(ret);\n  };\n\n  /**\n   * (Deprecated) alias for 'eval'\n   */\n  Polynomial.prototype['result'] = Polynomial.prototype['eval'];\n\n  /**\n   * Form a (monic) polynomial out of an array of roots\n   *\n   * @param {Array<number>} roots - Array of roots\n   * @returns {Polynomial} The monic polynomial with those roots\n   */\n  Polynomial['fromRoots'] = function(roots) {\n\n    var n = roots.length;\n\n    var zero = FIELD['parse'](0);\n\n    var nonZeroRoots = roots.filter(root => (!(FIELD['equals'](root, zero))));\n    var numZeros = n - nonZeroRoots.length;\n\n    // First we construct the depressed polynomial with a recursive\n    // strategy (this minimizes the number of multiplications)\n    var pOne = new Polynomial(FIELD['parse'](1));\n\n    function productHelper(r) {\n      switch (r.length) {\n        case 0:\n          return pOne;\n        case 1:\n          return new Polynomial([FIELD['mul'](r[0], -1), 1]);\n        default: // recurse\n          var nLeft = Math.floor(r.length / 2);\n          var left = r.slice(0, nLeft);\n          var right = r.slice(nLeft, r.length);\n          return productHelper(left).mul(productHelper(right));\n      }\n    }\n\n    var dep = productHelper(nonZeroRoots);\n\n    // Now raise the order by including numZeros zeros\n    var dcoeff = dep['coeff'];\n    var coeff = {};\n\n    for (var i in dcoeff) {\n      coeff[numZeros + parseInt(i, 10)] = dcoeff[i];\n    }\n\n    return new Polynomial(coeff);\n  };\n\n  function isNull(r) {\n\n    return degree(r) < 0;\n  }\n\n  /**\n   * Helper method to stringify\n   * \n   * @param {string} fn the callback name\n   * @returns {Function}\n   */\n  var toString = function(fn) {\n\n    /**\n     * The actual to string function \n     * \n     * @returns {string|null}\n     */\n    var Str = function() {\n\n      var poly = this['coeff'];\n\n      var keys = [];\n      for (var i in poly) {\n        keys.push(+i);\n      }\n\n      if (keys.length === 0)\n        return \"0\";\n\n      keys.sort(function(a, b) {\n        return a - b;\n      });\n\n      var str = \"\";\n      for (var k = keys.length; k--; ) {\n\n        var i = keys[k];\n\n        var cur = poly[i];\n\n        var val = cur;\n\n        if (val === null || val === undefined)\n          continue;\n\n        if (Complex && val instanceof Complex) {\n\n          // Add real part\n          if (val['re'] !== 0) {\n\n            if (str !== \"\" && val['re'] > 0) {\n              str += \"+\";\n            }\n\n            if (val['re'] === -1 && i !== 0) {\n              str += \"-\";\n            } else if (val['re'] !== 1 || i === 0) {\n              str += val['re'];\n            }\n\n            // Add exponent if necessary, no DRY, let's feed gzip\n            if (i === 1)\n              str += \"x\";\n            else if (i !== 0)\n              str += \"x^\" + i;\n          }\n\n          // Add imaginary part\n          if (val['im'] !== 0) {\n\n            if (str !== \"\" && val['im'] > 0) {\n              str += \"+\";\n            }\n\n            if (val['im'] === -1) {\n              str += \"-\";\n            } else if (val['im'] !== 1) {\n              str += val['im'];\n            }\n\n            str += \"i\";\n\n            // Add exponent if necessary, no DRY, let's feed gzip\n            if (i === 1)\n              str += \"x\";\n            else if (i !== 0)\n              str += \"x^\" + i;\n          }\n\n        } else {\n\n          val = val.valueOf();\n\n          // Skip if it's zero\n          if (val === 0)\n            continue;\n\n          // Separate by +\n          if (str !== \"\" && val > 0) {\n            str += \"+\";\n          }\n\n          if (val === -1 && i !== 0)\n            str += \"-\";\n          else\n\n          // Add number if it's not a \"1\" or the first position\n          if (val !== 1 || i === 0)\n            str += cur[fn] ? cur[fn]() : cur['toString']();\n\n          // Add exponent if necessary, no DRY, let's feed gzip\n          if (i === 1)\n            str += \"x\";\n          else if (i !== 0)\n            str += \"x^\" + i;\n        }\n      }\n\n      if (str === \"\")\n        return cur[fn] ? cur[fn]() : cur['toString']();\n\n      return str;\n    };\n    return Str;\n  };\n\n  /**\n   * Formats the polynomial as a string\n   * \n   * @returns {string} The polynomial string\n   */\n  Polynomial.prototype['toString'] = toString(\"toString\");\n\n  /**\n   * Formats the polynomial as a latex representation\n   * \n   * @returns {string} The polynomial latex string\n   */\n  Polynomial.prototype['toLatex'] = toString(\"toLatex\");\n\n  /**\n   * Returns the actual polynomial in horner scheme\n   * \n   * @returns {string}\n   */\n  Polynomial.prototype['toHorner'] = function() {\n\n    var poly = this['coeff'];\n    var keys = [];\n    for (var i in poly) {\n      if (!FIELD.empty(poly[i]))\n        keys.push(+i);\n    }\n\n    if (keys.length === 0)\n      return \"0\";\n\n    keys.sort(function(a, b) {\n      return a - b;\n    });\n\n    // TODO: DRY, Combine with toString function\n    function valToString(val, hasSign) {\n\n      var str = \"\";\n\n      if (Complex && val instanceof Complex) {\n\n        if (val['im'] === 0) {\n\n          if (val['re'] > 0 && hasSign) {\n            str += \"+\";\n          }\n          str += val['re'];\n\n        } else if (val['re'] === 0) {\n\n          if (val['im'] === -1) {\n            str += \"-\";\n          } else if (val['im'] !== 1) {\n\n            if (val['im'] > 0 && hasSign) {\n              str += \"+\";\n            }\n            str += val['im'];\n          } else {\n            if (val['im'] > 0 && hasSign) {\n              str += \"+\";\n            }\n          }\n          str += \"i\";\n\n        } else {\n\n          if (hasSign) {\n            str += \"+\";\n          }\n\n          str += \"(\";\n          str += val.toString();\n          str += \")\";\n        }\n\n        return str;\n\n      } else {\n\n        if (val > 0 && hasSign) {\n          str += \"+\";\n        }\n        str += val.toString();\n      }\n      return str;\n    }\n\n    function rec(keys, pos) {\n\n      var ndx = keys.length - pos - 1;\n      var exp = keys[ndx] - (keys[ndx - 1] || 0);\n      var str1 = \"\";\n      var str2 = \"\";\n\n      if (exp > 0) {\n        str1 = \"x\";\n\n        if (exp > 1) {\n          str1 += \"^\" + exp;\n        }\n      }\n\n      if (ndx > 0)\n        str1 += valToString(poly[keys[ndx - 1]], true);\n\n      if (pos === 0) {\n        return valToString(poly[keys[ndx]], false) + str1;\n      }\n\n      if (ndx >= 0 && keys[ndx])\n        str2 += \"(\";\n\n      str2 += rec(keys, pos - 1);\n\n      if (ndx >= 0 && keys[ndx])\n        str2 += \")\";\n\n      str2 += str1;\n\n      return str2;\n    }\n    return rec(keys, keys.length - 1);\n  };\n\n  /**\n   * Clones the actual object\n   * \n   * @returns {Polynomial}\n   */\n  Polynomial.prototype['clone'] = function() {\n    return new Polynomial(this);\n  };\n\n  /**\n   * Returns the degree of the polynomial\n   * \n   * @returns {number}\n   */\n  Polynomial.prototype['degree'] = function() {\n\n    return degree(this['coeff']);\n  };\n\n  /**\n   * Set the field globally\n   * \n   * @param {string|Object} field One of: C (complex), H (quaternion), Q (rational), R (real) or an object with methods for field\n   */\n  Polynomial['setField'] = function(field) {\n\n    // Fields with the same common API\n    var F = {\n      \"Q\": Fraction,\n      \"C\": Complex,\n      \"H\": Quaternion\n    }[field];\n\n    if (F !== undefined) {\n\n      FIELD = {\n        \"add\": function(a, b) {\n          return new F(a)['add'](b);\n        },\n        \"sub\": function(a, b) {\n          return new F(a)['sub'](b);\n        },\n        \"mul\": function(a, b) {\n          return new F(a)['mul'](b);\n        },\n        \"div\": function(a, b) {\n          return new F(a)['div'](b);\n        },\n        \"parse\": function(x) {\n          return new F(x);\n        },\n        \"empty\": function(x) {\n          return new F(x)['equals'](0);\n        },\n        \"pow\": function(a, b) {\n          return new F(a)['pow'](b);\n        },\n        \"equals\": function(a, b) {\n          return new F(a)['equals'](b);\n        }\n      };\n\n    } else if (!field || field === 'R') {\n\n      FIELD = ORIG_FIELD;\n\n    } else if (typeof field === 'object') {\n\n      FIELD = field;\n\n    } else if (field.charAt(0) === 'Z') {\n\n      var N = +field.slice(1);\n\n      FIELD = {// Test in Z_n\n        \"add\": function(a, b) {\n          return mod(a + b, N);\n        },\n        \"sub\": function(a, b) {\n          return mod(a - b, N);\n        },\n        \"mul\": function(a, b) {\n          return mod(a * b, N);\n        },\n        \"div\": function(a, b) {\n          return mod(a * modinv(b, N), N);\n        },\n        \"parse\": function(x) {\n          return parseInt(x, 10);\n        },\n        \"empty\": function(x) {\n          return undefined === x || 0 === x;\n        },\n        \"pow\": function(a, b) {\n\n          for (var r = 1; b > 0; a = mod(a * a, N), b >>= 1) {\n\n            if (b & 1) {\n              r = mod(r * a, N);\n            }\n          }\n          return r;\n        },\n        \"equals\": function(a, b) {\n          return a == b;\n        }\n      };\n    }\n  };\n\n  if (typeof define === 'function' && define['amd']) {\n\n    define([\"fraction.js\", \"complex.js\", \"quaternion\"], function(frac, comp, quat) {\n      Fraction = frac;\n      Complex = comp;\n      Quaternion = quat;\n      return Polynomial;\n    });\n\n  } else if (typeof exports === 'object') {\n\n    Fraction = require(\"fraction.js\");\n    Complex = require(\"complex.js\");\n    Quaternion = require(\"quaternion\");\n\n    Object.defineProperty(exports, \"__esModule\", {'value': true});\n    Polynomial['default'] = Polynomial;\n    Polynomial['Polynomial'] = Polynomial;\n    module['exports'] = Polynomial;\n\n  } else {\n\n    Fraction = root['Fraction'];\n    Complex = root['Complex'];\n    Quaternion = root['Quaternion'];\n\n    root['Polynomial'] = Polynomial;\n  }\n\n})(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OperatorDictionary = void 0;\nvar Settings_1 = require(\"../Settings\");\n// @ts-ignore\nvar Symbol_1 = require(\"../Types/Symbol\");\nvar Core_1 = require(\"../Functions/Core\");\nvar OperatorDictionary = /*#__PURE__*/function () {\n  function OperatorDictionary() {\n    _classCallCheck(this, OperatorDictionary);\n    this.operators = {};\n    this.brackets = {\n      '(': {\n        type: 'round',\n        id: 1,\n        is_open: true,\n        is_close: false\n      },\n      ')': {\n        type: 'round',\n        id: 2,\n        is_open: false,\n        is_close: true\n      },\n      '[': {\n        type: 'square',\n        id: 3,\n        is_open: true,\n        is_close: false,\n        maps_to: 'vector'\n      },\n      ']': {\n        type: 'square',\n        id: 4,\n        is_open: false,\n        is_close: true\n      },\n      '{': {\n        type: 'curly',\n        id: 5,\n        is_open: true,\n        is_close: false,\n        maps_to: 'Set'\n      },\n      '}': {\n        type: 'curly',\n        id: 6,\n        is_open: false,\n        is_close: true\n      }\n    };\n    this.operators = {\n      '\\\\': {\n        precedence: 8,\n        operator: '\\\\',\n        action: 'slash',\n        prefix: true,\n        postfix: false,\n        leftAssoc: true,\n        operation: function operation(e) {\n          return e; //bypass the slash\n        }\n      },\n\n      '!!': {\n        precedence: 7,\n        operator: '!!',\n        action: 'dfactorial',\n        prefix: false,\n        postfix: true,\n        leftAssoc: true,\n        operation: function operation(e) {\n          return (0, Symbol_1.symfunction)(Settings_1.Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\n        }\n      },\n\n      '!': {\n        precedence: 7,\n        operator: '!',\n        action: 'factorial',\n        prefix: false,\n        postfix: true,\n        leftAssoc: true,\n        operation: function operation(e) {\n          return (0, Core_1.factorial)(e); //wrap it in a factorial function\n        }\n      },\n\n      '^': {\n        precedence: 6,\n        operator: '^',\n        action: 'pow',\n        prefix: false,\n        postfix: false,\n        leftAssoc: true\n      },\n      '**': {\n        precedence: 6,\n        operator: '**',\n        action: 'pow',\n        prefix: false,\n        postfix: false,\n        leftAssoc: true\n      },\n      '%': {\n        precedence: 4,\n        operator: '%',\n        action: 'percent',\n        prefix: false,\n        postfix: true,\n        leftAssoc: true,\n        overloaded: true,\n        overloadAction: 'mod',\n        overloadLeftAssoc: false,\n        operation: function operation(x) {\n          return (0, Core_1.divide)(x, new Symbol_1.Symbol(100));\n        }\n      },\n      '*': {\n        precedence: 4,\n        operator: '*',\n        action: 'multiply',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '/': {\n        precedence: 4,\n        operator: '/',\n        action: 'divide',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '+': {\n        precedence: 3,\n        operator: '+',\n        action: 'add',\n        prefix: true,\n        postfix: false,\n        leftAssoc: false,\n        operation: function operation(x) {\n          return x;\n        }\n      },\n      'plus': {\n        precedence: 3,\n        operator: 'plus',\n        action: 'add',\n        prefix: true,\n        postfix: false,\n        leftAssoc: false,\n        operation: function operation(x) {\n          return x;\n        }\n      },\n      '-': {\n        precedence: 3,\n        operator: '-',\n        action: 'subtract',\n        prefix: true,\n        postfix: false,\n        leftAssoc: false,\n        operation: function operation(x) {\n          return x.negate();\n        }\n      },\n      '=': {\n        precedence: 2,\n        operator: '=',\n        action: 'equals',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '==': {\n        precedence: 1,\n        operator: '==',\n        action: 'eq',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '<': {\n        precedence: 1,\n        operator: '<',\n        action: 'lt',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '<=': {\n        precedence: 1,\n        operator: '<=',\n        action: 'lte',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '>': {\n        precedence: 1,\n        operator: '>',\n        action: 'gt',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '=>': {\n        precedence: 1,\n        operator: '=>',\n        action: 'gte',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      ',': {\n        precedence: 0,\n        operator: ',',\n        action: 'comma',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      ':': {\n        precedence: 0,\n        operator: ',',\n        action: 'assign',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false,\n        vectorFn: 'slice'\n      },\n      ':=': {\n        precedence: 0,\n        operator: ',',\n        action: 'function_assign',\n        prefix: false,\n        postfix: false,\n        leftAssoc: true\n      }\n    };\n  }\n  _createClass(OperatorDictionary, [{\n    key: \"injectOperatorsDeps\",\n    value: function injectOperatorsDeps(depsFunction) {\n      this.deps = depsFunction;\n    }\n    /**\n     * Replaces nerdamer.setOperator\n     * @param {object} operator\n     * @param action\n     * @param {'over' | 'under'} shift\n     */\n  }, {\n    key: \"setOperator\",\n    value: function setOperator(operator, action, shift) {\n      var name = operator.operator; //take the name to be the symbol\n      this.operators[name] = operator;\n      if (action) {\n        this.deps.registerOperator(operator.action, action);\n      }\n      //make the parser aware of the operator\n      this.deps.registerOperator(name, operator.operation);\n      //make the action available to the parser if infix\n      if (!operator.action && !(operator.prefix || operator.postfix)) {\n        operator.action = name;\n      }\n      //if this operator is exclusive then all successive operators should be shifted\n      if (shift === 'over' || shift === 'under') {\n        var precedence = operator.precedence;\n        for (var x in this.operators) {\n          var o = this.operators[x];\n          var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\n          if (condition) {\n            o.precedence++;\n          }\n        }\n      }\n    }\n    /**\n     * Gets an opererator by its symbol\n     * @param {String} operator\n     * @returns {OperatorDescriptor}\n     */\n  }, {\n    key: \"getOperator\",\n    value: function getOperator(operator) {\n      return this.operators[operator];\n    }\n  }, {\n    key: \"aliasOperator\",\n    value: function aliasOperator(o, n) {\n      var operator = this.operators[o];\n      //copy everything over to the new operator\n      var t = Object.assign({}, operator);\n      //update the symbol\n      t.operator = n;\n      this.setOperator(t);\n    }\n    /**\n     * Returns the list of operators. Caution! Can break parser!\n     * @returns {object}\n     */\n  }, {\n    key: \"getOperators\",\n    value: function getOperators() {\n      //will replace this with some cloning action in the future\n      return this.operators;\n    }\n  }, {\n    key: \"getBrackets\",\n    value: function getBrackets() {\n      return this.brackets;\n    }\n  }, {\n    key: \"isOperator\",\n    value: function isOperator(name) {\n      return name in this.operators;\n    }\n  }]);\n  return OperatorDictionary;\n}();\nexports.OperatorDictionary = OperatorDictionary;","map":{"version":3,"mappings":"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","names":["OperatorDictionary","type","id","is_open","is_close","maps_to","operators","precedence","operator","action","prefix","postfix","leftAssoc","operation","e","Settings_1","DOUBLEFACTORIAL","overloaded","overloadAction","overloadLeftAssoc","x","Symbol_1","negate","vectorFn","depsFunction","deps","shift","name","registerOperator","o","condition","n","t","setOperator","brackets","exports"],"sourceRoot":"","sources":["../../src/Providers/OperatorDictionary.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
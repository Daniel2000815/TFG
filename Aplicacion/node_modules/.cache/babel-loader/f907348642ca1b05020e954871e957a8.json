{"ast":null,"code":"export var primitives = function primitives() {\n  return \"\\n    float sphere( vec3 p, float radius )\\n    {\\n    return length(p)-radius;\\n    }\\n\\n    float box( vec3 p, vec3 size )\\n    {\\n    vec3 q = abs(p) - size;\\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\\n    }\\n\\n    float torus( vec3 p, vec2 size )\\n    {\\n    vec2 q = vec2(length(p.xz)-size.x,p.y);\\n    return length(q)-size.y;\\n    }\\n\\n    float cone( in vec3 p, in vec2 c, float h )\\n    {\\n    // c is the sin/cos of the angle, h is height\\n    // Alternatively pass q instead of (c,h),\\n    // which is the point at the base in 2D\\n    vec2 q = h*vec2(c.x/c.y,-1.0);\\n        \\n    vec2 w = vec2( length(p.xz), p.y );\\n    vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\\n    vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\\n    float k = sign( q.y );\\n    float d = min(dot( a, a ),dot(b, b));\\n    float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\\n    return sqrt(d)*sign(s);\\n    }\\n\";\n};","map":{"version":3,"names":["primitives"],"sources":["C:/Users/daniz/TFG/Aplicacion/src/primitives.js"],"sourcesContent":["export const primitives = () => `\r\n    float sphere( vec3 p, float radius )\r\n    {\r\n    return length(p)-radius;\r\n    }\r\n\r\n    float box( vec3 p, vec3 size )\r\n    {\r\n    vec3 q = abs(p) - size;\r\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\r\n    }\r\n\r\n    float torus( vec3 p, vec2 size )\r\n    {\r\n    vec2 q = vec2(length(p.xz)-size.x,p.y);\r\n    return length(q)-size.y;\r\n    }\r\n\r\n    float cone( in vec3 p, in vec2 c, float h )\r\n    {\r\n    // c is the sin/cos of the angle, h is height\r\n    // Alternatively pass q instead of (c,h),\r\n    // which is the point at the base in 2D\r\n    vec2 q = h*vec2(c.x/c.y,-1.0);\r\n        \r\n    vec2 w = vec2( length(p.xz), p.y );\r\n    vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\r\n    vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\r\n    float k = sign( q.y );\r\n    float d = min(dot( a, a ),dot(b, b));\r\n    float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\r\n    return sqrt(d)*sign(s);\r\n    }\r\n`"],"mappings":"AAAA,OAAO,IAAMA,UAAU,GAAG,SAAbA,UAAa;EAAA;AAAA,CAAnB"},"metadata":{},"sourceType":"module"}
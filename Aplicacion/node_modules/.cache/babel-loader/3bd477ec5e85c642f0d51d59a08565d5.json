{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'norm';\nvar dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];\nexport var createNorm = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      add = _ref.add,\n      pow = _ref.pow,\n      conj = _ref.conj,\n      sqrt = _ref.sqrt,\n      multiply = _ref.multiply,\n      equalScalar = _ref.equalScalar,\n      larger = _ref.larger,\n      smaller = _ref.smaller,\n      matrix = _ref.matrix,\n      ctranspose = _ref.ctranspose,\n      eigs = _ref.eigs;\n  /**\r\n   * Calculate the norm of a number, vector or matrix.\r\n   *\r\n   * The second parameter p is optional. If not provided, it defaults to 2.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.norm(x)\r\n   *    math.norm(x, p)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.abs(-3.5)                         // returns 3.5\r\n   *    math.norm(-3.5)                        // returns 3.5\r\n   *\r\n   *    math.norm(math.complex(3, -4))         // returns 5\r\n   *\r\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\r\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\r\n   *\r\n   *    math.norm([3, 4], 2)                   // returns 5\r\n   *\r\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\r\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\r\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\r\n   *\r\n   * See also:\r\n   *\r\n   *    abs, hypot\r\n   *\r\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\r\n   *            Value for which to calculate the norm\r\n   * @param  {number | BigNumber | string} [p=2]\r\n   *            Vector space.\r\n   *            Supported numbers include Infinity and -Infinity.\r\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\r\n   * @return {number | BigNumber} the p-norm\r\n   */\n\n  return typed(name, {\n    number: Math.abs,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    boolean: function boolean(x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n    Array: function Array(x) {\n      return _norm(matrix(x), 2);\n    },\n    Matrix: function Matrix(x) {\n      return _norm(x, 2);\n    },\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\n      return _norm(matrix(x), p);\n    },\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\n      return _norm(x, p);\n    }\n  });\n  /**\r\n   * Calculate the plus infinity norm for a vector\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n  function _vectorNormPlusInfinity(x) {\n    // norm(x, Infinity) = max(abs(x))\n    var pinf = 0; // skip zeros since abs(0) === 0\n\n    x.forEach(function (value) {\n      var v = abs(value);\n\n      if (larger(v, pinf)) {\n        pinf = v;\n      }\n    }, true);\n    return pinf;\n  }\n  /**\r\n   * Calculate the minus infinity norm for a vector\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _vectorNormMinusInfinity(x) {\n    // norm(x, -Infinity) = min(abs(x))\n    var ninf; // skip zeros since abs(0) === 0\n\n    x.forEach(function (value) {\n      var v = abs(value);\n\n      if (!ninf || smaller(v, ninf)) {\n        ninf = v;\n      }\n    }, true);\n    return ninf || 0;\n  }\n  /**\r\n   * Calculate the norm for a vector\r\n   * @param {Matrix} x\r\n   * @param {number | string} p\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _vectorNorm(x, p) {\n    // check p\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _vectorNormPlusInfinity(x);\n    }\n\n    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n      return _vectorNormMinusInfinity(x);\n    }\n\n    if (p === 'fro') {\n      return _norm(x, 2);\n    }\n\n    if (typeof p === 'number' && !isNaN(p)) {\n      // check p != 0\n      if (!equalScalar(p, 0)) {\n        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n        var n = 0; // skip zeros since abs(0) === 0\n\n        x.forEach(function (value) {\n          n = add(pow(abs(value), p), n);\n        }, true);\n        return pow(n, 1 / p);\n      }\n\n      return Number.POSITIVE_INFINITY;\n    } // invalid parameter value\n\n\n    throw new Error('Unsupported parameter value');\n  }\n  /**\r\n   * Calculate the Frobenius norm for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _matrixNormFrobenius(x) {\n    // norm(x) = sqrt(sum(diag(x'x)))\n    var fro = 0;\n    x.forEach(function (value, index) {\n      fro = add(fro, multiply(value, conj(value)));\n    });\n    return abs(sqrt(fro));\n  }\n  /**\r\n   * Calculate the norm L1 for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _matrixNormOne(x) {\n    // norm(x) = the largest column sum\n    var c = []; // result\n\n    var maxc = 0; // skip zeros since abs(0) == 0\n\n    x.forEach(function (value, index) {\n      var j = index[1];\n      var cj = add(c[j] || 0, abs(value));\n\n      if (larger(cj, maxc)) {\n        maxc = cj;\n      }\n\n      c[j] = cj;\n    }, true);\n    return maxc;\n  }\n  /**\r\n   * Calculate the norm L2 for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _matrixNormTwo(x) {\n    // norm(x) = sqrt( max eigenvalue of A*.A)\n    var sizeX = x.size();\n\n    if (sizeX[0] !== sizeX[1]) {\n      throw new RangeError('Invalid matrix dimensions');\n    }\n\n    var tx = ctranspose(x);\n    var squaredX = multiply(tx, x);\n    var eigenVals = eigs(squaredX).values.toArray();\n    var rho = eigenVals[eigenVals.length - 1];\n    return abs(sqrt(rho));\n  }\n  /**\r\n   * Calculate the infinity norm for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _matrixNormInfinity(x) {\n    // norm(x) = the largest row sum\n    var r = []; // result\n\n    var maxr = 0; // skip zeros since abs(0) == 0\n\n    x.forEach(function (value, index) {\n      var i = index[0];\n      var ri = add(r[i] || 0, abs(value));\n\n      if (larger(ri, maxr)) {\n        maxr = ri;\n      }\n\n      r[i] = ri;\n    }, true);\n    return maxr;\n  }\n  /**\r\n   * Calculate the norm for a 2D Matrix (M*N)\r\n   * @param {Matrix} x\r\n   * @param {number | string} p\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _matrixNorm(x, p) {\n    // check p\n    if (p === 1) {\n      return _matrixNormOne(x);\n    }\n\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _matrixNormInfinity(x);\n    }\n\n    if (p === 'fro') {\n      return _matrixNormFrobenius(x);\n    }\n\n    if (p === 2) {\n      return _matrixNormTwo(x);\n    } // invalid parameter value\n\n\n    throw new Error('Unsupported parameter value ' + p);\n  }\n  /**\r\n   * Calculate the norm for an array\r\n   * @param {Matrix} x\r\n   * @param {number | string} p\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\n\n\n  function _norm(x, p) {\n    // size\n    var sizeX = x.size(); // check if it is a vector\n\n    if (sizeX.length === 1) {\n      return _vectorNorm(x, p);\n    } // MxN matrix\n\n\n    if (sizeX.length === 2) {\n      if (sizeX[0] && sizeX[1]) {\n        return _matrixNorm(x, p);\n      } else {\n        throw new RangeError('Invalid matrix dimensions');\n      }\n    }\n  }\n});","map":{"version":3,"names":["factory","name","dependencies","createNorm","_ref","typed","abs","add","pow","conj","sqrt","multiply","equalScalar","larger","smaller","matrix","ctranspose","eigs","number","Math","Complex","x","BigNumber","boolean","Array","_norm","Matrix","ArrayNumberBigNumberString","p","MatrixNumberBigNumberString","_vectorNormPlusInfinity","pinf","forEach","value","v","_vectorNormMinusInfinity","ninf","_vectorNorm","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","isNaN","n","Error","_matrixNormFrobenius","fro","index","_matrixNormOne","c","maxc","j","cj","_matrixNormTwo","sizeX","size","RangeError","tx","squaredX","eigenVals","values","toArray","rho","length","_matrixNormInfinity","r","maxr","i","ri","_matrixNorm"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/mathjs/lib/esm/function/arithmetic/norm.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'norm';\r\nvar dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];\r\nexport var createNorm = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    abs,\r\n    add,\r\n    pow,\r\n    conj,\r\n    sqrt,\r\n    multiply,\r\n    equalScalar,\r\n    larger,\r\n    smaller,\r\n    matrix,\r\n    ctranspose,\r\n    eigs\r\n  } = _ref;\r\n\r\n  /**\r\n   * Calculate the norm of a number, vector or matrix.\r\n   *\r\n   * The second parameter p is optional. If not provided, it defaults to 2.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.norm(x)\r\n   *    math.norm(x, p)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.abs(-3.5)                         // returns 3.5\r\n   *    math.norm(-3.5)                        // returns 3.5\r\n   *\r\n   *    math.norm(math.complex(3, -4))         // returns 5\r\n   *\r\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\r\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\r\n   *\r\n   *    math.norm([3, 4], 2)                   // returns 5\r\n   *\r\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\r\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\r\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\r\n   *\r\n   * See also:\r\n   *\r\n   *    abs, hypot\r\n   *\r\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\r\n   *            Value for which to calculate the norm\r\n   * @param  {number | BigNumber | string} [p=2]\r\n   *            Vector space.\r\n   *            Supported numbers include Infinity and -Infinity.\r\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\r\n   * @return {number | BigNumber} the p-norm\r\n   */\r\n  return typed(name, {\r\n    number: Math.abs,\r\n    Complex: function Complex(x) {\r\n      return x.abs();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      // norm(x) = abs(x)\r\n      return x.abs();\r\n    },\r\n    boolean: function boolean(x) {\r\n      // norm(x) = abs(x)\r\n      return Math.abs(x);\r\n    },\r\n    Array: function Array(x) {\r\n      return _norm(matrix(x), 2);\r\n    },\r\n    Matrix: function Matrix(x) {\r\n      return _norm(x, 2);\r\n    },\r\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\r\n      return _norm(matrix(x), p);\r\n    },\r\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\r\n      return _norm(x, p);\r\n    }\r\n  });\r\n  /**\r\n   * Calculate the plus infinity norm for a vector\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n  function _vectorNormPlusInfinity(x) {\r\n    // norm(x, Infinity) = max(abs(x))\r\n    var pinf = 0; // skip zeros since abs(0) === 0\r\n\r\n    x.forEach(function (value) {\r\n      var v = abs(value);\r\n\r\n      if (larger(v, pinf)) {\r\n        pinf = v;\r\n      }\r\n    }, true);\r\n    return pinf;\r\n  }\r\n  /**\r\n   * Calculate the minus infinity norm for a vector\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _vectorNormMinusInfinity(x) {\r\n    // norm(x, -Infinity) = min(abs(x))\r\n    var ninf; // skip zeros since abs(0) === 0\r\n\r\n    x.forEach(function (value) {\r\n      var v = abs(value);\r\n\r\n      if (!ninf || smaller(v, ninf)) {\r\n        ninf = v;\r\n      }\r\n    }, true);\r\n    return ninf || 0;\r\n  }\r\n  /**\r\n   * Calculate the norm for a vector\r\n   * @param {Matrix} x\r\n   * @param {number | string} p\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _vectorNorm(x, p) {\r\n    // check p\r\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\r\n      return _vectorNormPlusInfinity(x);\r\n    }\r\n\r\n    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\r\n      return _vectorNormMinusInfinity(x);\r\n    }\r\n\r\n    if (p === 'fro') {\r\n      return _norm(x, 2);\r\n    }\r\n\r\n    if (typeof p === 'number' && !isNaN(p)) {\r\n      // check p != 0\r\n      if (!equalScalar(p, 0)) {\r\n        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\r\n        var n = 0; // skip zeros since abs(0) === 0\r\n\r\n        x.forEach(function (value) {\r\n          n = add(pow(abs(value), p), n);\r\n        }, true);\r\n        return pow(n, 1 / p);\r\n      }\r\n\r\n      return Number.POSITIVE_INFINITY;\r\n    } // invalid parameter value\r\n\r\n\r\n    throw new Error('Unsupported parameter value');\r\n  }\r\n  /**\r\n   * Calculate the Frobenius norm for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _matrixNormFrobenius(x) {\r\n    // norm(x) = sqrt(sum(diag(x'x)))\r\n    var fro = 0;\r\n    x.forEach(function (value, index) {\r\n      fro = add(fro, multiply(value, conj(value)));\r\n    });\r\n    return abs(sqrt(fro));\r\n  }\r\n  /**\r\n   * Calculate the norm L1 for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _matrixNormOne(x) {\r\n    // norm(x) = the largest column sum\r\n    var c = []; // result\r\n\r\n    var maxc = 0; // skip zeros since abs(0) == 0\r\n\r\n    x.forEach(function (value, index) {\r\n      var j = index[1];\r\n      var cj = add(c[j] || 0, abs(value));\r\n\r\n      if (larger(cj, maxc)) {\r\n        maxc = cj;\r\n      }\r\n\r\n      c[j] = cj;\r\n    }, true);\r\n    return maxc;\r\n  }\r\n  /**\r\n   * Calculate the norm L2 for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _matrixNormTwo(x) {\r\n    // norm(x) = sqrt( max eigenvalue of A*.A)\r\n    var sizeX = x.size();\r\n\r\n    if (sizeX[0] !== sizeX[1]) {\r\n      throw new RangeError('Invalid matrix dimensions');\r\n    }\r\n\r\n    var tx = ctranspose(x);\r\n    var squaredX = multiply(tx, x);\r\n    var eigenVals = eigs(squaredX).values.toArray();\r\n    var rho = eigenVals[eigenVals.length - 1];\r\n    return abs(sqrt(rho));\r\n  }\r\n  /**\r\n   * Calculate the infinity norm for a matrix\r\n   * @param {Matrix} x\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _matrixNormInfinity(x) {\r\n    // norm(x) = the largest row sum\r\n    var r = []; // result\r\n\r\n    var maxr = 0; // skip zeros since abs(0) == 0\r\n\r\n    x.forEach(function (value, index) {\r\n      var i = index[0];\r\n      var ri = add(r[i] || 0, abs(value));\r\n\r\n      if (larger(ri, maxr)) {\r\n        maxr = ri;\r\n      }\r\n\r\n      r[i] = ri;\r\n    }, true);\r\n    return maxr;\r\n  }\r\n  /**\r\n   * Calculate the norm for a 2D Matrix (M*N)\r\n   * @param {Matrix} x\r\n   * @param {number | string} p\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _matrixNorm(x, p) {\r\n    // check p\r\n    if (p === 1) {\r\n      return _matrixNormOne(x);\r\n    }\r\n\r\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\r\n      return _matrixNormInfinity(x);\r\n    }\r\n\r\n    if (p === 'fro') {\r\n      return _matrixNormFrobenius(x);\r\n    }\r\n\r\n    if (p === 2) {\r\n      return _matrixNormTwo(x);\r\n    } // invalid parameter value\r\n\r\n\r\n    throw new Error('Unsupported parameter value ' + p);\r\n  }\r\n  /**\r\n   * Calculate the norm for an array\r\n   * @param {Matrix} x\r\n   * @param {number | string} p\r\n   * @returns {number} Returns the norm\r\n   * @private\r\n   */\r\n\r\n\r\n  function _norm(x, p) {\r\n    // size\r\n    var sizeX = x.size(); // check if it is a vector\r\n\r\n    if (sizeX.length === 1) {\r\n      return _vectorNorm(x, p);\r\n    } // MxN matrix\r\n\r\n\r\n    if (sizeX.length === 2) {\r\n      if (sizeX[0] && sizeX[1]) {\r\n        return _matrixNorm(x, p);\r\n      } else {\r\n        throw new RangeError('Invalid matrix dimensions');\r\n      }\r\n    }\r\n  }\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}
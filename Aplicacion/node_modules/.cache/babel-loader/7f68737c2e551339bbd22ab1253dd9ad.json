{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Settings_1 = require(\"../Settings\");\nvar Utils_1 = require(\"../Core/Utils\");\n/**\n * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\n * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\n */\nvar Scientific = /*#__PURE__*/function () {\n  function Scientific(value) {\n    _classCallCheck(this, Scientific);\n    this.sign = 1;\n    this.decp = 0;\n    var num = String(typeof value === 'undefined' ? 0 : value); //convert to a string\n    //remove the sign\n    if (num.startsWith('-')) {\n      this.sign = -1;\n      //remove the sign\n      num = num.substr(1, num.length);\n    } else {\n      this.sign = 1;\n    }\n    if (Scientific.isScientific(num)) {\n      var _Scientific$fromScien = Scientific.fromScientific(num);\n      var _Scientific$fromScien2 = _slicedToArray(_Scientific$fromScien, 2);\n      this.coeff = _Scientific$fromScien2[0];\n      this.exponent = _Scientific$fromScien2[1];\n    } else {\n      // [this.coeff, this.exponent, this.decp, this.dec, this.wholes] = Scientific.convert(num);\n      var data = Scientific.convert(num);\n      this.coeff = data.coeff;\n      this.exponent = data.exponent;\n      this.dec = data.dec;\n      this.decp = data.decp;\n      this.wholes = data.wholes;\n    }\n  }\n  _createClass(Scientific, [{\n    key: \"round\",\n    value: function round(num) {\n      var n = this.copy();\n      num = Number(num); //cast to number for safety\n      //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\n      //we can round based on this\n      if (num === 0) {\n        n.coeff = n.coeff.charAt(0);\n      } else {\n        //get up to n-1 digits\n        var rounded = this.coeff.substring(0, num + 1);\n        //get the next two\n        var next_two = this.coeff.substring(num + 1, num + 3);\n        //the extra digit\n        var ed = parseInt(next_two.charAt(0));\n        if (parseInt(next_two.charAt(1)) > 4) {\n          ed++;\n        }\n        n.coeff = rounded + ed;\n      }\n      return n;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      var n = new Scientific(0);\n      n.coeff = this.coeff;\n      n.exponent = this.exponent;\n      n.sign = this.sign;\n      return n;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var retval;\n      if (Settings_1.Settings.SCIENTIFIC_IGNORE_ZERO_EXPONENTS && this.exponent === '0' && this.decp < n) {\n        if (this.decp === 0) retval = this.wholes;else retval = this.coeff;\n      } else {\n        var coeff = n === undefined ? this.coeff : Scientific.round(this.coeff, Math.min(n, this.decp || 1));\n        retval = this.exponent === '0' ? coeff : coeff + 'e' + this.exponent;\n      }\n      return (this.sign === -1 ? '-' : '') + retval;\n    }\n  }], [{\n    key: \"fromScientific\",\n    value: function fromScientific(num) {\n      var parts = String(num).toLowerCase().split('e');\n      var coeff = parts[0];\n      var exponent = parts[1];\n      return [coeff, exponent];\n    }\n  }, {\n    key: \"convert\",\n    value: function convert(num) {\n      //get wholes and decimals\n      var parts = num.split('.');\n      //make zero go away\n      var wholes = parts[0] || '';\n      var d = parts[1] || '';\n      //convert zero to blank strings\n      wholes = Scientific.removeLeadingZeroes(wholes);\n      d = Scientific.removeTrailingZeroes(d);\n      //find the location of the decimal place which is right after the wholes\n      var dot_location = wholes.length;\n      //add them together so we can move the dot\n      var n = wholes + d;\n      //find the next number\n      var zeroes = Scientific.leadingZeroes(n).length;\n      //set the exponent\n      var exponent = (dot_location - (zeroes + 1)).toString();\n      //set the coeff but first remove leading zeroes\n      var coeff = Scientific.removeLeadingZeroes(n);\n      coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\n      //the coeff decimal places\n      var dec = coeff.split('.')[1] || ''; //if it's undefined or zero it's going to blank\n      var decp = dec === '0' ? 0 : dec.length;\n      //decimals\n      dec = d.toString();\n      return {\n        coeff: coeff,\n        exponent: exponent,\n        decp: decp,\n        dec: dec,\n        wholes: wholes\n      };\n    }\n  }, {\n    key: \"isScientific\",\n    value: function isScientific(num) {\n      return /\\d+\\.?\\d*e[+\\-]*\\d+/i.test(num);\n    }\n  }, {\n    key: \"leadingZeroes\",\n    value: function leadingZeroes(num) {\n      var match = num.match(/^(0*).*$/);\n      return match ? match[1] : '';\n    }\n  }, {\n    key: \"removeLeadingZeroes\",\n    value: function removeLeadingZeroes(num) {\n      var match = num.match(/^0*(.*)$/);\n      return match ? match[1] : '';\n    }\n  }, {\n    key: \"removeTrailingZeroes\",\n    value: function removeTrailingZeroes(num) {\n      var match = num.match(/0*$/);\n      return match ? num.substring(0, num.length - match[0].length) : '';\n    }\n  }, {\n    key: \"round\",\n    value: function round(c, n) {\n      var coeff = (0, Utils_1.nround)(c, n);\n      var m = String(coeff).split('.').pop();\n      var d = n - ((m === null || m === void 0 ? void 0 : m.length) || 0);\n      //if we're asking for more significant figures\n      if (d > 0) {\n        coeff = coeff + new Array(d + 1).join('0');\n      }\n      return coeff;\n    }\n  }]);\n  return Scientific;\n}();\nexports.default = Scientific;","map":{"version":3,"mappings":"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","names":["Scientific","value","num","String","startsWith","sign","substr","length","isScientific","fromScientific","coeff","exponent","data","convert","dec","decp","wholes","n","copy","Number","charAt","rounded","substring","next_two","ed","parseInt","retval","Settings_1","SCIENTIFIC_IGNORE_ZERO_EXPONENTS","undefined","round","Math","min","parts","toLowerCase","split","d","removeLeadingZeroes","removeTrailingZeroes","dot_location","zeroes","leadingZeroes","toString","test","match","c","m","pop","Array","join","exports"],"sourceRoot":"","sources":["../../src/Types/Scientific.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
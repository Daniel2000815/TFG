{"ast":null,"code":"\"use strict\"; // noinspection JSUnusedGlobalSymbols\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Author : Martin Donk\n * Website : http://www.nerdamer.com\n * Email : martin.r.donk@gmail.com\n * Source : https://github.com/jiggzson/nerdamer\n */\n\nvar Expression_1 = require(\"./Parser/Expression\");\n\nvar Settings_1 = require(\"./Settings\");\n\nvar Core_1 = require(\"./Core/Core\");\n\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\n\nvar Utils = __importStar(require(\"./Core/Utils\"));\n\nvar LaTeX_1 = require(\"./LaTeX/LaTeX\");\n\nvar Errors_1 = require(\"./Core/Errors\"); //version ======================================================================\n\n\nvar VERSION = '1.1.12'; // set bigInt the precision to js precision\n\ndecimal_js_1.default.set({\n  precision: 250\n});\nvar defaultCore = new Core_1.Core();\nvar parser = defaultCore.PARSER;\nvar functionProvider = defaultCore.functionProvider;\nvar variableDictionary = defaultCore.variableDictionary;\nvar EXPRESSIONS = defaultCore.EXPRESSIONS;\nvar peekers = defaultCore.peekers;\nvar operators = defaultCore.operators;\n/**\n *\n * @param {string|Expression} expression   The expression being parsed.\n * @param {object} subs         An object of known values\n * @param {string} options       A string or array containing additional options such as parsing directly to number\n *                                  or expanding the expression. Use \"numer\" to when wanting the expression to be\n *                                  evaluated. Use \"expand\" when wanting the expression to be expanded.\n * @param {number} location     The index of where the expression should be stored.\n * @returns {Expression & Spread<[Math]>}\n */\n\nfunction nerdamer(expression, subs, options, location) {\n  // Initiate the numer flag\n  var numer = false; // let variable, fn, args;\n  // Convert any expression passed in to a string\n\n  if (typeof expression !== 'string') {\n    expression = expression.toString();\n  } // Is the user declaring a function?\n\n\n  var fndec = /^([a-z_][a-z\\d_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\n\n  if (fndec) {\n    return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);\n  } // Convert it to an array for simplicity\n\n\n  if (!options) {\n    options = [];\n  } else if (!Array.isArray(options)) {\n    options = [options.toString()];\n  }\n\n  options.forEach(function (o) {\n    // Turn on the numer flag if requested\n    if (o === 'numer') {\n      numer = true;\n      return;\n    } // Wrap it in a function if requested. This only holds true for\n    // functions that take a single argument which is the expression\n\n\n    var f = functionProvider.getFunctionDescriptor(o); // If there's a function and it takes a single argument, then wrap\n    // the expression in it\n\n    if (f && f[1] === 1) {\n      expression = \"\".concat(o, \"(\").concat(expression, \")\");\n    }\n  });\n  var e = Utils.block('PARSE2NUMBER', function () {\n    return parser.parse(expression, subs);\n  }, numer || Settings_1.Settings.PARSE2NUMBER);\n\n  if (location) {\n    EXPRESSIONS[location - 1] = e;\n  } else {\n    EXPRESSIONS.push(e);\n  }\n\n  return new Expression_1.Expression(e);\n}\n\n(function (nerdamer) {\n  /**\n   * Converts expression into rpn form\n   * @param {string} expression\n   * @returns {Token[]}\n   */\n  function rpn(expression) {\n    return parser.toRPN(parser.tokenize(expression));\n  }\n\n  nerdamer.rpn = rpn;\n  /**\n   * Generates Converts and expression to LaTeX without evaluating expression.\n   * @param {string} expression The expression being converted\n   * @param {ConvertToLaTeXOptions} options\n   * @returns {string}\n   */\n\n  function convertToLaTeX(expression, options) {\n    return parser.toTeX(expression, options);\n  }\n\n  nerdamer.convertToLaTeX = convertToLaTeX;\n  /**\n   * Attempts to import a LaTeX string.\n   * @param {string} expression The expression being converted\n   * @returns {string}\n   */\n\n  function convertFromLaTeX(expression) {\n    var txt = LaTeX_1.LaTeX.parse(parser.tokenize(expression));\n    return new Expression_1.Expression(parser.parse(txt));\n  }\n\n  nerdamer.convertFromLaTeX = convertFromLaTeX;\n  /**\n   * Get the version of nerdamer or a loaded add-on\n   * @param {string} addon - The add-on being checked\n   * @returns {string} returns the version of nerdamer\n   */\n\n  function version(addon) {\n    if (addon) {\n      try {\n        return defaultCore[addon].version;\n      } catch (e) {\n        return \"No module named \" + addon + \" found!\";\n      }\n    }\n\n    return VERSION;\n  }\n\n  nerdamer.version = version;\n  /**\n   * Get nerdamer generated warnings\n   * @returns {string[]}\n   */\n\n  function getWarnings() {\n    return Utils.WARNINGS;\n  }\n\n  nerdamer.getWarnings = getWarnings;\n  /**\n   * Sets a constant value which nerdamer will automatically substitute when parsing expression/equation.\n   * Set to \"delete\" or \"\" to unset.\n   * @param {string} constant                 The name of the constant to be set\n   * @param {number|Expression|string} value  The value of the constant\n   * @returns {Nerdamer}                      Returns the nerdamer object\n   */\n\n  function setConstant(constant, value) {\n    Utils.validateName(constant);\n\n    if (!variableDictionary.isReserved(constant)) {\n      //fix for issue #127\n      if (value === 'delete' || value === '') {\n        variableDictionary.deleteConstant(constant);\n      } else {\n        // TODO: fix check\n        // if (isNaN(value)) {\n        //     throw new NerdamerTypeError('Constant must be a number!');\n        // }\n        variableDictionary.setConstant(constant, value);\n      }\n    }\n\n    return nerdamer;\n  }\n\n  nerdamer.setConstant = setConstant;\n  /**\n   * Returns the value of a previously set constant\n   * @param {string} constant\n   * @returns {string}\n   */\n\n  function getConstant(constant) {\n    return String(variableDictionary.getConstant(constant));\n  }\n\n  nerdamer.getConstant = getConstant;\n  /**\n   * Sets a function which can then be called using nerdamer.\n   * @param {string} name The name of the function\n   * @param {string[]} params_array A list containing the parameter name of the functions\n   * @param {string} body The body of the function\n   * @returns {boolean} returns true if succeeded and falls on fail\n   * @example nerdamer.setFunction('f',['x'], 'x^2+2');\n   */\n\n  function setFunction(name, params_array, body) {\n    parser.setFunction(name, params_array, body);\n  }\n\n  nerdamer.setFunction = setFunction;\n  /**\n   * Returns the nerdamer core object. This object contains all the core functions of nerdamer and houses the parser.\n   * @returns {Core} Exports the nerdamer core functions and objects\n   */\n\n  function getCore() {\n    return defaultCore;\n  }\n\n  nerdamer.getCore = getCore;\n  /**\n   * Returns stored expression at index. For first index use 1 not 0.\n   * @param {number|string} expression_number\n   * @param {boolean} asType\n   */\n\n  function getExpression(expression_number) {\n    var asType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return Expression_1.Expression.getExpression(expression_number, asType);\n  }\n\n  nerdamer.getExpression = getExpression;\n  nerdamer.getEquation = getExpression;\n  /**\n   *\n   * @param {boolean} asArray The returned names are returned as an array if this is set to true;\n   * @returns {string|string[]}\n   */\n\n  function reserved() {\n    var asArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var reserved = variableDictionary.getReserved();\n\n    if (asArray) {\n      return reserved;\n    }\n\n    return reserved.join(', ');\n  }\n\n  nerdamer.reserved = reserved;\n  /**\n   *\n   * @param {number|'all'} equation_number          the number of the equation to clear.\n   *                                              If 'all' is supplied then all equations are cleared\n   * @param {boolean} keep_EXPRESSIONS_fixed  use true if you don't want to keep EXPRESSIONS length fixed\n   * @returns {Nerdamer}                      Returns the nerdamer object\n   */\n\n  function clear(equation_number) {\n    var keep_EXPRESSIONS_fixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (equation_number === 'all') {\n      EXPRESSIONS.splice(0, EXPRESSIONS.length);\n    } else if (equation_number === 'last') {\n      EXPRESSIONS.pop();\n    } else if (equation_number === 'first') {\n      EXPRESSIONS.shift();\n    } else {\n      var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\n      keep_EXPRESSIONS_fixed ? EXPRESSIONS[index] = undefined : Utils.remove(EXPRESSIONS, index);\n    }\n\n    return nerdamer;\n  }\n\n  nerdamer.clear = clear;\n  /**\n   * Clears all stored expressions.;\n   * Alias for nerdamer.clear('all')\n   */\n\n  function flush() {\n    clear('all');\n    return nerdamer;\n  }\n\n  nerdamer.flush = flush;\n  /**\n   *\n   * @param {boolean} asObject\n   * @param {boolean} asLaTeX\n   * @param {string|string[]} options\n   * @returns {Array}\n   */\n\n  function expressions(asObject, asLaTeX, options) {\n    var result = asObject ? {} : [];\n\n    for (var i = 0; i < EXPRESSIONS.length; i++) {\n      var eq = asLaTeX ? LaTeX_1.LaTeX.latex(EXPRESSIONS[i], options) : Utils.text(EXPRESSIONS[i], options);\n      asObject ? result[i + 1] = eq : result.push(eq);\n    }\n\n    return result;\n  }\n\n  nerdamer.expressions = expressions;\n  /**\n   * Registers a module function with nerdamer. The object needs to contain at a minimum, a name property (text),\n   * a numargs property (int), this is -1 for variable arguments or an array containing the min and max arguments,\n   * the visible property (bool) which allows use of this function through nerdamer, defaults to true, and a\n   * build property containing a function which returns the function to be used. This function is also handy for\n   * creating aliases to functions. See below how the alias D was created for the diff function).\n   * @param {object|object[]} obj\n   */\n\n  function register(obj) {\n    var core = defaultCore;\n\n    if (Array.isArray(obj)) {\n      for (var i = 0; i < obj.length; i++) {\n        if (obj) {\n          register(obj[i]);\n        }\n      }\n    } else if (obj && 'name' in obj && Settings_1.Settings.exclude.indexOf(obj.name) === -1) {\n      //make sure all the dependencies are available\n      if (obj.dependencies) {\n        for (var _i = 0; _i < obj.dependencies.length; _i++) {\n          if (!core[obj.dependencies[_i]]) throw new Error(Utils.format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[_i]));\n        }\n      } //if no parent object is provided then the function does not have an address and cannot be called directly\n\n\n      var parent_obj = obj.parent,\n          fn = obj.build.call(core); //call constructor to get function\n\n      if (parent_obj) {\n        if (!core[parent_obj]) core[obj.parent] = {};\n        var ref_obj = parent_obj === 'nerdamer' ? nerdamer : core[parent_obj]; //attach the function to the core\n\n        ref_obj[obj.name] = fn;\n      }\n\n      if (obj.visible) {\n        functionProvider.setFunctionDescriptor(obj.name, [fn, obj.numargs]); //make the function available\n      }\n    }\n  }\n\n  nerdamer.register = register;\n  /**\n   * Enforces rule: \"must start with a letter or underscore and\n   * can have any number of underscores, letters, and numbers thereafter.\"\n   * @param {string} name The name of the symbol being checked\n   * @param {string} type - The type of symbols that's being validated\n   * @throws {InvalidVariableNameError}  - Throws an exception on fail\n   */\n\n  function validateName(name) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'variable';\n    return Utils.validateName(name, type);\n  }\n\n  nerdamer.validateName = validateName;\n  /**\n   * This method can be used to check that the variable meets variable name requirements for nerdamer.\n   * Variable names Must start with a letter or underscore and may contains any combination of numbers,\n   * letters, and underscores after that.\n   * @param {string} varname The variable name being validated\n   * @returns {boolean} validates if the profided string is a valid variable name\n   */\n\n  function validVarName(varname) {\n    try {\n      Utils.validateName(varname);\n      return !variableDictionary.isReserved(varname);\n    } catch (e) {\n      return false;\n    }\n  }\n\n  nerdamer.validVarName = validVarName;\n  /**\n   * Array of functions currently supported by nerdamer\n   * @returns {Array}\n   */\n\n  function supported() {\n    return Object.keys(functionProvider.getFunctionDescriptors());\n  }\n\n  nerdamer.supported = supported;\n  /**\n   *\n   * @returns {Number} The number equations/expressions currently loaded\n   */\n\n  function numExpressions() {\n    return EXPRESSIONS.length;\n  }\n\n  nerdamer.numExpressions = numExpressions;\n  /**\n   * Sets a known value in nerdamer. This differs from setConstant as the value can be overridden trough\n   * the scope. See example. Set to \"delete\" or \"\" to unset\n   * @param {string} v The known value to be set\n   * @param {string|number|Expression} val The value for the expression to be set to.\n   * @returns {nerdamer} Returns the nerdamer object\n   */\n\n  function setVar(v, val) {\n    Utils.validateName(v); //check if it's not already a constant\n\n    if (variableDictionary.isConstant(v)) {\n      (0, Errors_1.err)('Cannot set value for constant ' + v);\n    }\n\n    if (val === 'delete' || val === '') {\n      variableDictionary.deleteVar(v);\n    } else {\n      var value = Utils.isSymbol(val) ? val : parser.parse(val);\n      variableDictionary.setVar(v, value);\n    }\n\n    return nerdamer;\n  }\n\n  nerdamer.setVar = setVar;\n  /**\n   * Returns the value of a set variable\n   * @param {string} v\n   * @returns {any}\n   */\n\n  function getVar(v) {\n    return variableDictionary.getVar(v);\n  }\n\n  nerdamer.getVar = getVar;\n  /**\n   * Gets all previously set variables.\n   * @param {string} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\n   * @param {string|string[]} options\n   * @returns {object} Returns an object with the variables\n   */\n\n  function getVars(output, options) {\n    output = output || 'text';\n    var variables = variableDictionary.getAllVars();\n\n    switch (output) {\n      case 'object':\n        return variables;\n\n      case 'latex':\n        return variables.map(function (v) {\n          return v.latex(options);\n        });\n\n      case 'text':\n        return variables.map(function (v) {\n          return v.text(options);\n        });\n    }\n\n    return {};\n  }\n\n  nerdamer.getVars = getVars;\n  /**\n   * Clear the variables from the VARS object\n   * @returns {Object} Returns the nerdamer object\n   */\n\n  function clearVars() {\n    variableDictionary.clearAllVars();\n    return nerdamer;\n  }\n\n  nerdamer.clearVars = clearVars;\n  /**\n   *\n   * @param {Function} loader\n   * @returns {nerdamer}\n   */\n\n  function load(loader) {\n    loader.call(nerdamer);\n    return nerdamer;\n  }\n\n  nerdamer.load = load;\n  /**\n   * Some settings within nerdamer can be changed if needed to accommodate your current needs.\n   * @param {string} setting The setting to be changed\n   * @param {any} value\n   */\n\n  function set(setting, value) {// FIXME: !!!\n    //current options:\n    //PARSE2NUMBER, suppress_errors\n    // if (typeof setting === 'object')\n    //     for (let x in setting) {\n    //         set(x, setting[x]);\n    //     }\n    //\n    // let disallowed = ['SAFE'];\n    // if (disallowed.indexOf(setting) !== -1)\n    //     err('Cannot modify setting: ' + setting);\n    //\n    // if (setting === 'PRECISION') {\n    //     bigDec.set({precision: value});\n    //     Settings.PRECISION = value;\n    //\n    //     // Avoid that nerdamer puts out garbage after 21 decimal place\n    //     if (value > 21) {\n    //         this.set('USE_BIG', true);\n    //     }\n    // }\n    // else if (setting === 'USE_LN' && value === true) {\n    //     //set log as LN\n    //     Settings.LOG = 'LN';\n    //     //set log10 as log\n    //     Settings.LOG10 = 'log';\n    //     //point the functions in the right direction\n    //\n    //     const logFunc = x => {\n    //         if (x.isConstant())\n    //             return new Symbol(Math.log10(x));\n    //         return symfunction(Settings.LOG10, [x]);\n    //     };\n    //\n    //     functionProvider.setFunctionDescriptor('log', [logFunc, [1, 2]])\n    //     functionProvider.setFunctionDescriptor('LN', Settings.LOG_FNS.log);\n    //\n    //     //remove log10\n    //     functionProvider.removeFunctionDescriptor('log10');\n    // }\n    // else {\n    //     Settings[setting] = value;\n    // }\n  }\n\n  nerdamer.set = set;\n  /**\n   * Get the value of a setting\n   * @param {type} setting\n   * @returns {undefined}\n   */\n\n  function get(setting) {\n    return Settings_1.Settings[setting];\n  }\n\n  nerdamer.get = get;\n\n  function replaceFunction(name, fn, num_args) {\n    var existing = functionProvider.getFunctionDescriptor(name);\n    var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\n    functionProvider.setFunctionDescriptor(name, [fn.call(undefined, existing[0], defaultCore), new_num_args]);\n  }\n\n  nerdamer.replaceFunction = replaceFunction;\n  /**\n   * Replaces nerdamer.setOperator\n   * @param {object} operator\n   * @param action\n   * @param {'over' | 'under'} shift\n   */\n\n  function setOperator(operator, action, shift) {\n    return operators.setOperator(operator, action, shift);\n  }\n\n  nerdamer.setOperator = setOperator;\n  /**\n   * Gets an opererator by its symbol\n   * @param {String} operator\n   * @returns {OperatorDescriptor}\n   */\n\n  function getOperator(operator) {\n    return operators.getOperator(operator);\n  }\n\n  nerdamer.getOperator = getOperator;\n\n  function aliasOperator(operator, withOperator) {\n    return operators.aliasOperator(operator, withOperator);\n  }\n\n  nerdamer.aliasOperator = aliasOperator;\n  /**\n   * Generates an RPN object which can be evaluated manually.\n   * @param {string} expression\n   */\n\n  function tree(expression) {\n    return parser.tree(expression);\n  }\n\n  nerdamer.tree = tree;\n  /**\n   * Generates the RPN for the expression using Expression.tree and then formats it to HTML.\n   * @param expression\n   * @param indent\n   */\n\n  function htmlTree(expression, indent) {\n    var tr = tree(expression);\n    return '<div class=\"tree\">\\n' + '    <ul>\\n' + '        <li>\\n' + tr.toHTML(3, indent) + '\\n' + '        </li>\\n' + '    </ul>\\n' + '</div>';\n  }\n\n  nerdamer.htmlTree = htmlTree;\n\n  function addPeeker(name, f) {\n    if (peekers[name]) {\n      peekers[name].push(f);\n    }\n  }\n\n  nerdamer.addPeeker = addPeeker;\n\n  function removePeeker(name, f) {\n    Utils.remove(peekers[name], f);\n  }\n\n  nerdamer.removePeeker = removePeeker;\n\n  function parse(e) {\n    return String(e).split(';').map(function (x) {\n      return parser.parse(x);\n    });\n  }\n\n  nerdamer.parse = parse;\n\n  var Nerdamer = /*#__PURE__*/function () {\n    function Nerdamer(expression, subs, options) {\n      _classCallCheck(this, Nerdamer);\n    }\n\n    _createClass(Nerdamer, null, [{\n      key: \"withModules\",\n      value: function withModules() {\n        return new Nerdamer();\n      }\n    }]);\n\n    return Nerdamer;\n  }();\n\n  nerdamer.Nerdamer = Nerdamer;\n  /**\n   * DEPRECATED! Added functions available immediately.\n   *\n   * This functions makes internal functions available externally\n   * @param {boolean} override Override the functions when calling api if it exists\n   * @deprecated\n   */\n\n  function api() {\n    var override = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  }\n\n  nerdamer.api = api;\n})(nerdamer || (nerdamer = {})); //Required<NerdamerBaseType> | CoreFunction\n\n\nvar proxy = new Proxy(nerdamer, {\n  get: function get(target, name) {\n    if (name in target) {\n      return target[name];\n    }\n\n    if (functionProvider.getFunctionDescriptor(name)) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        for (var i = 0; i < args.length; i++) {\n          args[i] = parser.parse(args[i]);\n        }\n\n        return new Expression_1.Expression(Utils.block('PARSE2NUMBER', function () {\n          return parser.callfunction(String(name), args);\n        }));\n      };\n    }\n\n    throw new Error('Requested non-existent property: ' + String(name));\n  }\n});\nexports.default = proxy;","map":{"version":3,"mappings":"cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AAOA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA,wC,CAGA;;;AACA,IAAMA,OAAO,GAAG,QAAhB,C,CACA;;AACAC,qBAAOC,GAAP,CAAW;EACPC,SAAS,EAAE;AADJ,CAAX;AAIA,IAAMC,WAAW,GAAG,IAAIC,WAAJ,EAApB;AACA,IAAIC,MAAM,GAAGF,WAAW,CAACG,MAAzB;AACA,IAAIC,gBAAgB,GAAGJ,WAAW,CAACI,gBAAnC;AACA,IAAIC,kBAAkB,GAAGL,WAAW,CAACK,kBAArC;AACA,IAAIC,WAAW,GAAGN,WAAW,CAACM,WAA9B;AACA,IAAIC,OAAO,GAAGP,WAAW,CAACO,OAA1B;AACA,IAAIC,SAAS,GAAGR,WAAW,CAACQ,SAA5B;AAMA;;;;;;;;;;;AAUA,SAASC,QAAT,CAAkBC,UAAlB,EAAmDC,IAAnD,EAA+EC,OAA/E,EAA4GC,QAA5G,EAA6H;EACzH;EACA,IAAIC,KAAK,GAAG,KAAZ,CAFyH,CAIzH;EACA;;EACA,IAAI,OAAOJ,UAAP,KAAsB,QAA1B,EAAoC;IAChCA,UAAU,GAAGA,UAAU,CAACK,QAAX,EAAb;EACH,CARwH,CAUzH;;;EACA,IAAIC,KAAK,GAAG,8CAA8CC,IAA9C,CAAmDP,UAAnD,CAAZ;;EACA,IAAIM,KAAJ,EAAW;IACP,OAAOP,QAAQ,CAACS,WAAT,CAAqBF,KAAK,CAAC,CAAD,CAA1B,EAA+BA,KAAK,CAAC,CAAD,CAAL,CAASG,KAAT,CAAe,GAAf,CAA/B,EAAoDH,KAAK,CAAC,CAAD,CAAzD,CAAP;EACH,CAdwH,CAiBzH;;;EACA,IAAI,CAACJ,OAAL,EAAc;IACVA,OAAO,GAAG,EAAV;EACH,CAFD,MAGK,IAAI,CAACQ,KAAK,CAACC,OAAN,CAAcT,OAAd,CAAL,EAA6B;IAC9BA,OAAO,GAAG,CAACA,OAAO,CAACG,QAAR,EAAD,CAAV;EACH;;EAEDH,OAAO,CAACU,OAAR,CAAgB,UAAUC,CAAV,EAAW;IACvB;IACA,IAAIA,CAAC,KAAK,OAAV,EAAmB;MACfT,KAAK,GAAG,IAAR;MACA;IACH,CALsB,CAMvB;IACA;;;IAEA,IAAIU,CAAC,GAAGpB,gBAAgB,CAACqB,qBAAjB,CAAuCF,CAAvC,CAAR,CATuB,CAUvB;IACA;;IACA,IAAIC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAAS,CAAlB,EAAqB;MACjBd,UAAU,aAAMa,CAAN,cAAWb,UAAX,MAAV;IACH;EACJ,CAfD;EAiBA,IAAIgB,CAAC,GAAGC,KAAK,CAACC,KAAN,CAAY,cAAZ,EAA4B;IAChC,OAAO1B,MAAM,CAAC2B,KAAP,CAAanB,UAAb,EAAyBC,IAAzB,CAAP;EACH,CAFO,EAELG,KAAK,IAAIgB,oBAASC,YAFb,CAAR;;EAIA,IAAIlB,QAAJ,EAAc;IACVP,WAAW,CAACO,QAAQ,GAAG,CAAZ,CAAX,GAA4Ba,CAA5B;EACH,CAFD,MAGK;IACDpB,WAAW,CAAC0B,IAAZ,CAAiBN,CAAjB;EACH;;EAED,OAAO,IAAIO,uBAAJ,CAAeP,CAAf,CAAP;AACH;;AAGD,WAAUjB,QAAV,EAAkB;EACd;;;;;EAKA,SAAgByB,GAAhB,CAAoBxB,UAApB,EAAsC;IAClC,OAAOR,MAAM,CAACiC,KAAP,CAAajC,MAAM,CAACkC,QAAP,CAAgB1B,UAAhB,CAAb,CAAP;EACH;;EAFeD,eAAGyB,GAAH;EAShB;;;;;;;EAMA,SAAgBG,cAAhB,CAA+B3B,UAA/B,EAAmDE,OAAnD,EAAkF;IAC9E,OAAOV,MAAM,CAACoC,KAAP,CAAa5B,UAAb,EAAyBE,OAAzB,CAAP;EACH;;EAFeH,0BAAc4B,cAAd;EAIhB;;;;;;EAKA,SAAgBE,gBAAhB,CAAiC7B,UAAjC,EAAmD;IAC/C,IAAI8B,GAAG,GAAGC,cAAMZ,KAAN,CAAY3B,MAAM,CAACkC,QAAP,CAAgB1B,UAAhB,CAAZ,CAAV;IACA,OAAO,IAAIuB,uBAAJ,CAAe/B,MAAM,CAAC2B,KAAP,CAAaW,GAAb,CAAf,CAAP;EACH;;EAHe/B,4BAAgB8B,gBAAhB;EAKhB;;;;;;EAKA,SAAgBG,OAAhB,CAAwBC,KAAxB,EAAsC;IAClC,IAAIA,KAAJ,EAAW;MACP,IAAI;QACA,OAAQ3C,WAAmB,CAAC2C,KAAD,CAAnB,CAA2BD,OAAnC;MACH,CAFD,CAGA,OAAMhB,CAAN,EAAS;QACL,OAAO,qBAAqBiB,KAArB,GAA6B,SAApC;MACH;IACJ;;IACD,OAAO/C,OAAP;EACH;;EAVea,mBAAOiC,OAAP;EAYhB;;;;;EAIA,SAAgBE,WAAhB,GAA2B;IACvB,OAAOjB,KAAK,CAACkB,QAAb;EACH;;EAFepC,uBAAWmC,WAAX;EAIhB;;;;;;;;EAOA,SAAgBE,WAAhB,CAA4BC,QAA5B,EAA8CC,KAA9C,EAAiF;IAC7ErB,KAAK,CAACsB,YAAN,CAAmBF,QAAnB;;IACA,IAAI,CAAC1C,kBAAkB,CAAC6C,UAAnB,CAA8BH,QAA9B,CAAL,EAA8C;MAC1C;MACA,IAAIC,KAAK,KAAK,QAAV,IAAsBA,KAAK,KAAK,EAApC,EAAwC;QACpC3C,kBAAkB,CAAC8C,cAAnB,CAAkCJ,QAAlC;MACH,CAFD,MAGK;QACD;QACA;QACA;QACA;QACA1C,kBAAkB,CAACyC,WAAnB,CAA+BC,QAA/B,EAAyCC,KAAzC;MACH;IACJ;;IAED,OAAOvC,QAAP;EACH;;EAjBeA,uBAAWqC,WAAX;EAmBhB;;;;;;EAKA,SAAgBM,WAAhB,CAA4BL,QAA5B,EAA4C;IACxC,OAAOM,MAAM,CAAChD,kBAAkB,CAAC+C,WAAnB,CAA+BL,QAA/B,CAAD,CAAb;EACH;;EAFetC,uBAAW2C,WAAX;EAIhB;;;;;;;;;EAQA,SAAgBlC,WAAhB,CAA4BoC,IAA5B,EAA0CC,YAA1C,EAAkEC,IAAlE,EAA8E;IAC1EtD,MAAM,CAACgB,WAAP,CAAmBoC,IAAnB,EAAyBC,YAAzB,EAAuCC,IAAvC;EACH;;EAFe/C,uBAAWS,WAAX;EAIhB;;;;;EAIA,SAAgBuC,OAAhB,GAAuB;IACnB,OAAOzD,WAAP;EACH;;EAFeS,mBAAOgD,OAAP;EAIhB;;;;;;EAKA,SAAgBC,aAAhB,CAA8BC,iBAA9B,EAAgF;IAAA,IAAdC,MAAc,uEAAL,KAAK;IAC5E,OAAO3B,wBAAWyB,aAAX,CAAyBC,iBAAzB,EAA4CC,MAA5C,CAAP;EACH;;EAFenD,yBAAaiD,aAAb;EAGHjD,uBAAciD,aAAd;EAEb;;;;;;EAKA,SAAgBG,QAAhB,GAAiD;IAAA,IAAxBC,OAAwB,uEAAL,KAAK;IAC7C,IAAID,QAAQ,GAAGxD,kBAAkB,CAAC0D,WAAnB,EAAf;;IACA,IAAID,OAAJ,EAAa;MACT,OAAOD,QAAP;IACH;;IACD,OAAOA,QAAQ,CAACG,IAAT,CAAc,IAAd,CAAP;EACH;;EANevD,oBAAQoD,QAAR;EAQhB;;;;;;;;EAOA,SAAgBI,KAAhB,CAAsBC,eAAtB,EAA2G;IAAA,IAAvCC,sBAAuC,uEAAL,KAAK;;IACvG,IAAID,eAAe,KAAK,KAAxB,EAA+B;MAC3B5D,WAAW,CAAC8D,MAAZ,CAAmB,CAAnB,EAAsB9D,WAAW,CAAC+D,MAAlC;IACH,CAFD,MAGK,IAAIH,eAAe,KAAK,MAAxB,EAAgC;MACjC5D,WAAW,CAACgE,GAAZ;IACH,CAFI,MAGA,IAAIJ,eAAe,KAAK,OAAxB,EAAiC;MAClC5D,WAAW,CAACiE,KAAZ;IACH,CAFI,MAGA;MACD,IAAIC,KAAK,GAAG,CAACN,eAAD,GAAmB5D,WAAW,CAAC+D,MAA/B,GAAwCH,eAAe,GAAG,CAAtE;MACAC,sBAAsB,GAAG7D,WAAW,CAACkE,KAAD,CAAX,GAAqBC,SAAxB,GAAoC9C,KAAK,CAAC+C,MAAN,CAAapE,WAAb,EAA0BkE,KAA1B,CAA1D;IACH;;IAED,OAAO/D,QAAP;EACH;;EAhBeA,iBAAKwD,KAAL;EAkBhB;;;;;EAIA,SAAgBU,KAAhB,GAAqB;IACjBV,KAAK,CAAC,KAAD,CAAL;IACA,OAAOxD,QAAP;EACH;;EAHeA,iBAAKkE,KAAL;EAKhB;;;;;;;;EAOA,SAAgBC,WAAhB,CAA4BC,QAA5B,EAA+CC,OAA/C,EAAiElE,OAAjE,EAAyF;IACrF,IAAImE,MAAM,GAAQF,QAAQ,GAAG,EAAH,GAAQ,EAAlC;;IACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1E,WAAW,CAAC+D,MAAhC,EAAwCW,CAAC,EAAzC,EAA6C;MACzC,IAAIC,EAAE,GAAGH,OAAO,GAAGrC,cAAMyC,KAAN,CAAY5E,WAAW,CAAC0E,CAAD,CAAvB,EAA4BpE,OAA5B,CAAH,GAA0Ce,KAAK,CAACwD,IAAN,CAAW7E,WAAW,CAAC0E,CAAD,CAAtB,EAA2BpE,OAA3B,CAA1D;MACAiE,QAAQ,GAAGE,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,GAAgBC,EAAnB,GAAwBF,MAAM,CAAC/C,IAAP,CAAYiD,EAAZ,CAAhC;IACH;;IACD,OAAOF,MAAP;EACH;;EAPetE,uBAAWmE,WAAX;EAShB;;;;;;;;;EAQA,SAAgBQ,QAAhB,CAAyBC,GAAzB,EAAiC;IAC7B,IAAIC,IAAI,GAAQtF,WAAhB;;IAEA,IAAIoB,KAAK,CAACC,OAAN,CAAcgE,GAAd,CAAJ,EAAwB;MACpB,KAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,GAAG,CAAChB,MAAxB,EAAgCW,CAAC,EAAjC,EAAqC;QACjC,IAAIK,GAAJ,EAAS;UACLD,QAAQ,CAACC,GAAG,CAACL,CAAD,CAAJ,CAAR;QACH;MACJ;IACJ,CAND,MAOK,IAAIK,GAAG,IAAI,UAAUA,GAAjB,IAAwBvD,oBAASyD,OAAT,CAAiBC,OAAjB,CAAyBH,GAAG,CAAC/B,IAA7B,MAAuC,CAAC,CAApE,EAAuE;MACxE;MACA,IAAI+B,GAAG,CAACI,YAAR,EAAsB;QAClB,KAAK,IAAIT,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGK,GAAG,CAACI,YAAJ,CAAiBpB,MAArC,EAA6CW,EAAC,EAA9C;UACI,IAAI,CAACM,IAAI,CAACD,GAAG,CAACI,YAAJ,CAAiBT,EAAjB,CAAD,CAAT,EACI,MAAM,IAAIU,KAAJ,CAAU/D,KAAK,CAACgE,MAAN,CAAa,gCAAb,EAA+CN,GAAG,CAAC/B,IAAnD,EAAyD+B,GAAG,CAACI,YAAJ,CAAiBT,EAAjB,CAAzD,CAAV,CAAN;QAFR;MAGH,CANuE,CAOxE;;;MACA,IAAIY,UAAU,GAAGP,GAAG,CAACQ,MAArB;MAAA,IACIC,EAAE,GAAGT,GAAG,CAACU,KAAJ,CAAUC,IAAV,CAAeV,IAAf,CADT,CARwE,CASzC;;MAC/B,IAAIM,UAAJ,EAAgB;QACZ,IAAI,CAACN,IAAI,CAACM,UAAD,CAAT,EACIN,IAAI,CAACD,GAAG,CAACQ,MAAL,CAAJ,GAAmB,EAAnB;QAEJ,IAAII,OAAO,GAAGL,UAAU,KAAK,UAAf,GAA4BnF,QAA5B,GAAuC6E,IAAI,CAACM,UAAD,CAAzD,CAJY,CAKZ;;QACAK,OAAO,CAACZ,GAAG,CAAC/B,IAAL,CAAP,GAAoBwC,EAApB;MACH;;MAED,IAAIT,GAAG,CAACa,OAAR,EAAiB;QACb9F,gBAAgB,CAAC+F,qBAAjB,CAAuCd,GAAG,CAAC/B,IAA3C,EAAiD,CAACwC,EAAD,EAAKT,GAAG,CAACe,OAAT,CAAjD,EADa,CACwD;MACxE;IACJ;EACJ;;EAjCe3F,oBAAQ2E,QAAR;EAmChB;;;;;;;;EAOA,SAAgBnC,YAAhB,CAA6BK,IAA7B,EAAoE;IAAA,IAAzB+C,IAAyB,uEAAV,UAAU;IAChE,OAAO1E,KAAK,CAACsB,YAAN,CAAmBK,IAAnB,EAAyB+C,IAAzB,CAAP;EACH;;EAFe5F,wBAAYwC,YAAZ;EAIhB;;;;;;;;EAOA,SAAgBqD,YAAhB,CAA6BC,OAA7B,EAA4C;IACxC,IAAI;MACA5E,KAAK,CAACsB,YAAN,CAAmBsD,OAAnB;MACA,OAAO,CAAClG,kBAAkB,CAAC6C,UAAnB,CAA8BqD,OAA9B,CAAR;IACH,CAHD,CAIA,OAAM7E,CAAN,EAAS;MACL,OAAO,KAAP;IACH;EACJ;;EARejB,wBAAY6F,YAAZ;EAUhB;;;;;EAIA,SAAgBE,SAAhB,GAAyB;IACrB,OAAOC,MAAM,CAACC,IAAP,CAAYtG,gBAAgB,CAACuG,sBAAjB,EAAZ,CAAP;EACH;;EAFelG,qBAAS+F,SAAT;EAIhB;;;;;EAIA,SAAgBI,cAAhB,GAA8B;IAC1B,OAAOtG,WAAW,CAAC+D,MAAnB;EACH;;EAFe5D,0BAAcmG,cAAd;EAIhB;;;;;;;;EAOA,SAAgBC,MAAhB,CAAuBC,CAAvB,EAAkCC,GAAlC,EAA+D;IAC3DpF,KAAK,CAACsB,YAAN,CAAmB6D,CAAnB,EAD2D,CAE3D;;IACA,IAAIzG,kBAAkB,CAAC2G,UAAnB,CAA8BF,CAA9B,CAAJ,EAAsC;MAClC,kBAAI,mCAAmCA,CAAvC;IACH;;IACD,IAAIC,GAAG,KAAK,QAAR,IAAoBA,GAAG,KAAK,EAAhC,EAAoC;MAChC1G,kBAAkB,CAAC4G,SAAnB,CAA6BH,CAA7B;IACH,CAFD,MAGK;MACD,IAAI9D,KAAK,GAAGrB,KAAK,CAACuF,QAAN,CAAeH,GAAf,IAAsBA,GAAtB,GAA4B7G,MAAM,CAAC2B,KAAP,CAAakF,GAAb,CAAxC;MACA1G,kBAAkB,CAACwG,MAAnB,CAA0BC,CAA1B,EAA6B9D,KAA7B;IACH;;IACD,OAAOvC,QAAP;EACH;;EAdeA,kBAAMoG,MAAN;EAgBhB;;;;;;EAKA,SAAgBM,MAAhB,CAAuBL,CAAvB,EAAgC;IAC5B,OAAOzG,kBAAkB,CAAC8G,MAAnB,CAA0BL,CAA1B,CAAP;EACH;;EAFerG,kBAAM0G,MAAN;EAIhB;;;;;;;EAMA,SAAgBC,OAAhB,CAAwBC,MAAxB,EAAwCzG,OAAxC,EAAgE;IAC5DyG,MAAM,GAAGA,MAAM,IAAI,MAAnB;IACA,IAAIC,SAAS,GAAGjH,kBAAkB,CAACkH,UAAnB,EAAhB;;IAEA,QAAQF,MAAR;MACI,KAAK,QAAL;QAAe,OAAOC,SAAP;;MACf,KAAK,OAAL;QAAc,OAAOA,SAAS,CAACE,GAAV,CAAc,UAACV,CAAD;UAAA,OAAYA,CAAC,CAAC5B,KAAF,CAAQtE,OAAR,CAAZ;QAAA,CAAd,CAAP;;MACd,KAAK,MAAL;QAAa,OAAO0G,SAAS,CAACE,GAAV,CAAc,UAACV,CAAD;UAAA,OAAYA,CAAC,CAAC3B,IAAF,CAAOvE,OAAP,CAAZ;QAAA,CAAd,CAAP;IAHjB;;IAMA,OAAO,EAAP;EACH;;EAXeH,mBAAO2G,OAAP;EAahB;;;;;EAIA,SAAgBK,SAAhB,GAAyB;IACrBpH,kBAAkB,CAACqH,YAAnB;IACA,OAAOjH,QAAP;EACH;;EAHeA,qBAASgH,SAAT;EAKhB;;;;;;EAKA,SAAgBE,IAAhB,CAAqBC,MAArB,EAAuC;IACnCA,MAAM,CAAC5B,IAAP,CAAYvF,QAAZ;IACA,OAAOA,QAAP;EACH;;EAHeA,gBAAIkH,IAAJ;EAKhB;;;;;;EAKA,SAAgB7H,GAAhB,CAAuE+H,OAAvE,EAAmF7E,KAAnF,EAA2F,CACvF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACH;;EA5CevC,eAAGX,GAAH;EA8ChB;;;;;;EAKA,SAAgBgI,GAAhB,CAAuED,OAAvE,EAAiF;IAC7E,OAAO/F,oBAAS+F,OAAT,CAAP;EACH;;EAFepH,eAAGqH,GAAH;;EAIhB,SAAgBC,eAAhB,CAAgCzE,IAAhC,EAA8CwC,EAA9C,EAA2EkC,QAA3E,EAA2G;IACvG,IAAIC,QAAQ,GAAG7H,gBAAgB,CAACqB,qBAAjB,CAAuC6B,IAAvC,CAAf;IACA,IAAI4E,YAAY,GAAG,OAAOF,QAAP,KAAoB,WAApB,GAAkCC,QAAQ,CAAC,CAAD,CAA1C,GAAgDD,QAAnE;IACA5H,gBAAgB,CAAC+F,qBAAjB,CAAuC7C,IAAvC,EAA6C,CAACwC,EAAE,CAACE,IAAH,CAAQvB,SAAR,EAAmBwD,QAAQ,CAAC,CAAD,CAA3B,EAAgCjI,WAAhC,CAAD,EAA+CkI,YAA/C,CAA7C;EACH;;EAJezH,2BAAesH,eAAf;EAMhB;;;;;;;EAMA,SAAgBI,WAAhB,CAA4BC,QAA5B,EAA0DC,MAA1D,EAA0F9D,KAA1F,EAAkH;IAC9G,OAAO/D,SAAS,CAAC2H,WAAV,CAAsBC,QAAtB,EAAgCC,MAAhC,EAAwC9D,KAAxC,CAAP;EACH;;EAFe9D,uBAAW0H,WAAX;EAIhB;;;;;;EAKA,SAAgBG,WAAhB,CAA4BF,QAA5B,EAA4C;IACxC,OAAO5H,SAAS,CAAC8H,WAAV,CAAsBF,QAAtB,CAAP;EACH;;EAFe3H,uBAAW6H,WAAX;;EAIhB,SAAgBC,aAAhB,CAA8BH,QAA9B,EAAgDI,YAAhD,EAAoE;IAChE,OAAOhI,SAAS,CAAC+H,aAAV,CAAwBH,QAAxB,EAAkCI,YAAlC,CAAP;EACH;;EAFe/H,yBAAa8H,aAAb;EAIhB;;;;;EAIA,SAAgBE,IAAhB,CAAqB/H,UAArB,EAAuC;IACnC,OAAOR,MAAM,CAACuI,IAAP,CAAY/H,UAAZ,CAAP;EACH;;EAFeD,gBAAIgI,IAAJ;EAIhB;;;;;;EAKA,SAAgBC,QAAhB,CAAyBhI,UAAzB,EAA6CiI,MAA7C,EAA2D;IACvD,IAAIC,EAAE,GAAGH,IAAI,CAAC/H,UAAD,CAAb;IAEA,OAAO,yBACH,YADG,GAEH,gBAFG,GAGHkI,EAAE,CAACC,MAAH,CAAU,CAAV,EAAaF,MAAb,CAHG,GAGoB,IAHpB,GAIH,iBAJG,GAKH,aALG,GAMH,QANJ;EAOH;;EAVelI,oBAAQiI,QAAR;;EAYhB,SAAgBI,SAAhB,CAA0BxF,IAA1B,EAAwC9B,CAAxC,EAA8C;IAC1C,IAAIjB,OAAO,CAAC+C,IAAD,CAAX,EAAmB;MACf/C,OAAO,CAAC+C,IAAD,CAAP,CAActB,IAAd,CAAmBR,CAAnB;IACH;EACJ;;EAJef,qBAASqI,SAAT;;EAMhB,SAAgBC,YAAhB,CAA6BzF,IAA7B,EAA2C9B,CAA3C,EAAiD;IAC7CG,KAAK,CAAC+C,MAAN,CAAanE,OAAO,CAAC+C,IAAD,CAApB,EAA4B9B,CAA5B;EACH;;EAFef,wBAAYsI,YAAZ;;EAIhB,SAAgBlH,KAAhB,CAAsBH,CAAtB,EAA+B;IAC3B,OAAO2B,MAAM,CAAC3B,CAAD,CAAN,CAAUP,KAAV,CAAgB,GAAhB,EAAqBqG,GAArB,CAAyB,UAAUwB,CAAV,EAAW;MACvC,OAAO9I,MAAM,CAAC2B,KAAP,CAAamH,CAAb,CAAP;IACH,CAFM,CAAP;EAGH;;EAJevI,iBAAKoB,KAAL;;EArdF,IA4dDoH,QA5dC;IA6dV,kBAAYvI,UAAZ,EAA8CC,IAA9C,EAA0EC,OAA1E,EAAqG;MAAA;IACpG;;IA9dS;MAAA;MAAA,OAgeV,uBAAmD;QAC/C,OAAO,IAAIqI,QAAJ,EAAP;MACH;IAleS;;IAAA;EAAA;;EA4dDxI,oBAAQwI,QAAR;EASb;;;;;;;;EAOA,SAAgBC,GAAhB,GAA6C;IAAA,IAAzBC,QAAyB,uEAAL,KAAK;EAAK;;EAAlC1I,eAAGyI,GAAH;AACnB,CA7eD,EAAUzI,QAAQ,KAARA,QAAQ,MAAlB,E,CA+eA;;;AAEA,IAAM2I,KAAK,GAAqC,IAAIC,KAAJ,CAAU5I,QAAV,EAAoB;EAChEqH,GAAG,EAAE,aAACwB,MAAD,EAA2BhG,IAA3B,EAA2D;IAC5D,IAAIA,IAAI,IAAIgG,MAAZ,EAAoB;MAChB,OAAOA,MAAM,CAAChG,IAAD,CAAb;IACH;;IAED,IAAIlD,gBAAgB,CAACqB,qBAAjB,CAAuC6B,IAAvC,CAAJ,EAAkD;MAC9C,OAAO,YAAmB;QAAA,kCAAfiG,IAAe;UAAfA,IAAe;QAAA;;QACtB,KAAK,IAAIvE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuE,IAAI,CAAClF,MAAzB,EAAiCW,CAAC,EAAlC,EAAsC;UAClCuE,IAAI,CAACvE,CAAD,CAAJ,GAAU9E,MAAM,CAAC2B,KAAP,CAAa0H,IAAI,CAACvE,CAAD,CAAjB,CAAV;QACH;;QAED,OAAO,IAAI/C,uBAAJ,CAAeN,KAAK,CAACC,KAAN,CAAY,cAAZ,EAA4B,YAAK;UACnD,OAAO1B,MAAM,CAACsJ,YAAP,CAAoBnG,MAAM,CAACC,IAAD,CAA1B,EAAkCiG,IAAlC,CAAP;QACH,CAFqB,CAAf,CAAP;MAGH,CARD;IASH;;IAED,MAAM,IAAI7D,KAAJ,CAAU,sCAAsCrC,MAAM,CAACC,IAAD,CAAtD,CAAN;EACH;AAnB+D,CAApB,CAAhD;AAsBAmG,kBAAeL,KAAf","names":["VERSION","decimal_js_1","set","precision","defaultCore","Core_1","parser","PARSER","functionProvider","variableDictionary","EXPRESSIONS","peekers","operators","nerdamer","expression","subs","options","location","numer","toString","fndec","exec","setFunction","split","Array","isArray","forEach","o","f","getFunctionDescriptor","e","Utils","block","parse","Settings_1","PARSE2NUMBER","push","Expression_1","rpn","toRPN","tokenize","convertToLaTeX","toTeX","convertFromLaTeX","txt","LaTeX_1","version","addon","getWarnings","WARNINGS","setConstant","constant","value","validateName","isReserved","deleteConstant","getConstant","String","name","params_array","body","getCore","getExpression","expression_number","asType","reserved","asArray","getReserved","join","clear","equation_number","keep_EXPRESSIONS_fixed","splice","length","pop","shift","index","undefined","remove","flush","expressions","asObject","asLaTeX","result","i","eq","latex","text","register","obj","core","exclude","indexOf","dependencies","Error","format","parent_obj","parent","fn","build","call","ref_obj","visible","setFunctionDescriptor","numargs","type","validVarName","varname","supported","Object","keys","getFunctionDescriptors","numExpressions","setVar","v","val","isConstant","deleteVar","isSymbol","getVar","getVars","output","variables","getAllVars","map","clearVars","clearAllVars","load","loader","setting","get","replaceFunction","num_args","existing","new_num_args","setOperator","operator","action","getOperator","aliasOperator","withOperator","tree","htmlTree","indent","tr","toHTML","addPeeker","removePeeker","x","Nerdamer","api","override","proxy","Proxy","target","args","callfunction","exports"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
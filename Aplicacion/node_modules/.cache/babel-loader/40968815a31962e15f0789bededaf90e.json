{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\src\\\\Graph.js\";\nimport React from \"react\";\nimport { useCallback, useEffect } from \"react\";\nimport ReactFlow, { addEdge, Background, useNodesState, useEdgesState, MarkerType } from \"react-flow-renderer\";\nimport PrimitiveNode from \"./PrimitiveNode.js\";\nimport BooleanNode from \"./BooleanNode.js\";\nimport ButtonEdge from \"./ButtonEdge\";\nimport ShaderNode from \"./ShaderNode.js\";\nimport TestNode from \"./TestNode.js\";\nimport \"./styles.css\";\nimport { GraphProvider } from \"./GraphContext.js\";\nvar nodeTypes = {\n  primitiveNode: PrimitiveNode,\n  booleanNode: BooleanNode,\n  shaderNode: TestNode\n};\nvar edgeTypes = {\n  buttonEdge: ButtonEdge\n};\nvar initialNodes = [{\n  id: \"0\",\n  type: \"shaderNode\",\n  position: {\n    x: 0,\n    y: 0\n  },\n  data: {\n    sdfs: {\n      nodeId: \"sphere(1.0)\"\n    },\n    children: []\n  }\n}];\nvar initialEdges = [];\n\nvar onInit = function onInit(reactFlowInstance) {\n  return console.log(\"flow loaded:\", reactFlowInstance);\n};\n\nexport default function Graph() {\n  var _useNodesState = useNodesState(initialNodes),\n      _useNodesState2 = _slicedToArray(_useNodesState, 3),\n      nodes = _useNodesState2[0],\n      setNodes = _useNodesState2[1],\n      onNodesChange = _useNodesState2[2];\n\n  var _useEdgesState = useEdgesState([]),\n      _useEdgesState2 = _slicedToArray(_useEdgesState, 3),\n      edges = _useEdgesState2[0],\n      setEdges = _useEdgesState2[1],\n      onEdgesChange = _useEdgesState2[2];\n\n  var _React$useState = React.useState(3),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      id = _React$useState2[0],\n      setId = _React$useState2[1];\n\n  var updateNodeSdf = function updateNodeSdf(id, newSdf, parent) {\n    console.log(\"ACTUALIZADONDO SDF DE \" + id);\n    var foundNode = null;\n    setNodes(function (nds) {\n      return nds.map(function (node) {\n        if (node.id === id) {\n          foundNode = node;\n          console.log(\"!s\");\n          console.log(foundNode);\n          var newSdfs = node.data.sdfs;\n          newSdfs[\"\".concat(parent)] = newSdf;\n          node.data = _objectSpread(_objectSpread({}, node.data), {}, {\n            sdfs: newSdfs\n          });\n          console.log(\"HIJOS DE \" + id + \": \");\n          console.log(node.data.children);\n          node.data.children.forEach(function (child) {\n            console.log(\"\\tACTUALIZANDO HIJO \" + child);\n            if (child != id) updateNodeSdf(child, newSdf, id);\n          });\n        }\n\n        return node;\n      });\n    });\n    console.log(\"enco\");\n    console.log(foundNode);\n  };\n\n  var connectSdf = function connectSdf(sourceId, targetId, params) {\n    var sourceNode = nodes.find(function (n) {\n      return n.id === sourceId;\n    });\n    var newSdfs = nodes.find(function (n) {\n      return n.id === targetId;\n    }).data.sdfs;\n    newSdfs[\"\".concat(sourceId)] = sourceNode.data.sdf;\n    console.log(newSdfs);\n    setNodes(function (nds) {\n      return nds.map(function (node) {\n        if (node.id === targetId) {\n          console.log(\"FOUND\");\n          node.data = _objectSpread(_objectSpread({}, node.data), {}, {\n            sdfs: newSdfs\n          });\n        }\n\n        onNodesChange([node]);\n        return node;\n      });\n    });\n  };\n\n  var removeEdge = function removeEdge(edgeId) {\n    var newEdges = edges.filter(function (edge) {\n      console.log(edge.source);\n      return edge.id != edgeId;\n    });\n    setEdges(newEdges);\n  };\n\n  var sharedFunctions = {\n    updateNodeSdf: updateNodeSdf,\n    connectSdf: connectSdf\n  };\n\n  var onConnect = function onConnect(params) {\n    var sourceNode = nodes.find(function (n) {\n      return n.id === params.source;\n    });\n    setEdges(function (eds) {\n      return addEdge(_objectSpread(_objectSpread({}, params), {}, {\n        type: \"buttonEdge\",\n        animated: true,\n        markerEnd: {\n          type: MarkerType.Arrow,\n          color: \"#000\"\n        },\n        data: {\n          onRemoveEdge: removeEdge\n        }\n      }), eds);\n    });\n    console.log(params);\n    var newChildren = nodes.find(function (n) {\n      return n.id === params.target;\n    }).data.children; // var newChildren = nodes.find((n) => n.id === params.target);\n\n    console.log(newChildren);\n    newChildren.push(params.target);\n    setNodes(function (nds) {\n      return nds.map(function (node) {\n        if (node.id === params.source) {\n          console.log(\"A\\xD1ADIDO HIJO \".concat(params.target, \" A \").concat(params.source));\n          node.data = _objectSpread(_objectSpread({}, node.data), {}, {\n            children: newChildren\n          });\n        }\n\n        onNodesChange([node]);\n        return node;\n      });\n    });\n  };\n\n  useEffect(function () {\n    console.log(\"NODOS ACTUALIZADOS\");\n    console.log(nodes);\n  }, [nodes]);\n  useEffect(function () {\n    console.log(\"NUEVO EDGE:\");\n    console.log(edges);\n  }, [edges]);\n\n  var newPrimitiveNode = function newPrimitiveNode() {\n    var xPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var yPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    setId(id + 1);\n    var nodeId = \"node-\".concat(id);\n    return {\n      id: nodeId,\n      type: \"primitiveNode\",\n      position: {\n        x: xPos,\n        y: yPos\n      },\n      data: {\n        sdfs: {\n          nodeId: \"sphere(1.0)\"\n        },\n        children: []\n      }\n    };\n  };\n\n  var newBooleanNode = function newBooleanNode() {\n    var xPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var yPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    setId(id + 1);\n    return {\n      id: \"node-\".concat(id),\n      type: \"booleanNode\",\n      position: {\n        x: xPos,\n        y: yPos\n      },\n      data: {\n        sdfs: {},\n        children: []\n      }\n    };\n  };\n\n  var handleKey = function handleKey(e) {\n    // SPACE BAR\n    if (e.key === \"p\") {\n      var node = newPrimitiveNode();\n      nodes.push(node);\n      onNodesChange([node]); // Para actualizar\n    } else if (e.key === \"b\") {\n      var _node = newBooleanNode();\n\n      nodes.push(_node);\n      onNodesChange([_node]); // Para actualizar\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"100vh\"\n    },\n    tabIndex: \"0\",\n    onKeyDown: handleKey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GraphProvider, {\n    value: sharedFunctions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ReactFlow, {\n    nodes: nodes,\n    edges: edges,\n    onNodesChange: onNodesChange,\n    onEdgesChange: onEdgesChange,\n    onConnect: onConnect // onDisconnect={onDisconnect}\n    ,\n    nodeTypes: nodeTypes,\n    edgeTypes: edgeTypes,\n    onInit: onInit,\n    onEdgeClick: function onEdgeClick(ev, edge) {\n      return setEdges(edges.filter(function (e) {\n        return e.id != edge.id;\n      }));\n    },\n    snapToGrid: true,\n    fitView: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Background, {\n    color: \"#aaa\",\n    gap: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"names":["React","useCallback","useEffect","ReactFlow","addEdge","Background","useNodesState","useEdgesState","MarkerType","PrimitiveNode","BooleanNode","ButtonEdge","ShaderNode","TestNode","GraphProvider","nodeTypes","primitiveNode","booleanNode","shaderNode","edgeTypes","buttonEdge","initialNodes","id","type","position","x","y","data","sdfs","nodeId","children","initialEdges","onInit","reactFlowInstance","console","log","Graph","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","useState","setId","updateNodeSdf","newSdf","parent","foundNode","nds","map","node","newSdfs","forEach","child","connectSdf","sourceId","targetId","params","sourceNode","find","n","sdf","removeEdge","edgeId","newEdges","filter","edge","source","sharedFunctions","onConnect","eds","animated","markerEnd","Arrow","color","onRemoveEdge","newChildren","target","push","newPrimitiveNode","xPos","yPos","newBooleanNode","handleKey","e","key","height","ev"],"sources":["C:/Users/daniz/TFG/Aplicacion/src/Graph.js"],"sourcesContent":["import React from \"react\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"react-flow-renderer\";\r\nimport PrimitiveNode from \"./PrimitiveNode.js\";\r\nimport BooleanNode from \"./BooleanNode.js\";\r\nimport ButtonEdge from \"./ButtonEdge\";\r\nimport ShaderNode from \"./ShaderNode.js\";\r\nimport TestNode from \"./TestNode.js\";\r\n\r\nimport \"./styles.css\";\r\nimport { GraphProvider } from \"./GraphContext.js\";\r\n\r\nconst nodeTypes = { primitiveNode: PrimitiveNode, booleanNode: BooleanNode, shaderNode: TestNode };\r\nconst edgeTypes = { buttonEdge: ButtonEdge };\r\n\r\nconst initialNodes = [\r\n  {id: \"0\",\r\n    type: \"shaderNode\",\r\n    position: { x: 0, y: 0 },\r\n    data: {\r\n      sdfs: { nodeId: \"sphere(1.0)\" },\r\n      children: [],\r\n    }}\r\n  \r\n];\r\n\r\nconst initialEdges = [];\r\n\r\nconst onInit = (reactFlowInstance) =>\r\n  console.log(\"flow loaded:\", reactFlowInstance);\r\n\r\nexport default function Graph() {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const [id, setId] = React.useState(3);\r\n\r\n  const updateNodeSdf = (id, newSdf, parent) => {\r\n    console.log(\"ACTUALIZADONDO SDF DE \" + id);\r\n   var foundNode = null;\r\n  \r\n  \r\n   setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === id) {\r\n          foundNode = node;\r\n          console.log(\"!s\");\r\n          console.log(foundNode);\r\n          var newSdfs = node.data.sdfs;\r\n          newSdfs[`${parent}`] = newSdf;\r\n\r\n          node.data = {\r\n            ...node.data,\r\n            sdfs: newSdfs,\r\n          };\r\n\r\n\r\n          console.log(\"HIJOS DE \" + id + \": \");\r\n          console.log(node.data.children);\r\n          node.data.children.forEach((child) => {\r\n            console.log(\"\\tACTUALIZANDO HIJO \" + child);\r\n            if(child!=id)\r\n              updateNodeSdf(child, newSdf, id);\r\n          });\r\n          \r\n        }\r\n\r\n        return node;\r\n      })\r\n    );\r\n\r\n    console.log(\"enco\");\r\n    console.log(foundNode);\r\n    \r\n  };\r\n\r\n  const connectSdf = (sourceId, targetId, params) => {\r\n    const sourceNode = nodes.find((n) => n.id === sourceId);\r\n    var newSdfs = nodes.find((n) => n.id === targetId).data.sdfs;\r\n    newSdfs[`${sourceId}`] = sourceNode.data.sdf;\r\n\r\n    console.log(newSdfs);\r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === targetId) {\r\n          console.log(\"FOUND\");\r\n          node.data = {\r\n            ...node.data,\r\n            sdfs: newSdfs,\r\n          };\r\n        }\r\n\r\n        onNodesChange([node]);\r\n        return node;\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeEdge = (edgeId) => {\r\n    var newEdges = edges.filter((edge) => {\r\n      console.log(edge.source);\r\n      return edge.id != edgeId;\r\n    });\r\n\r\n    setEdges(newEdges);\r\n  };\r\n\r\n  const sharedFunctions = {\r\n    updateNodeSdf,\r\n    connectSdf,\r\n  };\r\n\r\n  const onConnect = (params) => {\r\n    const sourceNode = nodes.find((n) => n.id === params.source);\r\n\r\n    setEdges((eds) =>\r\n      addEdge(\r\n        {\r\n          ...params,\r\n          type: \"buttonEdge\",\r\n          animated: true,\r\n          markerEnd: { type: MarkerType.Arrow, color: \"#000\" },\r\n          data: { onRemoveEdge: removeEdge },\r\n        },\r\n        eds\r\n      )\r\n    );\r\n\r\n    console.log(params);\r\n    var newChildren = nodes.find((n) => n.id === params.target).data.children;\r\n    // var newChildren = nodes.find((n) => n.id === params.target);\r\n\r\n    console.log(newChildren);\r\n    newChildren.push(params.target);\r\n\r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === params.source) {\r\n          console.log(`AÑADIDO HIJO ${params.target} A ${params.source}`);\r\n          node.data = {\r\n            ...node.data,\r\n            children: newChildren,\r\n          };\r\n        }\r\n\r\n        onNodesChange([node]);\r\n        return node;\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"NODOS ACTUALIZADOS\");\r\n    console.log(nodes);\r\n  }, [nodes]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"NUEVO EDGE:\");\r\n    console.log(edges);\r\n  }, [edges]);\r\n\r\n  const newPrimitiveNode = (xPos = 0, yPos = 0) => {\r\n    setId(id + 1);\r\n    const nodeId = `node-${id}`;\r\n    return {\r\n      id: nodeId,\r\n      type: \"primitiveNode\",\r\n      position: { x: xPos, y: yPos },\r\n      data: {\r\n        sdfs: { nodeId: \"sphere(1.0)\" },\r\n        children: [],\r\n      },\r\n    };\r\n  };\r\n\r\n  const newBooleanNode = (xPos = 0, yPos = 0) => {\r\n    setId(id + 1);\r\n    return {\r\n      id: `node-${id}`,\r\n      type: \"booleanNode\",\r\n      position: { x: xPos, y: yPos },\r\n      data: { sdfs: {}, children: [] },\r\n    };\r\n  };\r\n\r\n  const handleKey = (e) => {\r\n    // SPACE BAR\r\n    if (e.key === \"p\") {\r\n      const node = newPrimitiveNode();\r\n      nodes.push(node);\r\n\r\n      onNodesChange([node]); // Para actualizar\r\n    } else if (e.key === \"b\") {\r\n      const node = newBooleanNode();\r\n      nodes.push(node);\r\n\r\n      onNodesChange([node]); // Para actualizar\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: \"100vh\" }} tabIndex=\"0\" onKeyDown={handleKey}>\r\n      <GraphProvider value={sharedFunctions}>\r\n        <ReactFlow\r\n          nodes={nodes}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          // onDisconnect={onDisconnect}\r\n\r\n          nodeTypes={nodeTypes}\r\n          edgeTypes={edgeTypes}\r\n          onInit={onInit}\r\n          onEdgeClick={(ev, edge) =>\r\n            setEdges(edges.filter((e) => e.id != edge.id))\r\n          }\r\n          snapToGrid={true}\r\n          fitView\r\n        >\r\n          <Background color=\"#aaa\" gap={10} />\r\n        </ReactFlow>\r\n      </GraphProvider>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
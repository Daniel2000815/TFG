{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'dotPow';\nvar dependencies = ['typed', 'equalScalar', 'matrix', 'pow', 'DenseMatrix'];\nexport var createDotPow = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar,\n      matrix = _ref.matrix,\n      pow = _ref.pow,\n      DenseMatrix = _ref.DenseMatrix;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed: typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed: typed,\n    matrix: matrix\n  });\n  var powScalarSignatures = {};\n\n  for (var signature in pow.signatures) {\n    if (Object.prototype.hasOwnProperty.call(pow.signatures, signature)) {\n      if (!signature.includes('Matrix') && !signature.includes('Array')) {\n        powScalarSignatures[signature] = pow.signatures[signature];\n      }\n    }\n  }\n\n  var powScalar = typed(powScalarSignatures);\n  /**\r\n   * Calculates the power of x to y element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.dotPow(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.dotPow(2, 3)            // returns number 8\r\n   *\r\n   *    const a = [[1, 2], [4, 3]]\r\n   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]\r\n   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]\r\n   *\r\n   * See also:\r\n   *\r\n   *    pow, sqrt, multiply\r\n   *\r\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\r\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\r\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`\r\n   */\n\n  return typed(name, matrixAlgorithmSuite({\n    elop: powScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});","map":{"version":3,"names":["factory","createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo11xS0s","createMatAlgo12xSfs","createMatrixAlgorithmSuite","name","dependencies","createDotPow","_ref","typed","equalScalar","matrix","pow","DenseMatrix","matAlgo03xDSf","matAlgo07xSSf","matAlgo11xS0s","matAlgo12xSfs","matrixAlgorithmSuite","powScalarSignatures","signature","signatures","Object","prototype","hasOwnProperty","call","includes","powScalar","elop","SS","DS","Ss","sS"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/mathjs/lib/esm/function/arithmetic/dotPow.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\r\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\r\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nvar name = 'dotPow';\r\nvar dependencies = ['typed', 'equalScalar', 'matrix', 'pow', 'DenseMatrix'];\r\nexport var createDotPow = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    equalScalar,\r\n    matrix,\r\n    pow,\r\n    DenseMatrix\r\n  } = _ref;\r\n  var matAlgo03xDSf = createMatAlgo03xDSf({\r\n    typed\r\n  });\r\n  var matAlgo07xSSf = createMatAlgo07xSSf({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matAlgo11xS0s = createMatAlgo11xS0s({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix\r\n  });\r\n  var powScalarSignatures = {};\r\n\r\n  for (var signature in pow.signatures) {\r\n    if (Object.prototype.hasOwnProperty.call(pow.signatures, signature)) {\r\n      if (!signature.includes('Matrix') && !signature.includes('Array')) {\r\n        powScalarSignatures[signature] = pow.signatures[signature];\r\n      }\r\n    }\r\n  }\r\n\r\n  var powScalar = typed(powScalarSignatures);\r\n  /**\r\n   * Calculates the power of x to y element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.dotPow(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.dotPow(2, 3)            // returns number 8\r\n   *\r\n   *    const a = [[1, 2], [4, 3]]\r\n   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]\r\n   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]\r\n   *\r\n   * See also:\r\n   *\r\n   *    pow, sqrt, multiply\r\n   *\r\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\r\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\r\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`\r\n   */\r\n\r\n  return typed(name, matrixAlgorithmSuite({\r\n    elop: powScalar,\r\n    SS: matAlgo07xSSf,\r\n    DS: matAlgo03xDSf,\r\n    Ss: matAlgo11xS0s,\r\n    sS: matAlgo12xSfs\r\n  }));\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,0BAAT,QAA2C,iDAA3C;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,aAAV,EAAyB,QAAzB,EAAmC,KAAnC,EAA0C,aAA1C,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeR,OAAO,CAACM,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EAC3E,IACEC,KADF,GAMID,IANJ,CACEC,KADF;EAAA,IAEEC,WAFF,GAMIF,IANJ,CAEEE,WAFF;EAAA,IAGEC,MAHF,GAMIH,IANJ,CAGEG,MAHF;EAAA,IAIEC,GAJF,GAMIJ,IANJ,CAIEI,GAJF;EAAA,IAKEC,WALF,GAMIL,IANJ,CAKEK,WALF;EAOA,IAAIC,aAAa,GAAGd,mBAAmB,CAAC;IACtCS,KAAK,EAALA;EADsC,CAAD,CAAvC;EAGA,IAAIM,aAAa,GAAGd,mBAAmB,CAAC;IACtCQ,KAAK,EAALA,KADsC;IAEtCI,WAAW,EAAXA;EAFsC,CAAD,CAAvC;EAIA,IAAIG,aAAa,GAAGd,mBAAmB,CAAC;IACtCO,KAAK,EAALA,KADsC;IAEtCC,WAAW,EAAXA;EAFsC,CAAD,CAAvC;EAIA,IAAIO,aAAa,GAAGd,mBAAmB,CAAC;IACtCM,KAAK,EAALA,KADsC;IAEtCI,WAAW,EAAXA;EAFsC,CAAD,CAAvC;EAIA,IAAIK,oBAAoB,GAAGd,0BAA0B,CAAC;IACpDK,KAAK,EAALA,KADoD;IAEpDE,MAAM,EAANA;EAFoD,CAAD,CAArD;EAIA,IAAIQ,mBAAmB,GAAG,EAA1B;;EAEA,KAAK,IAAIC,SAAT,IAAsBR,GAAG,CAACS,UAA1B,EAAsC;IACpC,IAAIC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCb,GAAG,CAACS,UAAzC,EAAqDD,SAArD,CAAJ,EAAqE;MACnE,IAAI,CAACA,SAAS,CAACM,QAAV,CAAmB,QAAnB,CAAD,IAAiC,CAACN,SAAS,CAACM,QAAV,CAAmB,OAAnB,CAAtC,EAAmE;QACjEP,mBAAmB,CAACC,SAAD,CAAnB,GAAiCR,GAAG,CAACS,UAAJ,CAAeD,SAAf,CAAjC;MACD;IACF;EACF;;EAED,IAAIO,SAAS,GAAGlB,KAAK,CAACU,mBAAD,CAArB;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOV,KAAK,CAACJ,IAAD,EAAOa,oBAAoB,CAAC;IACtCU,IAAI,EAAED,SADgC;IAEtCE,EAAE,EAAEd,aAFkC;IAGtCe,EAAE,EAAEhB,aAHkC;IAItCiB,EAAE,EAAEf,aAJkC;IAKtCgB,EAAE,EAAEf;EALkC,CAAD,CAA3B,CAAZ;AAOD,CArE+C,CAAzC"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"G:\\\\gitlab\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar data = require('./data.cjs.js');\n\nvar cssVar = require('./utils/css-var.cjs.js');\n\nvar animation = require('@motionone/animation');\n\nvar utils = require('@motionone/utils');\n\nvar transforms = require('./utils/transforms.cjs.js');\n\nvar easing = require('./utils/easing.cjs.js');\n\nvar featureDetection = require('./utils/feature-detection.cjs.js');\n\nvar keyframes = require('./utils/keyframes.cjs.js');\n\nvar style = require('./style.cjs.js');\n\nvar getStyleName = require('./utils/get-style-name.cjs.js');\n\nvar stopAnimation = require('./utils/stop-animation.cjs.js');\n\nfunction getDevToolsRecord() {\n  return window.__MOTION_DEV_TOOLS_RECORD;\n}\n\nfunction animateStyle(element, key, keyframesDefinition) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var record = getDevToolsRecord();\n  var isRecording = options.record !== false && record;\n  var animation$1;\n  var _options$duration = options.duration,\n      duration = _options$duration === void 0 ? utils.defaults.duration : _options$duration,\n      _options$delay = options.delay,\n      delay = _options$delay === void 0 ? utils.defaults.delay : _options$delay,\n      _options$endDelay = options.endDelay,\n      endDelay = _options$endDelay === void 0 ? utils.defaults.endDelay : _options$endDelay,\n      _options$repeat = options.repeat,\n      repeat = _options$repeat === void 0 ? utils.defaults.repeat : _options$repeat,\n      _options$easing = options.easing,\n      easing$1 = _options$easing === void 0 ? utils.defaults.easing : _options$easing,\n      direction = options.direction,\n      offset = options.offset,\n      _options$allowWebkitA = options.allowWebkitAcceleration,\n      allowWebkitAcceleration = _options$allowWebkitA === void 0 ? false : _options$allowWebkitA;\n  var data$1 = data.getAnimationData(element);\n  var canAnimateNatively = featureDetection.supports.waapi();\n  var valueIsTransform = transforms.isTransform(key);\n  /**\r\n   * If this is an individual transform, we need to map its\r\n   * key to a CSS variable and update the element's transform style\r\n   */\n\n  valueIsTransform && transforms.addTransformToElement(element, key);\n  var name = getStyleName.getStyleName(key);\n  var motionValue = data.getMotionValue(data$1.values, name);\n  /**\r\n   * Get definition of value, this will be used to convert numerical\r\n   * keyframes into the default value type.\r\n   */\n\n  var definition = transforms.transformDefinitions.get(name);\n  /**\r\n   * Stop the current animation, if any. Because this will trigger\r\n   * commitStyles (DOM writes) and we might later trigger DOM reads,\r\n   * this is fired now and we return a factory function to create\r\n   * the actual animation that can get called in batch,\r\n   */\n\n  stopAnimation.stopAnimation(motionValue.animation, !(utils.isEasingGenerator(easing$1) && motionValue.generator) && options.record !== false);\n  /**\r\n   * Batchable factory function containing all DOM reads.\r\n   */\n\n  return function () {\n    var readInitialValue = function readInitialValue() {\n      var _a, _b;\n\n      return (_b = (_a = style.style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0;\n    };\n    /**\r\n     * Replace null values with the previous keyframe value, or read\r\n     * it from the DOM if it's the first keyframe.\r\n     */\n\n\n    var keyframes$1 = keyframes.hydrateKeyframes(keyframes.keyframesList(keyframesDefinition), readInitialValue);\n\n    if (utils.isEasingGenerator(easing$1)) {\n      var custom = easing$1.createAnimation(keyframes$1, readInitialValue, valueIsTransform, name, motionValue);\n      easing$1 = custom.easing;\n      if (custom.keyframes !== undefined) keyframes$1 = custom.keyframes;\n      if (custom.duration !== undefined) duration = custom.duration;\n    }\n    /**\r\n     * If this is a CSS variable we need to register it with the browser\r\n     * before it can be animated natively. We also set it with setProperty\r\n     * rather than directly onto the element.style object.\r\n     */\n\n\n    if (cssVar.isCssVar(name)) {\n      if (featureDetection.supports.cssRegisterProperty()) {\n        cssVar.registerCssVariable(name);\n      } else {\n        canAnimateNatively = false;\n      }\n    }\n    /**\r\n     * If we can animate this value with WAAPI, do so. Currently this only\r\n     * feature detects CSS.registerProperty but could check WAAPI too.\r\n     */\n\n\n    if (canAnimateNatively) {\n      var _element$animate;\n\n      /**\r\n       * Convert numbers to default value types. Currently this only supports\r\n       * transforms but it could also support other value types.\r\n       */\n      if (definition) {\n        keyframes$1 = keyframes$1.map(function (value) {\n          return utils.isNumber(value) ? definition.toDefaultUnit(value) : value;\n        });\n      }\n      /**\r\n       * If this browser doesn't support partial/implicit keyframes we need to\r\n       * explicitly provide one.\r\n       */\n\n\n      if (keyframes$1.length === 1 && (!featureDetection.supports.partialKeyframes() || isRecording)) {\n        keyframes$1.unshift(readInitialValue());\n      }\n\n      var animationOptions = {\n        delay: utils.time.ms(delay),\n        duration: utils.time.ms(duration),\n        endDelay: utils.time.ms(endDelay),\n        easing: !utils.isEasingList(easing$1) ? easing.convertEasing(easing$1) : undefined,\n        direction: direction,\n        iterations: repeat + 1,\n        fill: \"both\"\n      };\n      animation$1 = element.animate((_element$animate = {}, _defineProperty(_element$animate, name, keyframes$1), _defineProperty(_element$animate, \"offset\", offset), _defineProperty(_element$animate, \"easing\", utils.isEasingList(easing$1) ? easing$1.map(easing.convertEasing) : undefined), _element$animate), animationOptions);\n      /**\r\n       * Polyfill finished Promise in browsers that don't support it\r\n       */\n\n      if (!animation$1.finished) {\n        animation$1.finished = new Promise(function (resolve, reject) {\n          animation$1.onfinish = resolve;\n          animation$1.oncancel = reject;\n        });\n      }\n\n      var target = keyframes$1[keyframes$1.length - 1];\n      animation$1.finished.then(function () {\n        // Apply styles to target\n        style.style.set(element, name, target); // Ensure fill modes don't persist\n\n        animation$1.cancel();\n      }).catch(utils.noop);\n      /**\r\n       * This forces Webkit to run animations on the main thread by exploiting\r\n       * this condition:\r\n       * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\r\n       *\r\n       * This fixes Webkit's timing bugs, like accelerated animations falling\r\n       * out of sync with main thread animations and massive delays in starting\r\n       * accelerated animations in WKWebView.\r\n       */\n\n      if (!allowWebkitAcceleration) animation$1.playbackRate = 1.000001;\n      /**\r\n       * If we can't animate the value natively then we can fallback to the numbers-only\r\n       * polyfill for transforms.\r\n       */\n    } else if (valueIsTransform) {\n      /**\r\n       * If any keyframe is a string (because we measured it from the DOM), we need to convert\r\n       * it into a number before passing to the Animation polyfill.\r\n       */\n      keyframes$1 = keyframes$1.map(function (value) {\n        return typeof value === \"string\" ? parseFloat(value) : value;\n      });\n      /**\r\n       * If we only have a single keyframe, we need to create an initial keyframe by reading\r\n       * the current value from the DOM.\r\n       */\n\n      if (keyframes$1.length === 1) {\n        keyframes$1.unshift(parseFloat(readInitialValue()));\n      }\n\n      var render = function render(latest) {\n        if (definition) latest = definition.toDefaultUnit(latest);\n        style.style.set(element, name, latest);\n      };\n\n      animation$1 = new animation.Animation(render, keyframes$1, Object.assign(Object.assign({}, options), {\n        duration: duration,\n        easing: easing$1\n      }));\n    } else {\n      var _target = keyframes$1[keyframes$1.length - 1];\n      style.style.set(element, name, definition && utils.isNumber(_target) ? definition.toDefaultUnit(_target) : _target);\n    }\n\n    if (isRecording) {\n      record(element, key, keyframes$1, {\n        duration: duration,\n        delay: delay,\n        easing: easing$1,\n        repeat: repeat,\n        offset: offset\n      }, \"motion-one\");\n    }\n\n    motionValue.setAnimation(animation$1);\n    return animation$1;\n  };\n}\n\nexports.animateStyle = animateStyle;","map":{"version":3,"names":["Object","defineProperty","exports","value","data","require","cssVar","animation","utils","transforms","easing","featureDetection","keyframes","style","getStyleName","stopAnimation","getDevToolsRecord","window","__MOTION_DEV_TOOLS_RECORD","animateStyle","element","key","keyframesDefinition","options","record","isRecording","animation$1","duration","defaults","delay","endDelay","repeat","easing$1","direction","offset","allowWebkitAcceleration","data$1","getAnimationData","canAnimateNatively","supports","waapi","valueIsTransform","isTransform","addTransformToElement","name","motionValue","getMotionValue","values","definition","transformDefinitions","get","isEasingGenerator","generator","readInitialValue","_a","_b","initialValue","keyframes$1","hydrateKeyframes","keyframesList","custom","createAnimation","undefined","isCssVar","cssRegisterProperty","registerCssVariable","map","isNumber","toDefaultUnit","length","partialKeyframes","unshift","animationOptions","time","ms","isEasingList","convertEasing","iterations","fill","animate","finished","Promise","resolve","reject","onfinish","oncancel","target","then","set","cancel","catch","noop","playbackRate","parseFloat","render","latest","Animation","assign","setAnimation"],"sources":["G:/gitlab/TFG/Aplicacion/node_modules/@motionone/dom/dist/animate/animate-style.cjs.js"],"sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\nvar data = require('./data.cjs.js');\r\nvar cssVar = require('./utils/css-var.cjs.js');\r\nvar animation = require('@motionone/animation');\r\nvar utils = require('@motionone/utils');\r\nvar transforms = require('./utils/transforms.cjs.js');\r\nvar easing = require('./utils/easing.cjs.js');\r\nvar featureDetection = require('./utils/feature-detection.cjs.js');\r\nvar keyframes = require('./utils/keyframes.cjs.js');\r\nvar style = require('./style.cjs.js');\r\nvar getStyleName = require('./utils/get-style-name.cjs.js');\r\nvar stopAnimation = require('./utils/stop-animation.cjs.js');\r\n\r\nfunction getDevToolsRecord() {\r\n    return window.__MOTION_DEV_TOOLS_RECORD;\r\n}\r\nfunction animateStyle(element, key, keyframesDefinition, options = {}) {\r\n    const record = getDevToolsRecord();\r\n    const isRecording = options.record !== false && record;\r\n    let animation$1;\r\n    let { duration = utils.defaults.duration, delay = utils.defaults.delay, endDelay = utils.defaults.endDelay, repeat = utils.defaults.repeat, easing: easing$1 = utils.defaults.easing, direction, offset, allowWebkitAcceleration = false, } = options;\r\n    const data$1 = data.getAnimationData(element);\r\n    let canAnimateNatively = featureDetection.supports.waapi();\r\n    const valueIsTransform = transforms.isTransform(key);\r\n    /**\r\n     * If this is an individual transform, we need to map its\r\n     * key to a CSS variable and update the element's transform style\r\n     */\r\n    valueIsTransform && transforms.addTransformToElement(element, key);\r\n    const name = getStyleName.getStyleName(key);\r\n    const motionValue = data.getMotionValue(data$1.values, name);\r\n    /**\r\n     * Get definition of value, this will be used to convert numerical\r\n     * keyframes into the default value type.\r\n     */\r\n    const definition = transforms.transformDefinitions.get(name);\r\n    /**\r\n     * Stop the current animation, if any. Because this will trigger\r\n     * commitStyles (DOM writes) and we might later trigger DOM reads,\r\n     * this is fired now and we return a factory function to create\r\n     * the actual animation that can get called in batch,\r\n     */\r\n    stopAnimation.stopAnimation(motionValue.animation, !(utils.isEasingGenerator(easing$1) && motionValue.generator) &&\r\n        options.record !== false);\r\n    /**\r\n     * Batchable factory function containing all DOM reads.\r\n     */\r\n    return () => {\r\n        const readInitialValue = () => { var _a, _b; return (_b = (_a = style.style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0; };\r\n        /**\r\n         * Replace null values with the previous keyframe value, or read\r\n         * it from the DOM if it's the first keyframe.\r\n         */\r\n        let keyframes$1 = keyframes.hydrateKeyframes(keyframes.keyframesList(keyframesDefinition), readInitialValue);\r\n        if (utils.isEasingGenerator(easing$1)) {\r\n            const custom = easing$1.createAnimation(keyframes$1, readInitialValue, valueIsTransform, name, motionValue);\r\n            easing$1 = custom.easing;\r\n            if (custom.keyframes !== undefined)\r\n                keyframes$1 = custom.keyframes;\r\n            if (custom.duration !== undefined)\r\n                duration = custom.duration;\r\n        }\r\n        /**\r\n         * If this is a CSS variable we need to register it with the browser\r\n         * before it can be animated natively. We also set it with setProperty\r\n         * rather than directly onto the element.style object.\r\n         */\r\n        if (cssVar.isCssVar(name)) {\r\n            if (featureDetection.supports.cssRegisterProperty()) {\r\n                cssVar.registerCssVariable(name);\r\n            }\r\n            else {\r\n                canAnimateNatively = false;\r\n            }\r\n        }\r\n        /**\r\n         * If we can animate this value with WAAPI, do so. Currently this only\r\n         * feature detects CSS.registerProperty but could check WAAPI too.\r\n         */\r\n        if (canAnimateNatively) {\r\n            /**\r\n             * Convert numbers to default value types. Currently this only supports\r\n             * transforms but it could also support other value types.\r\n             */\r\n            if (definition) {\r\n                keyframes$1 = keyframes$1.map((value) => utils.isNumber(value) ? definition.toDefaultUnit(value) : value);\r\n            }\r\n            /**\r\n             * If this browser doesn't support partial/implicit keyframes we need to\r\n             * explicitly provide one.\r\n             */\r\n            if (keyframes$1.length === 1 &&\r\n                (!featureDetection.supports.partialKeyframes() || isRecording)) {\r\n                keyframes$1.unshift(readInitialValue());\r\n            }\r\n            const animationOptions = {\r\n                delay: utils.time.ms(delay),\r\n                duration: utils.time.ms(duration),\r\n                endDelay: utils.time.ms(endDelay),\r\n                easing: !utils.isEasingList(easing$1) ? easing.convertEasing(easing$1) : undefined,\r\n                direction,\r\n                iterations: repeat + 1,\r\n                fill: \"both\",\r\n            };\r\n            animation$1 = element.animate({\r\n                [name]: keyframes$1,\r\n                offset,\r\n                easing: utils.isEasingList(easing$1) ? easing$1.map(easing.convertEasing) : undefined,\r\n            }, animationOptions);\r\n            /**\r\n             * Polyfill finished Promise in browsers that don't support it\r\n             */\r\n            if (!animation$1.finished) {\r\n                animation$1.finished = new Promise((resolve, reject) => {\r\n                    animation$1.onfinish = resolve;\r\n                    animation$1.oncancel = reject;\r\n                });\r\n            }\r\n            const target = keyframes$1[keyframes$1.length - 1];\r\n            animation$1.finished\r\n                .then(() => {\r\n                // Apply styles to target\r\n                style.style.set(element, name, target);\r\n                // Ensure fill modes don't persist\r\n                animation$1.cancel();\r\n            })\r\n                .catch(utils.noop);\r\n            /**\r\n             * This forces Webkit to run animations on the main thread by exploiting\r\n             * this condition:\r\n             * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\r\n             *\r\n             * This fixes Webkit's timing bugs, like accelerated animations falling\r\n             * out of sync with main thread animations and massive delays in starting\r\n             * accelerated animations in WKWebView.\r\n             */\r\n            if (!allowWebkitAcceleration)\r\n                animation$1.playbackRate = 1.000001;\r\n            /**\r\n             * If we can't animate the value natively then we can fallback to the numbers-only\r\n             * polyfill for transforms.\r\n             */\r\n        }\r\n        else if (valueIsTransform) {\r\n            /**\r\n             * If any keyframe is a string (because we measured it from the DOM), we need to convert\r\n             * it into a number before passing to the Animation polyfill.\r\n             */\r\n            keyframes$1 = keyframes$1.map((value) => typeof value === \"string\" ? parseFloat(value) : value);\r\n            /**\r\n             * If we only have a single keyframe, we need to create an initial keyframe by reading\r\n             * the current value from the DOM.\r\n             */\r\n            if (keyframes$1.length === 1) {\r\n                keyframes$1.unshift(parseFloat(readInitialValue()));\r\n            }\r\n            const render = (latest) => {\r\n                if (definition)\r\n                    latest = definition.toDefaultUnit(latest);\r\n                style.style.set(element, name, latest);\r\n            };\r\n            animation$1 = new animation.Animation(render, keyframes$1, Object.assign(Object.assign({}, options), { duration,\r\n                easing: easing$1 }));\r\n        }\r\n        else {\r\n            const target = keyframes$1[keyframes$1.length - 1];\r\n            style.style.set(element, name, definition && utils.isNumber(target)\r\n                ? definition.toDefaultUnit(target)\r\n                : target);\r\n        }\r\n        if (isRecording) {\r\n            record(element, key, keyframes$1, {\r\n                duration,\r\n                delay: delay,\r\n                easing: easing$1,\r\n                repeat,\r\n                offset,\r\n            }, \"motion-one\");\r\n        }\r\n        motionValue.setAnimation(animation$1);\r\n        return animation$1;\r\n    };\r\n}\r\n\r\nexports.animateStyle = animateStyle;\r\n"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAlB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,wBAAD,CAApB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,sBAAD,CAAvB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,kBAAD,CAAnB;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,2BAAD,CAAxB;;AACA,IAAIK,MAAM,GAAGL,OAAO,CAAC,uBAAD,CAApB;;AACA,IAAIM,gBAAgB,GAAGN,OAAO,CAAC,kCAAD,CAA9B;;AACA,IAAIO,SAAS,GAAGP,OAAO,CAAC,0BAAD,CAAvB;;AACA,IAAIQ,KAAK,GAAGR,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIS,YAAY,GAAGT,OAAO,CAAC,+BAAD,CAA1B;;AACA,IAAIU,aAAa,GAAGV,OAAO,CAAC,+BAAD,CAA3B;;AAEA,SAASW,iBAAT,GAA6B;EACzB,OAAOC,MAAM,CAACC,yBAAd;AACH;;AACD,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,GAA/B,EAAoCC,mBAApC,EAAuE;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EACnE,IAAMC,MAAM,GAAGR,iBAAiB,EAAhC;EACA,IAAMS,WAAW,GAAGF,OAAO,CAACC,MAAR,KAAmB,KAAnB,IAA4BA,MAAhD;EACA,IAAIE,WAAJ;EACA,wBAA8OH,OAA9O,CAAMI,QAAN;EAAA,IAAMA,QAAN,kCAAiBnB,KAAK,CAACoB,QAAN,CAAeD,QAAhC;EAAA,qBAA8OJ,OAA9O,CAA0CM,KAA1C;EAAA,IAA0CA,KAA1C,+BAAkDrB,KAAK,CAACoB,QAAN,CAAeC,KAAjE;EAAA,wBAA8ON,OAA9O,CAAwEO,QAAxE;EAAA,IAAwEA,QAAxE,kCAAmFtB,KAAK,CAACoB,QAAN,CAAeE,QAAlG;EAAA,sBAA8OP,OAA9O,CAA4GQ,MAA5G;EAAA,IAA4GA,MAA5G,gCAAqHvB,KAAK,CAACoB,QAAN,CAAeG,MAApI;EAAA,sBAA8OR,OAA9O,CAA4Ib,MAA5I;EAAA,IAAoJsB,QAApJ,gCAA+JxB,KAAK,CAACoB,QAAN,CAAelB,MAA9K;EAAA,IAAsLuB,SAAtL,GAA8OV,OAA9O,CAAsLU,SAAtL;EAAA,IAAiMC,MAAjM,GAA8OX,OAA9O,CAAiMW,MAAjM;EAAA,4BAA8OX,OAA9O,CAAyMY,uBAAzM;EAAA,IAAyMA,uBAAzM,sCAAmO,KAAnO;EACA,IAAMC,MAAM,GAAGhC,IAAI,CAACiC,gBAAL,CAAsBjB,OAAtB,CAAf;EACA,IAAIkB,kBAAkB,GAAG3B,gBAAgB,CAAC4B,QAAjB,CAA0BC,KAA1B,EAAzB;EACA,IAAMC,gBAAgB,GAAGhC,UAAU,CAACiC,WAAX,CAAuBrB,GAAvB,CAAzB;EACA;AACJ;AACA;AACA;;EACIoB,gBAAgB,IAAIhC,UAAU,CAACkC,qBAAX,CAAiCvB,OAAjC,EAA0CC,GAA1C,CAApB;EACA,IAAMuB,IAAI,GAAG9B,YAAY,CAACA,YAAb,CAA0BO,GAA1B,CAAb;EACA,IAAMwB,WAAW,GAAGzC,IAAI,CAAC0C,cAAL,CAAoBV,MAAM,CAACW,MAA3B,EAAmCH,IAAnC,CAApB;EACA;AACJ;AACA;AACA;;EACI,IAAMI,UAAU,GAAGvC,UAAU,CAACwC,oBAAX,CAAgCC,GAAhC,CAAoCN,IAApC,CAAnB;EACA;AACJ;AACA;AACA;AACA;AACA;;EACI7B,aAAa,CAACA,aAAd,CAA4B8B,WAAW,CAACtC,SAAxC,EAAmD,EAAEC,KAAK,CAAC2C,iBAAN,CAAwBnB,QAAxB,KAAqCa,WAAW,CAACO,SAAnD,KAC/C7B,OAAO,CAACC,MAAR,KAAmB,KADvB;EAEA;AACJ;AACA;;EACI,OAAO,YAAM;IACT,IAAM6B,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;MAAE,IAAIC,EAAJ,EAAQC,EAAR;;MAAY,OAAO,CAACA,EAAE,GAAG,CAACD,EAAE,GAAGzC,KAAK,CAACA,KAAN,CAAYqC,GAAZ,CAAgB9B,OAAhB,EAAyBwB,IAAzB,CAAN,MAA0C,IAA1C,IAAkDU,EAAE,KAAK,KAAK,CAA9D,GAAkEA,EAAlE,GAAuEN,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACQ,YAAhJ,MAAkK,IAAlK,IAA0KD,EAAE,KAAK,KAAK,CAAtL,GAA0LA,EAA1L,GAA+L,CAAtM;IAA0M,CAAvP;IACA;AACR;AACA;AACA;;;IACQ,IAAIE,WAAW,GAAG7C,SAAS,CAAC8C,gBAAV,CAA2B9C,SAAS,CAAC+C,aAAV,CAAwBrC,mBAAxB,CAA3B,EAAyE+B,gBAAzE,CAAlB;;IACA,IAAI7C,KAAK,CAAC2C,iBAAN,CAAwBnB,QAAxB,CAAJ,EAAuC;MACnC,IAAM4B,MAAM,GAAG5B,QAAQ,CAAC6B,eAAT,CAAyBJ,WAAzB,EAAsCJ,gBAAtC,EAAwDZ,gBAAxD,EAA0EG,IAA1E,EAAgFC,WAAhF,CAAf;MACAb,QAAQ,GAAG4B,MAAM,CAAClD,MAAlB;MACA,IAAIkD,MAAM,CAAChD,SAAP,KAAqBkD,SAAzB,EACIL,WAAW,GAAGG,MAAM,CAAChD,SAArB;MACJ,IAAIgD,MAAM,CAACjC,QAAP,KAAoBmC,SAAxB,EACInC,QAAQ,GAAGiC,MAAM,CAACjC,QAAlB;IACP;IACD;AACR;AACA;AACA;AACA;;;IACQ,IAAIrB,MAAM,CAACyD,QAAP,CAAgBnB,IAAhB,CAAJ,EAA2B;MACvB,IAAIjC,gBAAgB,CAAC4B,QAAjB,CAA0ByB,mBAA1B,EAAJ,EAAqD;QACjD1D,MAAM,CAAC2D,mBAAP,CAA2BrB,IAA3B;MACH,CAFD,MAGK;QACDN,kBAAkB,GAAG,KAArB;MACH;IACJ;IACD;AACR;AACA;AACA;;;IACQ,IAAIA,kBAAJ,EAAwB;MAAA;;MACpB;AACZ;AACA;AACA;MACY,IAAIU,UAAJ,EAAgB;QACZS,WAAW,GAAGA,WAAW,CAACS,GAAZ,CAAgB,UAAC/D,KAAD;UAAA,OAAWK,KAAK,CAAC2D,QAAN,CAAehE,KAAf,IAAwB6C,UAAU,CAACoB,aAAX,CAAyBjE,KAAzB,CAAxB,GAA0DA,KAArE;QAAA,CAAhB,CAAd;MACH;MACD;AACZ;AACA;AACA;;;MACY,IAAIsD,WAAW,CAACY,MAAZ,KAAuB,CAAvB,KACC,CAAC1D,gBAAgB,CAAC4B,QAAjB,CAA0B+B,gBAA1B,EAAD,IAAiD7C,WADlD,CAAJ,EACoE;QAChEgC,WAAW,CAACc,OAAZ,CAAoBlB,gBAAgB,EAApC;MACH;;MACD,IAAMmB,gBAAgB,GAAG;QACrB3C,KAAK,EAAErB,KAAK,CAACiE,IAAN,CAAWC,EAAX,CAAc7C,KAAd,CADc;QAErBF,QAAQ,EAAEnB,KAAK,CAACiE,IAAN,CAAWC,EAAX,CAAc/C,QAAd,CAFW;QAGrBG,QAAQ,EAAEtB,KAAK,CAACiE,IAAN,CAAWC,EAAX,CAAc5C,QAAd,CAHW;QAIrBpB,MAAM,EAAE,CAACF,KAAK,CAACmE,YAAN,CAAmB3C,QAAnB,CAAD,GAAgCtB,MAAM,CAACkE,aAAP,CAAqB5C,QAArB,CAAhC,GAAiE8B,SAJpD;QAKrB7B,SAAS,EAATA,SALqB;QAMrB4C,UAAU,EAAE9C,MAAM,GAAG,CANA;QAOrB+C,IAAI,EAAE;MAPe,CAAzB;MASApD,WAAW,GAAGN,OAAO,CAAC2D,OAAR,2DACTnC,IADS,EACFa,WADE,+CAEVvB,MAFU,+CAGF1B,KAAK,CAACmE,YAAN,CAAmB3C,QAAnB,IAA+BA,QAAQ,CAACkC,GAAT,CAAaxD,MAAM,CAACkE,aAApB,CAA/B,GAAoEd,SAHlE,sBAIXU,gBAJW,CAAd;MAKA;AACZ;AACA;;MACY,IAAI,CAAC9C,WAAW,CAACsD,QAAjB,EAA2B;QACvBtD,WAAW,CAACsD,QAAZ,GAAuB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;UACpDzD,WAAW,CAAC0D,QAAZ,GAAuBF,OAAvB;UACAxD,WAAW,CAAC2D,QAAZ,GAAuBF,MAAvB;QACH,CAHsB,CAAvB;MAIH;;MACD,IAAMG,MAAM,GAAG7B,WAAW,CAACA,WAAW,CAACY,MAAZ,GAAqB,CAAtB,CAA1B;MACA3C,WAAW,CAACsD,QAAZ,CACKO,IADL,CACU,YAAM;QACZ;QACA1E,KAAK,CAACA,KAAN,CAAY2E,GAAZ,CAAgBpE,OAAhB,EAAyBwB,IAAzB,EAA+B0C,MAA/B,EAFY,CAGZ;;QACA5D,WAAW,CAAC+D,MAAZ;MACH,CAND,EAOKC,KAPL,CAOWlF,KAAK,CAACmF,IAPjB;MAQA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACY,IAAI,CAACxD,uBAAL,EACIT,WAAW,CAACkE,YAAZ,GAA2B,QAA3B;MACJ;AACZ;AACA;AACA;IACS,CA/DD,MAgEK,IAAInD,gBAAJ,EAAsB;MACvB;AACZ;AACA;AACA;MACYgB,WAAW,GAAGA,WAAW,CAACS,GAAZ,CAAgB,UAAC/D,KAAD;QAAA,OAAW,OAAOA,KAAP,KAAiB,QAAjB,GAA4B0F,UAAU,CAAC1F,KAAD,CAAtC,GAAgDA,KAA3D;MAAA,CAAhB,CAAd;MACA;AACZ;AACA;AACA;;MACY,IAAIsD,WAAW,CAACY,MAAZ,KAAuB,CAA3B,EAA8B;QAC1BZ,WAAW,CAACc,OAAZ,CAAoBsB,UAAU,CAACxC,gBAAgB,EAAjB,CAA9B;MACH;;MACD,IAAMyC,MAAM,GAAG,SAATA,MAAS,CAACC,MAAD,EAAY;QACvB,IAAI/C,UAAJ,EACI+C,MAAM,GAAG/C,UAAU,CAACoB,aAAX,CAAyB2B,MAAzB,CAAT;QACJlF,KAAK,CAACA,KAAN,CAAY2E,GAAZ,CAAgBpE,OAAhB,EAAyBwB,IAAzB,EAA+BmD,MAA/B;MACH,CAJD;;MAKArE,WAAW,GAAG,IAAInB,SAAS,CAACyF,SAAd,CAAwBF,MAAxB,EAAgCrC,WAAhC,EAA6CzD,MAAM,CAACiG,MAAP,CAAcjG,MAAM,CAACiG,MAAP,CAAc,EAAd,EAAkB1E,OAAlB,CAAd,EAA0C;QAAEI,QAAQ,EAARA,QAAF;QACjGjB,MAAM,EAAEsB;MADyF,CAA1C,CAA7C,CAAd;IAEH,CApBI,MAqBA;MACD,IAAMsD,OAAM,GAAG7B,WAAW,CAACA,WAAW,CAACY,MAAZ,GAAqB,CAAtB,CAA1B;MACAxD,KAAK,CAACA,KAAN,CAAY2E,GAAZ,CAAgBpE,OAAhB,EAAyBwB,IAAzB,EAA+BI,UAAU,IAAIxC,KAAK,CAAC2D,QAAN,CAAemB,OAAf,CAAd,GACzBtC,UAAU,CAACoB,aAAX,CAAyBkB,OAAzB,CADyB,GAEzBA,OAFN;IAGH;;IACD,IAAI7D,WAAJ,EAAiB;MACbD,MAAM,CAACJ,OAAD,EAAUC,GAAV,EAAeoC,WAAf,EAA4B;QAC9B9B,QAAQ,EAARA,QAD8B;QAE9BE,KAAK,EAAEA,KAFuB;QAG9BnB,MAAM,EAAEsB,QAHsB;QAI9BD,MAAM,EAANA,MAJ8B;QAK9BG,MAAM,EAANA;MAL8B,CAA5B,EAMH,YANG,CAAN;IAOH;;IACDW,WAAW,CAACqD,YAAZ,CAAyBxE,WAAzB;IACA,OAAOA,WAAP;EACH,CAtID;AAuIH;;AAEDxB,OAAO,CAACiB,YAAR,GAAuBA,YAAvB"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'im';\nvar dependencies = ['typed'];\nexport var createIm = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\r\n   * Get the imaginary part of a complex number.\r\n   * For a complex number `a + bi`, the function returns `b`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.im(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = math.complex(2, 3)\r\n   *    math.re(a)                     // returns number 2\r\n   *    math.im(a)                     // returns number 3\r\n   *\r\n   *    math.re(math.complex('-5.2i')) // returns number -5.2\r\n   *    math.re(math.complex(2.4))     // returns number 0\r\n   *\r\n   * See also:\r\n   *\r\n   *    re, conj, abs, arg\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            A complex number or array with complex numbers\r\n   * @return {number | BigNumber | Array | Matrix} The imaginary part of x\r\n   */\n\n  return typed(name, {\n    number: function number() {\n      return 0;\n    },\n    'BigNumber | Fraction': function BigNumberFraction(x) {\n      return x.mul(0);\n    },\n    Complex: function Complex(x) {\n      return x.im;\n    },\n    'Array | Matrix': typed.referToSelf(function (self) {\n      return function (x) {\n        return deepMap(x, self);\n      };\n    })\n  });\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","createIm","_ref","typed","number","x","mul","Complex","im","referToSelf","self"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/mathjs/lib/esm/function/complex/im.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nvar name = 'im';\r\nvar dependencies = ['typed'];\r\nexport var createIm = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n\r\n  /**\r\n   * Get the imaginary part of a complex number.\r\n   * For a complex number `a + bi`, the function returns `b`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.im(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = math.complex(2, 3)\r\n   *    math.re(a)                     // returns number 2\r\n   *    math.im(a)                     // returns number 3\r\n   *\r\n   *    math.re(math.complex('-5.2i')) // returns number -5.2\r\n   *    math.re(math.complex(2.4))     // returns number 0\r\n   *\r\n   * See also:\r\n   *\r\n   *    re, conj, abs, arg\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            A complex number or array with complex numbers\r\n   * @return {number | BigNumber | Array | Matrix} The imaginary part of x\r\n   */\r\n  return typed(name, {\r\n    number: () => 0,\r\n    'BigNumber | Fraction': x => x.mul(0),\r\n    Complex: x => x.im,\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,IAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,QAAQ,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACvE,IACEC,KADF,GAEID,IAFJ,CACEC,KADF;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOA,KAAK,CAACJ,IAAD,EAAO;IACjBK,MAAM,EAAE;MAAA,OAAM,CAAN;IAAA,CADS;IAEjB,wBAAwB,2BAAAC,CAAC;MAAA,OAAIA,CAAC,CAACC,GAAF,CAAM,CAAN,CAAJ;IAAA,CAFR;IAGjBC,OAAO,EAAE,iBAAAF,CAAC;MAAA,OAAIA,CAAC,CAACG,EAAN;IAAA,CAHO;IAIjB,kBAAkBL,KAAK,CAACM,WAAN,CAAkB,UAAAC,IAAI;MAAA,OAAI,UAAAL,CAAC;QAAA,OAAIP,OAAO,CAACO,CAAD,EAAIK,IAAJ,CAAX;MAAA,CAAL;IAAA,CAAtB;EAJD,CAAP,CAAZ;AAMD,CAtC2C,CAArC"},"metadata":{},"sourceType":"module"}
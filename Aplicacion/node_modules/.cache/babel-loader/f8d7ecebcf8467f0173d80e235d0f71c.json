{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getQuadrant = exports.Frac = void 0;\nvar Utils_1 = require(\"../Core/Utils\");\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\nvar bigInt_1 = __importDefault(require(\"../3rdparty/bigInt\"));\nvar Scientific_1 = __importDefault(require(\"./Scientific\"));\nvar Errors_1 = require(\"../Core/Errors\");\nvar Settings_1 = require(\"../Settings\");\nvar Frac = /*#__PURE__*/function () {\n  function Frac(n) {\n    _classCallCheck(this, Frac);\n    if (n instanceof Frac) return n;\n    if (n === undefined) return this;\n    try {\n      if ((0, Utils_1.isInt)(n)) {\n        try {\n          this.num = (0, bigInt_1.default)(n);\n          this.den = (0, bigInt_1.default)(1);\n        } catch (e) {\n          return Frac.simple(n);\n        }\n      } else {\n        var frac = n instanceof decimal_js_1.default ? Fraction.quickConversion(n) : Fraction.convert(n);\n        this.num = new bigInt_1.default(frac[0]);\n        this.den = new bigInt_1.default(frac[1]);\n      }\n    } catch (e) {\n      return Frac.simple(n);\n    }\n  }\n  //safe to use with negative numbers or other types\n  _createClass(Frac, [{\n    key: \"multiply\",\n    value: function multiply(m) {\n      if (this.isOne()) {\n        return m.clone();\n      }\n      if (m.isOne()) {\n        return this.clone();\n      }\n      var c = this.clone();\n      c.num = c.num.multiply(m.num);\n      c.den = c.den.multiply(m.den);\n      return c.simplify();\n    }\n  }, {\n    key: \"divide\",\n    value: function divide(m) {\n      if (m.equals(0)) throw new Errors_1.DivisionByZero('Division by zero not allowed!');\n      return this.clone().multiply(m.clone().invert()).simplify();\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(m) {\n      return this.clone().add(m.clone().neg());\n    }\n  }, {\n    key: \"neg\",\n    value: function neg() {\n      this.num = this.num.multiply(-1);\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(m) {\n      var n1 = this.den,\n        n2 = m.den,\n        c = this.clone();\n      var a = c.num,\n        b = m.num;\n      if (n1.equals(n2)) {\n        c.num = a.add(b);\n      } else {\n        c.num = a.multiply(n2).add(b.multiply(n1));\n        c.den = n1.multiply(n2);\n      }\n      return c.simplify();\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(m) {\n      var a = this.clone(),\n        b = m.clone();\n      //make their denominators even and return the mod of their numerators\n      a.num = a.num.multiply(b.den);\n      a.den = a.den.multiply(b.den);\n      b.num = b.num.multiply(this.den);\n      b.den = b.den.multiply(this.den);\n      a.num = a.num.mod(b.num);\n      return a.simplify();\n    }\n  }, {\n    key: \"simplify\",\n    value: function simplify() {\n      var gcd = bigInt_1.default.gcd(this.num, this.den);\n      this.num = this.num.divide(gcd);\n      this.den = this.den.divide(gcd);\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var m = new Frac();\n      m.num = new bigInt_1.default(this.num);\n      m.den = new bigInt_1.default(this.den);\n      return m;\n    }\n  }, {\n    key: \"decimal\",\n    value: function decimal(prec) {\n      var sign = this.num.isNegative() ? '-' : '';\n      if (this.num.equals(this.den)) {\n        return '1';\n      }\n      //go plus one for rounding\n      prec = prec || Settings_1.Settings.PRECISION;\n      prec++;\n      var narr = [],\n        n = this.num.abs(),\n        d = this.den;\n      for (var i = 0; i < prec; i++) {\n        var w = n.divide(d),\n          //divide out whole\n          r = n.subtract(w.multiply(d)); //get remainder\n        narr.push(w);\n        if (r.equals(0)) break;\n        n = r.times(10); //shift one dec place\n      }\n\n      var whole = narr.shift();\n      if (narr.length === 0) {\n        return sign + whole.toString();\n      }\n      if (i === prec) {\n        var lt = [];\n        //get the last two so we can round it\n        for (var i = 0; i < 2; i++) {\n          lt.unshift(narr.pop());\n        }\n        //put the last digit back by rounding the last two\n        narr.push(Math.round(lt.join('.')));\n      }\n      var dec = whole.toString() + '.' + narr.join('');\n      return sign + dec;\n    }\n  }, {\n    key: \"toDecimal\",\n    value: function toDecimal(prec) {\n      prec = prec || Settings_1.Settings.PRECISION;\n      if (prec) {\n        return this.decimal(prec);\n      } else return this.num / this.den;\n    }\n  }, {\n    key: \"qcompare\",\n    value: function qcompare(n) {\n      return [this.num.multiply(n.den), n.num.multiply(this.den)];\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].equals(q[1]);\n    }\n  }, {\n    key: \"absEquals\",\n    value: function absEquals(n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].abs().equals(q[1]);\n    }\n    //lazy check to be fixed. Sufficient for now but will cause future problems\n  }, {\n    key: \"greaterThan\",\n    value: function greaterThan(n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].gt(q[1]);\n    }\n  }, {\n    key: \"gte\",\n    value: function gte(n) {\n      return this.greaterThan(n) || this.equals(n);\n    }\n  }, {\n    key: \"lte\",\n    value: function lte(n) {\n      return this.lessThan(n) || this.equals(n);\n    }\n  }, {\n    key: \"lessThan\",\n    value: function lessThan(n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].lt(q[1]);\n    }\n  }, {\n    key: \"isInteger\",\n    value: function isInteger() {\n      return this.den.equals(1);\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      this.num = this.num.multiply(-1);\n      return this;\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      var t = this.den;\n      //why invert 0/1? It'll become 1/0 and that's a lie.\n      if (!this.num.equals(0)) {\n        var isnegative = this.num.isNegative();\n        this.den = this.num.abs();\n        this.num = t;\n        if (isnegative) this.num = this.num.multiply(-1);\n      }\n      return this;\n    }\n  }, {\n    key: \"isOne\",\n    value: function isOne() {\n      return this.num.equals(1) && this.den.equals(1);\n    }\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      return this.num.isNegative() ? -1 : 1;\n    }\n  }, {\n    key: \"abs\",\n    value: function abs() {\n      this.num = this.num.abs();\n      return this;\n    }\n  }, {\n    key: \"gcd\",\n    value: function gcd(f) {\n      return Frac.quick(bigInt_1.default.gcd(f.num, this.num), bigInt_1.default.lcm(f.den, this.den));\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      //            if (this.num == 24) throw new Error(999)\n      if (Settings_1.Settings.USE_BIG) return new decimal_js_1.default(this.num.toString()).div(new decimal_js_1.default(this.den.toString()));\n      return this.num / this.den;\n    }\n  }, {\n    key: \"isNegative\",\n    value: function isNegative() {\n      return this.toDecimal() < 0;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(n) {\n      if (n instanceof Frac) return n;\n      n = n.toString();\n      var is_neg = n.charAt(0) === '-'; //check if it's negative\n      if (is_neg) n = n.substr(1, n.length - 1); //remove the sign\n      var frac = new Frac(n);\n      //put the sign back\n      if (is_neg) frac.negate();\n      return frac;\n    }\n  }, {\n    key: \"isFrac\",\n    value: function isFrac(o) {\n      return o instanceof Frac;\n    }\n  }, {\n    key: \"quick\",\n    value: function quick(n, d) {\n      var frac = new Frac();\n      frac.num = new bigInt_1.default(n);\n      frac.den = new bigInt_1.default(d);\n      return frac;\n    }\n  }, {\n    key: \"simple\",\n    value: function simple(n) {\n      var nstr = String((0, Utils_1.scientificToDecimal)(n)),\n        m_dc = nstr.split('.'),\n        num = m_dc.join(''),\n        den = 1,\n        l = (m_dc[1] || '').length;\n      for (var i = 0; i < l; i++) {\n        den += '0';\n      }\n      var frac = Frac.quick(num, den);\n      return frac.simplify();\n    }\n  }]);\n  return Frac;\n}();\nexports.Frac = Frac;\n/* \"STATIC\" */\n// converts a number to a fraction.\nvar Fraction = {\n  /**\n   * Converts a decimal to a fraction\n   * @param {number} value\n   * @param {object} opts\n   * @returns {Array} - an array containing the denominator and the numerator\n   */\n  convert: function convert(value, opts) {\n    var frac;\n    if (value === 0) {\n      frac = [0, 1];\n    } else {\n      if (value < 1e-6 || value > 1e20) {\n        var qc = this.quickConversion(Number(value));\n        if (qc[1] <= 1e20) {\n          var abs = Math.abs(value);\n          var sign = value / abs;\n          frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));\n          frac[0] = frac[0] * sign;\n        } else {\n          frac = qc;\n        }\n      } else {\n        frac = this.fullConversion(value);\n      }\n    }\n    return frac;\n  },\n  /**\n   * If the fraction is too small or too large this gets called instead of fullConversion method\n   * @param {number} dec\n   * @returns {Array} - an array containing the denominator and the numerator\n   */\n  quickConversion: function quickConversion(value) {\n    var stripSign = function stripSign(s) {\n      // Explicitely convert to a string\n      if (typeof s !== 'string') {\n        s = s.toString();\n      }\n      var sign = '';\n      // Remove and store the sign\n      var start = s.charAt(0);\n      if (start === '-') {\n        s = s.substr(1, s.length);\n        sign = '-';\n      } else if (start === '+') {\n        // Just remove the plus sign\n        s = s.substr(1, s.length);\n      }\n      return {\n        sign: sign,\n        value: s\n      };\n    };\n    function convert(value) {\n      // Explicitely convert to a decimal\n      if (Scientific_1.default.isScientific(value)) {\n        value = (0, Utils_1.scientificToDecimal)(value);\n      }\n      // Split the value into the sign and the value\n      var nparts = stripSign(value);\n      // Split it at the decimal. We'll refer to it as the coeffient parts\n      var cparts = nparts.value.split('.');\n      // Combine the entire number by removing leading zero and adding the decimal part\n      // This would be teh same as moving the decimal point to the end\n      var num;\n      // We're dealing with integers\n      if (cparts.length === 1) {\n        num = cparts[0];\n      } else {\n        num = cparts[0] + cparts[1];\n      }\n      var n = cparts[1] ? cparts[1].length : 0;\n      // Generate the padding for the zeros\n      var den = \"1\".concat('0'.repeat(n));\n      if (num !== '0') {\n        num = num.replace(/^0+/, '');\n      }\n      return [nparts.sign + num, den];\n    }\n    return convert(value);\n  },\n  /**\n   * Returns a good approximation of a fraction. This method gets called by convert\n   * http://mathforum.org/library/drmath/view/61772.html\n   * Decimal To Fraction Conversion - A Simpler Version\n   * Dr Peterson\n   * @param {number} dec\n   * @returns {Array} - an array containing the denominator and the numerator\n   */\n  fullConversion: function fullConversion(dec) {\n    var done = false;\n    // you can adjust the epsilon to a larger number if you don't need very high precision\n    var n1 = 0,\n      d1 = 1,\n      n2 = 1,\n      d2 = 0,\n      n = 0,\n      q = dec,\n      epsilon = 1e-16;\n    while (!done) {\n      n++;\n      if (n > 10000) {\n        done = true;\n      }\n      var a = Math.floor(q);\n      var num = n1 + a * n2;\n      var den = d1 + a * d2;\n      var e = q - a;\n      if (e < epsilon) {\n        done = true;\n      }\n      q = 1 / e;\n      n1 = n2;\n      d1 = d2;\n      n2 = num;\n      d2 = den;\n      if (Math.abs(num / den - dec) < epsilon || n > 30) {\n        done = true;\n      }\n    }\n    return [num, den];\n  }\n};\n//Depends on Fraction\n/**\n * Gets the quadrant of the trig function\n * @param {Frac} m\n * @returns {Int}\n */\nfunction getQuadrant(m) {\n  var v = m % 2,\n    quadrant;\n  if (v < 0) v = 2 + v; //put it in terms of pi\n  if (v >= 0 && v <= 0.5) quadrant = 1;else if (v > 0.5 && v <= 1) quadrant = 2;else if (v > 1 && v <= 1.5) quadrant = 3;else quadrant = 4;\n  return quadrant;\n}\nexports.getQuadrant = getQuadrant;","map":{"version":3,"mappings":"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","names":["Frac","n","undefined","num","den","e","simple","frac","decimal_js_1","Fraction","quickConversion","convert","bigInt_1","m","isOne","clone","c","multiply","simplify","equals","Errors_1","invert","add","neg","n1","n2","a","b","mod","gcd","divide","prec","sign","isNegative","Settings_1","PRECISION","narr","abs","d","i","w","r","subtract","push","times","whole","shift","length","toString","lt","unshift","pop","Math","round","join","dec","decimal","isNaN","q","qcompare","gt","greaterThan","lessThan","t","isnegative","f","quick","lcm","USE_BIG","div","toDecimal","is_neg","charAt","substr","negate","o","nstr","String","m_dc","split","l","exports","value","opts","qc","Number","fullConversion","toFixed","stripSign","s","start","Scientific_1","isScientific","nparts","cparts","repeat","replace","done","d1","d2","epsilon","floor","getQuadrant","v","quadrant"],"sourceRoot":"","sources":["../../src/Types/Frac.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
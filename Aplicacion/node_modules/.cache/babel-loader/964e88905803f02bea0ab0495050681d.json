{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bigConvert = exports.symfunction = exports.Symbol = void 0;\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\nvar Settings_1 = require(\"../Settings\");\nvar Utils_1 = require(\"../Core/Utils\");\nvar Groups_1 = require(\"./Groups\");\nvar Frac_1 = require(\"./Frac\");\nvar bigInt_1 = __importDefault(require(\"../3rdparty/bigInt\"));\nvar Errors_1 = require(\"../Core/Errors\");\nvar Math2_1 = require(\"../Functions/Math2\");\nvar Text_1 = require(\"../Core/Text\");\nvar LaTeX_1 = require(\"../LaTeX/LaTeX\");\nvar Core_1 = require(\"../Functions/Core\");\nvar expand_1 = require(\"../Functions/Core/math/expand\");\nvar Trig_1 = require(\"../Functions/Trig\");\nvar Utils_js_1 = require(\"../Core/Utils-js\");\nvar Parser_1 = require(\"../Parser/Parser\");\n// noinspection JSUnusedGlobalSymbols\n/**\n * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group.\n * All symbols except for \"numbers (group Groups.N)\" have a power.\n * @class Primary data type for the Parser.\n * @param {String | number} obj\n *\n * @property {number} power\n * @returns {Symbol}\n */\nvar Symbol = /*#__PURE__*/function () {\n  function Symbol(obj) {\n    _classCallCheck(this, Symbol);\n    var isInfinity = obj === 'Infinity';\n    // Convert big numbers to a string\n    if (obj instanceof decimal_js_1.default) {\n      obj = obj.toString();\n    }\n    //define numeric symbols\n    if (/^(-?\\+?\\d+)\\.?\\d*e?-?\\+?\\d*/i.test(obj) || obj instanceof decimal_js_1.default) {\n      this.group = Groups_1.Groups.N;\n      this.value = Settings_1.Settings.CONST_HASH;\n      this.multiplier = new Frac_1.Frac(obj);\n    }\n    //define symbolic symbols\n    else {\n      this.group = Groups_1.Groups.S;\n      (0, Utils_1.validateName)(obj);\n      this.value = obj;\n      this.multiplier = new Frac_1.Frac(1);\n      this.imaginary = obj === Settings_1.Settings.IMAGINARY;\n      this.isInfinity = isInfinity;\n    }\n    //As of 6.0.0 we switched to infinite precision so all objects have a power\n    //Although this is still redundant in constants, it simplifies the logic in\n    //other parts so we'll keep it\n    this.power = new Frac_1.Frac(1);\n    // Added to silence the strict warning.\n    return this;\n  }\n  /**\n   * Returns vanilla imaginary symbol\n   * @returns {Symbol}\n   */\n  _createClass(Symbol, [{\n    key: \"getNth\",\n    value:\n    /**\n     * Gets nth root accounting for rounding errors\n     * @param {Number} n\n     * @return {Number}\n     */\n    function getNth(n) {\n      // First calculate the root\n      var root = (0, Parser_1.evaluate)((0, Core_1.pow)((0, Parser_1.parse)(this.multiplier), (0, Parser_1.parse)(n).invert()));\n      // Round of any errors\n      var rounded = (0, Parser_1.parse)((0, Utils_1.nround)(root));\n      // Reverse the root\n      var e = (0, Parser_1.evaluate)((0, Core_1.pow)(rounded, (0, Parser_1.parse)(n)));\n      // If the rounded root equals the original number then we're good\n      if (e.equals((0, Parser_1.parse)(this.multiplier))) {\n        return rounded;\n      }\n      // Otherwise return the unrounded version\n      return root;\n    }\n    /**\n     * Checks if symbol is to the nth power\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"isToNth\",\n    value: function isToNth(n) {\n      // Start by check in the multiplier for squareness\n      // First get the root but round it because currently we still depend\n      var root = this.getNth(n);\n      var nthMultiplier = (0, Utils_1.isInt)(root);\n      var nthPower;\n      if (this.group === Groups_1.Groups.CB) {\n        // Start by assuming that all will be square.\n        nthPower = true;\n        // All it takes is for one of the symbols to not have an even power\n        // e.g. x^n1*y^n2 requires that both n1 and n2 are even\n        this.each(function (x) {\n          var isNth = x.isToNth(n);\n          if (!isNth) {\n            nthPower = false;\n          }\n        });\n      } else {\n        // Check if the power is divisible by n if it's not a number.\n        nthPower = this.group === Groups_1.Groups.N ? true : (0, Utils_1.isInt)((0, Core_1.divide)((0, Parser_1.parse)(this.power), (0, Parser_1.parse)(n)));\n      }\n      return nthMultiplier && nthPower;\n    }\n    /**\n     * Checks if a symbol is square\n     * @return {Boolean}\n     */\n  }, {\n    key: \"isSquare\",\n    value: function isSquare() {\n      return this.isToNth(2);\n    }\n    /**\n     * Checks if a symbol is cube\n     * @return {Boolean}\n     */\n  }, {\n    key: \"isCube\",\n    value: function isCube() {\n      return this.isToNth(3);\n    }\n    /**\n     * Checks if a symbol is a bare variable\n     * @return {Boolean}\n     */\n  }, {\n    key: \"isSimple\",\n    value: function isSimple() {\n      return this.power.equals(1) && this.multiplier.equals(1);\n    }\n    /**\n     * Simplifies the power of the symbol\n     * @returns {Symbol} a clone of the symbol\n     */\n  }, {\n    key: \"powSimp\",\n    value: function powSimp() {\n      if (this.group === Groups_1.Groups.CB) {\n        var powers = [];\n        this.each(function (x) {\n          var p = x.power;\n          //why waste time if I can't do anything anyway\n          if ((0, Utils_1.isSymbol)(p) || p.equals(1)) return this.clone();\n          powers.push(p);\n        });\n        var min = new Frac_1.Frac((0, Utils_1.arrayMin)(powers));\n        //handle the coefficient\n        //handle the multiplier\n        var sign = this.multiplier.sign();\n        var m = this.multiplier.clone().abs(),\n          mfactors = Math2_1.Math2.ifactor(m);\n        //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\n        //we can then reduce it to 2*3*5*(15)^2\n        var out_ = new Frac_1.Frac(1);\n        var in_ = new Frac_1.Frac(1);\n        for (var x in mfactors) {\n          var n = new Frac_1.Frac(mfactors[x]);\n          if (!n.lessThan(min)) {\n            n = n.divide(min).subtract(new Frac_1.Frac(1));\n            in_ = in_.multiply(new Frac_1.Frac(x)); //move the factor inside the bracket\n          }\n\n          out_ = out_.multiply((0, Parser_1.parse)((0, Utils_1.inBrackets)(x) + '^' + (0, Utils_1.inBrackets)(n)).multiplier);\n        }\n        var t = new Symbol(in_);\n        this.each(function (x) {\n          x = x.clone();\n          x.power = x.power.divide(min);\n          t = (0, Core_1.multiply)(t, x);\n        });\n        var xt = symfunction(Settings_1.Settings.PARENTHESIS, [t]);\n        xt.power = min;\n        xt.multiplier = sign < 0 ? out_.negate() : out_;\n        return xt;\n      }\n      return this.clone();\n    }\n    /**\n     * Checks to see if two functions are of equal value\n     * @param {Symbol} symbol\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(symbol) {\n      if (!(0, Utils_1.isSymbol)(symbol)) symbol = new Symbol(symbol);\n      return this.value === symbol.value && this.power.equals(symbol.power) && this.multiplier.equals(symbol.multiplier) && this.group === symbol.group;\n    }\n  }, {\n    key: \"abs\",\n    value: function abs() {\n      var e = this.clone();\n      e.multiplier.abs();\n      return e;\n    }\n    // Greater than\n  }, {\n    key: \"gt\",\n    value: function gt(symbol) {\n      if (!(0, Utils_1.isSymbol)(symbol)) symbol = new Symbol(symbol);\n      return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n    }\n    // Greater than\n  }, {\n    key: \"gte\",\n    value: function gte(symbol) {\n      if (!(0, Utils_1.isSymbol)(symbol)) symbol = new Symbol(symbol);\n      return this.equals(symbol) || this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n    }\n    // Less than\n  }, {\n    key: \"lt\",\n    value: function lt(symbol) {\n      if (!(0, Utils_1.isSymbol)(symbol)) symbol = new Symbol(symbol);\n      return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n    }\n    // Less than\n  }, {\n    key: \"lte\",\n    value: function lte(symbol) {\n      if (!(0, Utils_1.isSymbol)(symbol)) symbol = new Symbol(symbol);\n      return this.equals(symbol) || this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n    }\n    /**\n     * Because nerdamer doesn't group symbols by polynomials but\n     * rather a custom grouping method, this has to be\n     * reinserted in order to make use of most algorithms. This function\n     * checks if the symbol meets the criteria of a polynomial.\n     * @param {boolean} multivariate\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isPoly\",\n    value: function isPoly() {\n      var multivariate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var g = this.group,\n        p = this.power;\n      //the power must be a integer so fail if it's not\n      if (!(0, Utils_1.isInt)(p) || p < 0) return false;\n      //constants and first orders\n      if (g === Groups_1.Groups.N || g === Groups_1.Groups.S || this.isConstant(true)) return true;\n      var vars = this.variables();\n      if (g === Groups_1.Groups.CB && vars.length === 1) {\n        //the variable is assumed the only one that was found\n        var v = vars[0];\n        //if no variable then guess what!?!? We're done!!! We have a polynomial.\n        if (!v) return true;\n        for (var x in this.symbols) {\n          var sym = this.symbols[x];\n          //sqrt(x)\n          if (sym.group === Groups_1.Groups.FN && !sym.args[0].isConstant()) return false;\n          if (!sym.contains(v) && !sym.isConstant(true)) return false;\n        }\n        return true;\n      }\n      //PL groups. These only fail if a power is not an int\n      //this should handle cases such as x^2*t\n      if (this.isComposite() || g === Groups_1.Groups.CB && multivariate) {\n        //fail if we're not checking for multivariate polynomials\n        if (!multivariate && vars.length > 1) return false;\n        //loop though the symbols and check if they qualify\n        for (var _x in this.symbols) {\n          //we've already the symbols if we're not checking for multivariates at this point\n          //so we check the sub-symbols\n          if (!this.symbols[_x].isPoly(multivariate)) return false;\n        }\n        return true;\n      } else return false;\n      /*\n       //all tests must have passed so we must be dealing with a polynomial\n       return true;\n       */\n    }\n    //removes the requested variable from the symbol and returns the remainder\n  }, {\n    key: \"stripVar\",\n    value: function stripVar(x, exclude_x) {\n      var retval;\n      if ((this.group === Groups_1.Groups.PL || this.group === Groups_1.Groups.S) && this.value === x) retval = new Symbol(exclude_x ? 0 : this.multiplier);else if (this.group === Groups_1.Groups.CB && this.isLinear()) {\n        retval = new Symbol(1);\n        this.each(function (s) {\n          if (!s.contains(x, true)) retval = (0, Core_1.multiply)(retval, s.clone());\n        });\n        retval.multiplier = retval.multiplier.multiply(this.multiplier);\n      } else if (this.group === Groups_1.Groups.CP && !this.isLinear()) {\n        retval = new Symbol(this.multiplier);\n      } else if (this.group === Groups_1.Groups.CP && this.isLinear()) {\n        retval = new Symbol(0);\n        this.each(function (s) {\n          if (!s.contains(x)) {\n            var t = s.clone();\n            t.multiplier = t.multiplier.multiply(this.multiplier);\n            retval = (0, Core_1.add)(retval, t);\n          }\n        });\n        //BIG TODO!!! It doesn't make much sense\n        if (retval.equals(0)) retval = new Symbol(this.multiplier);\n      } else if (this.group === Groups_1.Groups.EX && this.power.contains(x, true)) {\n        retval = new Symbol(this.multiplier);\n      } else if (this.group === Groups_1.Groups.FN && this.contains(x)) {\n        retval = new Symbol(this.multiplier);\n      } else\n        //wth? This should technically be the multiplier.\n        //Unfortunately this method wasn't very well thought out :`(.\n        //should be: retval = new Symbol(this.multiplier);\n        //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\n        //this will break a bunch of unit tests so be ready to for the long haul\n        retval = this.clone();\n      return retval;\n    }\n    //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a].\n  }, {\n    key: \"toArray\",\n    value: function toArray(v, arr) {\n      arr = arr || {\n        arr: [],\n        add: function add(x, idx) {\n          var e = this.arr[idx];\n          this.arr[idx] = e ? (0, Core_1.add)(e, x) : x;\n        }\n      };\n      var g = this.group;\n      if (g === Groups_1.Groups.S && this.contains(v)) {\n        arr.add(new Symbol(this.multiplier), this.power);\n      } else if (g === Groups_1.Groups.CB) {\n        var a = this.stripVar(v),\n          x = (0, Core_1.divide)(this.clone(), a.clone());\n        var p = x.isConstant() ? 0 : x.power;\n        arr.add(a, p);\n      } else if (g === Groups_1.Groups.PL && this.value === v) {\n        this.each(function (x, p) {\n          arr.add(x.stripVar(v), p);\n        });\n      } else if (g === Groups_1.Groups.CP) {\n        //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\n        //each case is handled above\n        this.each(function (x) {\n          x.toArray(v, arr);\n        });\n      } else if (this.contains(v)) {\n        throw new Errors_1.NerdamerTypeError('Cannot convert to array! Exiting');\n      } else {\n        arr.add(this.clone(), 0); //it's just a constant wrt to v\n      }\n      //fill the holes\n      arr = arr.arr; //keep only the array since we don't need the object anymore\n      for (var i = 0; i < arr.length; i++) {\n        if (!arr[i]) arr[i] = new Symbol(0);\n      }\n      return arr;\n    }\n    //checks to see if a symbol contans a function\n  }, {\n    key: \"hasFunc\",\n    value: function hasFunc(v) {\n      var fn_group = this.group === Groups_1.Groups.FN || this.group === Groups_1.Groups.EX;\n      if (fn_group && !v || fn_group && this.contains(v)) return true;\n      if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].hasFunc(v)) return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(a, b) {\n      a = !(0, Utils_1.isSymbol)(a) ? (0, Parser_1.parse)(a) : a.clone();\n      b = !(0, Utils_1.isSymbol)(b) ? (0, Parser_1.parse)(b) : b.clone();\n      if (a.group === Groups_1.Groups.N || a.group === Groups_1.Groups.P) (0, Errors_1.err)('Cannot substitute a number. Must be a variable');\n      var same_pow = false,\n        a_is_unit_multiplier = a.multiplier.equals(1),\n        m = this.multiplier.clone(),\n        retval;\n      /*\n       * In order to make the substitution the bases have to first match take\n       * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\n       * In both cases the first condition is that the bases match so we begin there\n       * Either both are Groups.PL or both are not Groups.PL but we cannot have Groups.PL and a non-PL group match\n       */\n      if (this.value === a.value && (this.group !== Groups_1.Groups.PL && a.group !== Groups_1.Groups.PL || this.group === Groups_1.Groups.PL && a.group === Groups_1.Groups.PL)) {\n        //we cleared the first hurdle but a subsitution may not be possible just yet\n        if (a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\n          if (a.isLinear()) {\n            retval = b;\n          } else if (a.power.equals(this.power)) {\n            retval = b;\n            same_pow = true;\n          }\n          if (a.multiplier.equals(this.multiplier)) m = new Frac_1.Frac(1);\n        }\n      }\n      //the next thing is to handle CB\n      else if (this.group === Groups_1.Groups.CB || this.previousGroup === Groups_1.Groups.CB) {\n        retval = new Symbol(1);\n        this.each(function (x) {\n          var subbed = (0, Parser_1.parse)(x.sub(a, b)); //parse it again for safety\n          retval = (0, Core_1.multiply)(retval, subbed);\n        });\n      } else if (this.isComposite()) {\n        var symbol = this.clone();\n        if (a.isComposite() && symbol.isComposite() && symbol.isLinear() && a.isLinear()) {\n          var find = function find(stack, needle) {\n            for (var x in stack.symbols) {\n              var sym = stack.symbols[x];\n              //if the symbol equals the needle or it's within the sub-symbols we're done\n              if (sym.isComposite() && find(sym, needle) || sym.equals(needle)) return true;\n            }\n            return false;\n          };\n          //go fish\n          for (var x in a.symbols) {\n            if (!find(symbol, a.symbols[x])) return symbol.clone();\n          }\n          retval = (0, Core_1.add)((0, Core_1.subtract)(symbol.clone(), a), b);\n        } else {\n          retval = new Symbol(0);\n          symbol.each(function (x) {\n            retval = (0, Core_1.add)(retval, x.sub(a, b));\n          });\n        }\n      } else if (this.group === Groups_1.Groups.EX) {\n        // the parsed value could be a function so parse and sub\n        retval = (0, Parser_1.parse)(this.value).sub(a, b);\n      } else if (this.group === Groups_1.Groups.FN) {\n        var nargs = [];\n        for (var i = 0; i < this.args.length; i++) {\n          var arg = this.args[i];\n          if (!(0, Utils_1.isSymbol)(arg)) arg = (0, Parser_1.parse)(arg);\n          nargs.push(arg.sub(a, b));\n        }\n        retval = symfunction(this.fname, nargs);\n      }\n      //if we did manage a substitution\n      if (retval) {\n        if (!same_pow) {\n          //substitute the power\n          var p = this.group === Groups_1.Groups.EX ? this.power.sub(a, b) : (0, Parser_1.parse)(this.power);\n          //now raise the symbol to that power\n          retval = (0, Core_1.pow)(retval, p);\n        }\n        //transfer the multiplier\n        retval.multiplier = retval.multiplier.multiply(m);\n        //done\n        return retval;\n      }\n      //if all else fails\n      return this.clone();\n    }\n  }, {\n    key: \"isMonomial\",\n    value: function isMonomial() {\n      if (this.group === Groups_1.Groups.S) return true;\n      if (this.group === Groups_1.Groups.CB) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].group !== Groups_1.Groups.S) return false;\n        }\n      } else return false;\n      return true;\n    }\n  }, {\n    key: \"isPi\",\n    value: function isPi() {\n      return this.group === Groups_1.Groups.S && this.value === 'pi';\n    }\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      return this.multiplier.sign();\n    }\n  }, {\n    key: \"isE\",\n    value: function isE() {\n      return this.value === 'e';\n    }\n  }, {\n    key: \"isSQRT\",\n    value: function isSQRT() {\n      return this.fname === Settings_1.Settings.SQRT;\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant(check_all, check_symbols) {\n      if (check_symbols && this.group === Groups_1.Groups.CB) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].isConstant(true)) return true;\n        }\n      }\n      if (check_all === 'functions' && this.isComposite()) {\n        var isConstant = true;\n        this.each(function (x) {\n          if (!x.isConstant(check_all, check_symbols)) {\n            isConstant = false;\n          }\n        }, true);\n        return isConstant;\n      }\n      if (check_all === 'all' && (this.isPi() || this.isE())) {\n        return true;\n      }\n      if (check_all && this.group === Groups_1.Groups.FN) {\n        for (var i = 0; i < this.args.length; i++) {\n          if (!this.args[i].isConstant(check_all)) return false;\n        }\n        return true;\n      }\n      if (check_all) return (0, Utils_js_1.isNumericSymbol)(this);\n      return this.value === Settings_1.Settings.CONST_HASH;\n    }\n    //the symbols is imaginary if\n    //1. n*i\n    //2. a+b*i\n    //3. a*i\n  }, {\n    key: \"isImaginary\",\n    value: function isImaginary() {\n      if (this.imaginary) return true;else if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].isImaginary()) return true;\n        }\n      }\n      return false;\n    }\n    /**\n     * Returns the real part of a symbol\n     * @returns {Symbol}\n     */\n  }, {\n    key: \"realpart\",\n    value: function realpart() {\n      if (this.isConstant()) {\n        return this.clone();\n      } else if (this.imaginary) return new Symbol(0);else if (this.isComposite()) {\n        var retval = new Symbol(0);\n        this.each(function (x) {\n          retval = (0, Core_1.add)(retval, x.realpart());\n        });\n        return retval;\n      } else if (this.isImaginary()) return new Symbol(0);\n      return this.clone();\n    }\n    /*\n     * Return imaginary part of a symbol\n     * @returns {Symbol}\n     */\n  }, {\n    key: \"imagpart\",\n    value: function imagpart() {\n      if (this.group === Groups_1.Groups.S && this.isImaginary()) return new Symbol(this.multiplier);\n      if (this.isComposite()) {\n        var retval = new Symbol(0);\n        this.each(function (x) {\n          retval = (0, Core_1.add)(retval, x.imagpart());\n        });\n        return retval;\n      }\n      if (this.group === Groups_1.Groups.CB) return this.stripVar(Settings_1.Settings.IMAGINARY);\n      return new Symbol(0);\n    }\n  }, {\n    key: \"isInteger\",\n    value: function isInteger() {\n      return this.isConstant() && this.multiplier.isInteger();\n    }\n  }, {\n    key: \"isLinear\",\n    value: function isLinear(wrt) {\n      if (wrt) {\n        if (this.isConstant()) return true;\n        if (this.group === Groups_1.Groups.S) {\n          if (this.value === wrt) return this.power.equals(1);else return true;\n        }\n        if (this.isComposite() && this.power.equals(1)) {\n          for (var x in this.symbols) {\n            if (!this.symbols[x].isLinear(wrt)) return false;\n          }\n          return true;\n        }\n        if (this.group === Groups_1.Groups.CB && this.symbols[wrt]) return this.symbols[wrt].isLinear(wrt);\n        return false;\n      } else return this.power.equals(1);\n    }\n    /**\n     * Checks to see if a symbol has a function by a specified name or within a specified list\n     * @param {String|String[]} names\n     * @returns {Boolean}\n     */\n  }, {\n    key: \"containsFunction\",\n    value: function containsFunction(names) {\n      if (typeof names === 'string') names = [names];\n      if (this.group === Groups_1.Groups.FN && names.indexOf(this.fname) !== -1) return true;\n      if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].containsFunction(names)) return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"multiplyPower\",\n    value: function multiplyPower(p2) {\n      //leave out 1\n      if (this.group === Groups_1.Groups.N && this.multiplier.equals(1)) return this;\n      var p1 = this.power;\n      if (this.group !== Groups_1.Groups.EX && p2.group === Groups_1.Groups.N) {\n        var p = p2.multiplier;\n        if (this.group === Groups_1.Groups.N && !p.isInteger()) {\n          this.convert(Groups_1.Groups.P);\n        }\n        this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\n        if (this.group === Groups_1.Groups.P && (0, Utils_1.isInt)(this.power)) {\n          //bring it back to an N\n          this.value = Math.pow(this.value, this.power);\n          this.toLinear();\n          this.convert(Groups_1.Groups.N);\n        }\n      } else {\n        if (this.group !== Groups_1.Groups.EX) {\n          p1 = new Symbol(p1);\n          this.convert(Groups_1.Groups.EX);\n        }\n        this.power = (0, Core_1.multiply)(p1, p2);\n      }\n      return this;\n    }\n  }, {\n    key: \"setPower\",\n    value: function setPower(p, retainSign) {\n      //leave out 1\n      if (this.group === Groups_1.Groups.N && this.multiplier.equals(1)) {\n        return this;\n      }\n      if (this.group === Groups_1.Groups.EX && !(0, Utils_1.isSymbol)(p)) {\n        this.group = this.previousGroup;\n        delete this.previousGroup;\n        if (this.group === Groups_1.Groups.N) {\n          this.multiplier = new Frac_1.Frac(this.value);\n          this.value = Settings_1.Settings.CONST_HASH;\n        } else this.power = p;\n      } else {\n        var isSymbolic = false;\n        if ((0, Utils_1.isSymbol)(p)) {\n          if (p.group === Groups_1.Groups.N) {\n            //p should be the multiplier instead\n            p = p.multiplier;\n          } else {\n            isSymbolic = true;\n          }\n        }\n        var group = isSymbolic ? Groups_1.Groups.EX : Groups_1.Groups.P;\n        this.power = p;\n        if (this.group === Groups_1.Groups.N && group) this.convert(group, retainSign);\n      }\n      return this;\n    }\n    /**\n     * Checks to see if symbol is located in the denominator\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isInverse\",\n    value: function isInverse() {\n      if (this.group === Groups_1.Groups.EX) return this.power.multiplier.lessThan(0);\n      return this.power < 0;\n    }\n    /**\n     * Make a duplicate of a symbol by copying a predefined list of items.\n     * The name 'copy' would probably be a more appropriate name.\n     * to a new symbol\n     * @param {Symbol | undefined} c\n     * @returns {Symbol}\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n      var clone = c || new Symbol(0),\n        //list of properties excluding power as this may be a symbol and would also need to be a clone.\n        properties = ['value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\n        l = properties.length,\n        i;\n      if (this.symbols) {\n        clone.symbols = {};\n        for (var x in this.symbols) {\n          clone.symbols[x] = this.symbols[x].clone();\n        }\n      }\n      for (i = 0; i < l; i++) {\n        if (this[properties[i]] !== undefined) {\n          clone[properties[i]] = this[properties[i]];\n        }\n      }\n      clone.power = this.power.clone();\n      clone.multiplier = this.multiplier.clone();\n      //add back the flag to track if this symbol is a conversion symbol\n      if (this.isConversion) clone.isConversion = this.isConversion;\n      if (this.isUnit) clone.isUnit = this.isUnit;\n      return clone;\n    }\n    /**\n     * Converts a symbol multiplier to one.\n     * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\n     * @returns {Symbol}\n     */\n  }, {\n    key: \"toUnitMultiplier\",\n    value: function toUnitMultiplier() {\n      var keepSign = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.multiplier.num = new bigInt_1.default(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\n      this.multiplier.den = new bigInt_1.default(1);\n      return this;\n    }\n    /**\n     * Converts a Symbol's power to one.\n     * @returns {Symbol}\n     */\n  }, {\n    key: \"toLinear\",\n    value: function toLinear() {\n      // Do nothing if it's already linear\n      if (this.power.equals(1)) {\n        return this;\n      }\n      this.setPower(new Frac_1.Frac(1));\n      return this;\n    }\n    /**\n     * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\n     * @param {Function} fn\n     * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well\n     * @param deep\n     */\n  }, {\n    key: \"each\",\n    value: function each(fn, deep) {\n      if (!this.symbols) {\n        fn.call(this, this, this.value);\n      } else {\n        for (var x in this.symbols) {\n          var sym = this.symbols[x];\n          if (sym.group === Groups_1.Groups.PL && deep) {\n            for (var y in sym.symbols) {\n              fn.call(x, sym.symbols[y], y);\n            }\n          } else fn.call(this, sym, x);\n        }\n      }\n    }\n    /**\n     * A numeric value to be returned for Javascript. It will try to\n     * return a number as far a possible but in case of a pure symbolic\n     * symbol it will just return its text representation\n     * @returns {String|Number}\n     */\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      if (this.group === Groups_1.Groups.N) return this.multiplier.valueOf();else if (this.power === 0) {\n        return 1;\n      } else if (this.multiplier === 0) {\n        return 0;\n      } else {\n        return (0, Text_1.text)(this, 'decimals');\n      }\n    }\n    /**\n     * Checks to see if a symbols has a particular variable within it.\n     * Pass in true as second argument to include the power of exponentials\n     * which aren't check by default.\n     * @example let s = _.parse('x+y+z'); s.contains('y');\n     * //returns true\n     * @param {any} variable\n     * @param {boolean} all\n     * @returns {boolean}\n     */\n  }, {\n    key: \"contains\",\n    value: function contains(variable, all) {\n      //contains expects a string\n      variable = String(variable);\n      var g = this.group;\n      if (this.value === variable) return true;\n      if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].contains(variable, all)) return true;\n        }\n      }\n      if (g === Groups_1.Groups.FN || this.previousGroup === Groups_1.Groups.FN) {\n        for (var i = 0; i < this.args.length; i++) {\n          if (this.args[i].contains(variable, all)) return true;\n        }\n      }\n      if (g === Groups_1.Groups.EX) {\n        //exit only if it does\n        if (all && this.power.contains(variable, all)) {\n          return true;\n        }\n        if (this.value === variable) return true;\n      }\n      return this.value === variable;\n    }\n    /**\n     * Negates a symbols\n     * @returns {boolean}\n     */\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      this.multiplier.negate();\n      if (this.group === Groups_1.Groups.CP || this.group === Groups_1.Groups.PL) this.distributeMultiplier();\n      return this;\n    }\n    /**\n     * Inverts a symbol\n     * @param {boolean} power_only\n     * @param {boolean} all\n     * @returns {boolean}\n     */\n  }, {\n    key: \"invert\",\n    value: function invert(power_only, all) {\n      //invert the multiplier\n      if (!power_only) this.multiplier = this.multiplier.invert();\n      //invert the rest\n      if ((0, Utils_1.isSymbol)(this.power)) {\n        this.power.negate();\n      } else if (this.group === Groups_1.Groups.CB && all) {\n        this.each(function (x) {\n          return x.invert();\n        });\n      } else {\n        if (this.power && this.group !== Groups_1.Groups.N) this.power.negate();\n      }\n      return this;\n    }\n    /**\n     * Symbols of group Groups.CP or Groups.PL may have the multiplier being carried by\n     * the top level symbol at any given time e.g. 2*(x+y+z). This is\n     * convenient in many cases, however in some cases the multiplier needs\n     * to be carried individually e.g. 2*x+2*y+2*z.\n     * This method distributes the multiplier over the entire symbol\n     * @param {boolean} all\n     * @returns {Symbol}\n     */\n  }, {\n    key: \"distributeMultiplier\",\n    value: function distributeMultiplier() {\n      var all = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\n      if (this.symbols && is_one && this.group !== Groups_1.Groups.CB && !this.multiplier.equals(1)) {\n        for (var x in this.symbols) {\n          var s = this.symbols[x];\n          s.multiplier = s.multiplier.multiply(this.multiplier);\n          s.distributeMultiplier();\n        }\n        this.toUnitMultiplier();\n      }\n      return this;\n    }\n    /**\n     * This method expands the exponent over the entire symbol just like\n     * distributeMultiplier\n     * @returns {Symbol}\n     */\n  }, {\n    key: \"distributeExponent\",\n    value: function distributeExponent() {\n      if (!this.power.equals(1)) {\n        var p = this.power;\n        for (var x in this.symbols) {\n          var s = this.symbols[x];\n          if (s.group === Groups_1.Groups.EX) {\n            s.power = (0, Core_1.multiply)(s.power, new Symbol(p));\n          } else {\n            this.symbols[x].power = this.symbols[x].power.multiply(p);\n          }\n        }\n        this.toLinear();\n      }\n      return this;\n    }\n    /**\n     * This method will attempt to up-convert or down-convert one symbol\n     * from one group to another. Not all symbols are convertible from one\n     * group to another however. In that case the symbol will remain\n     * unchanged.\n     * @param {number} group\n     * @param {string} imaginary\n     */\n  }, {\n    key: \"convert\",\n    value: function convert(group) {\n      var imaginary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      if (group > Groups_1.Groups.FN) {\n        //make a clone of this symbol;\n        var cp = this.clone();\n        //attach a symbols object and upgrade the group\n        this.symbols = {};\n        if (group === Groups_1.Groups.CB) {\n          //symbol of group Groups.CB hold symbols bound together through multiplication\n          //because of commutativity this multiplier can technically be anywhere within the group\n          //to keep track of it however it's easier to always have the top level carry it\n          cp.toUnitMultiplier();\n        } else {\n          //reset the symbol\n          this.toUnitMultiplier();\n        }\n        if (this.group === Groups_1.Groups.FN) {\n          cp.args = this.args;\n          delete this.args;\n          delete this.fname;\n        }\n        //the symbol may originate from the symbol i but this property no longer holds true\n        //after copying\n        if (this.isImgSymbol) delete this.isImgSymbol;\n        this.toLinear();\n        //attach a clone of this symbol to the symbols object using its proper key\n        this.symbols[cp.keyForGroup(group)] = cp;\n        this.group = group;\n        //objects by default don't have a length property. However, in order to keep track of the number\n        //of sub-symbols we have to impliment our own.\n        this.length = 1;\n      } else if (group === Groups_1.Groups.EX) {\n        //1^x is just one so check and make sure\n        if (!(this.group === Groups_1.Groups.N && this.multiplier.equals(1))) {\n          if (this.group !== Groups_1.Groups.EX) this.previousGroup = this.group;\n          if (this.group === Groups_1.Groups.N) {\n            this.value = this.multiplier.num.toString();\n            this.toUnitMultiplier();\n          }\n          //update the hash to reflect the accurate hash\n          else this.value = (0, Text_1.text)(this, 'hash');\n          this.group = Groups_1.Groups.EX;\n        }\n      } else if (group === Groups_1.Groups.N) {\n        var m = this.multiplier.toDecimal();\n        if (this.symbols) this.symbols = undefined;\n        new Symbol(this.group === Groups_1.Groups.P ? m * Math.pow(this.value, this.power) : m).clone(this);\n      } else if (group === Groups_1.Groups.P && this.group === Groups_1.Groups.N) {\n        this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\n        this.toUnitMultiplier(!imaginary);\n        this.group = Groups_1.Groups.P;\n      }\n      return this;\n    }\n    /**\n     * This method is one of the principal methods to make it all possible.\n     * It performs cleanup and prep operations whenever a symbols is\n     * inserted. If the symbols results in a 1 in a Groups.CB (multiplication)\n     * group for instance it will remove the redundant symbol. Similarly\n     * in a symbol of group Groups.PL or Groups.CP (symbols glued by multiplication) it\n     * will remove any dangling zeroes from the symbol. It will also\n     * up-convert or down-convert a symbol if it detects that it's\n     * incorrectly grouped. It should be noted that this method is not\n     * called directly but rather by the 'attach' method for addition groups\n     * and the 'combine' method for multiplication groups.\n     * @param {Symbol} symbol\n     * @param {String} action\n     */\n  }, {\n    key: \"insert\",\n    value: function insert(symbol, action) {\n      //this check can be removed but saves a lot of aggravation when trying to hunt down\n      //a bug. If left, you will instantly know that the error can only be between 2 symbols.\n      if (!(0, Utils_1.isSymbol)(symbol)) (0, Errors_1.err)('Object ' + symbol + ' is not of type Symbol!');\n      if (this.symbols) {\n        var group = this.group;\n        if (group > Groups_1.Groups.FN) {\n          var key = symbol.keyForGroup(group);\n          var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\n          if (action === 'add') {\n            var hash = key;\n            if (existing) {\n              //add them together using the parser\n              this.symbols[hash] = (0, Core_1.add)(existing, symbol);\n              //if the addition resulted in a zero multiplier remove it\n              if (this.symbols[hash].multiplier.equals(0)) {\n                delete this.symbols[hash];\n                this.length--;\n                if (this.length === 0) {\n                  this.convert(Groups_1.Groups.N);\n                  this.multiplier = new Frac_1.Frac(0);\n                }\n              }\n            } else {\n              this.symbols[key] = symbol;\n              this.length++;\n            }\n          } else {\n            //check if this is of group Groups.P and unwrap before inserting\n            if (symbol.group === Groups_1.Groups.P && (0, Utils_1.isInt)(symbol.power)) {\n              symbol.convert(Groups_1.Groups.N);\n            }\n            //transfer the multiplier to the upper symbol but only if the symbol numeric\n            if (symbol.group !== Groups_1.Groups.EX) {\n              this.multiplier = this.multiplier.multiply(symbol.multiplier);\n              symbol.toUnitMultiplier();\n            } else {\n              symbol.parens = symbol.multiplier.lessThan(0);\n              this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\n              symbol.toUnitMultiplier(true);\n            }\n            if (existing) {\n              //remove because the symbol may have changed\n              symbol = (0, Core_1.multiply)((0, Utils_1.remove)(this.symbols, key), symbol);\n              if (symbol.isConstant()) {\n                this.multiplier = this.multiplier.multiply(symbol.multiplier);\n                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\n              }\n\n              this.length--;\n              //clean up\n            }\n            //don't insert the symbol if it's 1\n            if (!symbol.isOne(true)) {\n              this.symbols[key] = symbol;\n              this.length++;\n            } else if (symbol.multiplier.lessThan(0)) {\n              this.negate(); //put back the sign\n            }\n          }\n          //clean up\n          if (this.length === 0) this.convert(Groups_1.Groups.N);\n          //update the hash\n          if (this.group === Groups_1.Groups.CP || this.group === Groups_1.Groups.CB) {\n            this.updateHash();\n          }\n        }\n      }\n      return this;\n    }\n    //the insert method for addition\n  }, {\n    key: \"attach\",\n    value: function attach(symbol) {\n      if (Array.isArray(symbol)) {\n        for (var i = 0; i < symbol.length; i++) {\n          this.insert(symbol[i], 'add');\n        }\n        return this;\n      }\n      return this.insert(symbol, 'add');\n    }\n    //the insert method for multiplication\n  }, {\n    key: \"combine\",\n    value: function combine(symbol) {\n      if (Array.isArray(symbol)) {\n        for (var i = 0; i < symbol.length; i++) {\n          this.insert(symbol[i], 'multiply');\n        }\n        return this;\n      }\n      return this.insert(symbol, 'multiply');\n    }\n    /**\n     * This method should be called after any major \"surgery\" on a symbol.\n     * It updates the hash of the symbol for example if the fname of a\n     * function has changed it will update the hash of the symbol.\n     */\n  }, {\n    key: \"updateHash\",\n    value: function updateHash() {\n      if (this.group === Groups_1.Groups.N) return;\n      if (this.group === Groups_1.Groups.FN) {\n        var contents = '',\n          args = this.args,\n          is_parens = this.fname === Settings_1.Settings.PARENTHESIS;\n        for (var i = 0; i < args.length; i++) {\n          contents += (i === 0 ? '' : ',') + (0, Text_1.text)(args[i]);\n        }\n        var fn_name = is_parens ? '' : this.fname;\n        this.value = fn_name + (is_parens ? contents : (0, Utils_1.inBrackets)(contents));\n      } else if (!(this.group === Groups_1.Groups.S || this.group === Groups_1.Groups.PL)) {\n        this.value = (0, Text_1.text)(this, 'hash');\n      }\n    }\n    /**\n     * this function defines how every group in stored within a group of\n     * higher order think of it as the switchboard for the library. It\n     * defines the hashes for symbols.\n     * @param {int} group\n     */\n  }, {\n    key: \"keyForGroup\",\n    value: function keyForGroup(group) {\n      var g = this.group;\n      var key;\n      if (g === Groups_1.Groups.N) {\n        key = this.value;\n      } else if (g === Groups_1.Groups.S || g === Groups_1.Groups.P) {\n        if (group === Groups_1.Groups.PL) key = this.power.toDecimal();else key = this.value;\n      } else if (g === Groups_1.Groups.FN) {\n        if (group === Groups_1.Groups.PL) key = this.power.toDecimal();else key = (0, Text_1.text)(this, 'hash');\n      } else if (g === Groups_1.Groups.PL) {\n        //if the order is reversed then we'll assume multiplication\n        //TODO: possible future dilemma\n        if (group === Groups_1.Groups.CB) key = (0, Text_1.text)(this, 'hash');else if (group === Groups_1.Groups.CP) {\n          if (this.power.equals(1)) key = this.value;else key = (0, Utils_1.inBrackets)((0, Text_1.text)(this, 'hash')) + Settings_1.Settings.POWER_OPERATOR + this.power.toDecimal();\n        } else if (group === Groups_1.Groups.PL) key = this.power.toString();else key = this.value;\n        return key;\n      } else if (g === Groups_1.Groups.CP) {\n        if (group === Groups_1.Groups.CP) {\n          key = (0, Text_1.text)(this, 'hash');\n        }\n        if (group === Groups_1.Groups.PL) key = this.power.toDecimal();else key = this.value;\n      } else if (g === Groups_1.Groups.CB) {\n        if (group === Groups_1.Groups.PL) key = this.power.toDecimal();else key = (0, Text_1.text)(this, 'hash');\n      } else if (g === Groups_1.Groups.EX) {\n        if (group === Groups_1.Groups.PL) key = (0, Text_1.text)(this.power);else key = (0, Text_1.text)(this, 'hash');\n      }\n      return key;\n    }\n    /**\n     * Symbols are typically stored in an object which works fine for most\n     * cases but presents a problem when the order of the symbols makes\n     * a difference. This function simply collects all the symbols and\n     * returns them as an array. If a function is supplied then that\n     * function is called on every symbol contained within the object.\n     * @param {Function} fn\n     * @param {Object} opt\n     * @param {Function} sort_fn\n     * @@param {Boolean} expand_symbol\n     * @param expand_symbol\n     * @returns {Array}\n     */\n  }, {\n    key: \"collectSymbols\",\n    value: function collectSymbols(fn, opt) {\n      var sort_fn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      var expand_symbol = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var collected = [];\n      if (!this.symbols) collected.push(this);else {\n        for (var x in this.symbols) {\n          var symbol = this.symbols[x];\n          if (expand_symbol && (symbol.group === Groups_1.Groups.PL || symbol.group === Groups_1.Groups.CP)) {\n            collected = collected.concat(symbol.collectSymbols());\n          } else collected.push(fn ? fn(symbol, opt) : symbol);\n        }\n      }\n      if (sort_fn === null) sort_fn = undefined; //WTF Firefox? Seriously?\n      return collected.sort(sort_fn); //sort hopefully gives us some sort of consistency\n    }\n    /**\n     * Returns the latex representation of the symbol\n     * @param {String} option\n     * @returns {String}\n     */\n  }, {\n    key: \"latex\",\n    value: function latex(option) {\n      return LaTeX_1.LaTeX.latex(this, option);\n    }\n    /**\n     * Returns the text representation of a symbol\n     * @param {String} option\n     * @returns {String}\n     */\n  }, {\n    key: \"text\",\n    value: function text() {\n      var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n      return (0, Text_1.text)(this, option);\n    }\n    /**\n     * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\n     * @@param {bool} abs Compares the absolute value\n     */\n  }, {\n    key: \"isOne\",\n    value: function isOne(abs) {\n      var f = abs ? 'absEquals' : 'equals';\n      if (this.group === Groups_1.Groups.N) return this.multiplier[f](1);else return this.power.equals(0);\n    }\n  }, {\n    key: \"isComposite\",\n    value: function isComposite() {\n      var g = this.group,\n        pg = this.previousGroup;\n      return g === Groups_1.Groups.CP || g === Groups_1.Groups.PL || pg === Groups_1.Groups.PL || pg === Groups_1.Groups.CP;\n    }\n  }, {\n    key: \"isCombination\",\n    value: function isCombination() {\n      var g = this.group,\n        pg = this.previousGroup;\n      return g === Groups_1.Groups.CB || pg === Groups_1.Groups.CB;\n    }\n  }, {\n    key: \"lessThan\",\n    value: function lessThan(n) {\n      return this.multiplier.lessThan(n);\n    }\n  }, {\n    key: \"greaterThan\",\n    value: function greaterThan(n) {\n      if (!(0, Utils_1.isSymbol)(n)) {\n        n = new Symbol(n);\n      }\n      // We can't tell for sure if a is greater than be if they're not both numbers\n      if (!this.isConstant(true) || !n.isConstant(true)) {\n        return false;\n      }\n      return this.multiplier.greaterThan(n.multiplier);\n    }\n    /**\n     * Get's the denominator of the symbol if the symbol is of class Groups.CB (multiplication)\n     * with other classes the symbol is either the denominator or not.\n     * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\n     * denominator and has to be found by looking at the actual symbols themselves.\n     */\n  }, {\n    key: \"getDenom\",\n    value: function getDenom() {\n      var retval, symbol;\n      symbol = this.clone();\n      //e.g. 1/(x*(x+1))\n      if (this.group === Groups_1.Groups.CB && this.power.lessThan(0)) symbol = (0, expand_1.expand)(symbol);\n      //if the symbol already is the denominator... DONE!!!\n      if (symbol.power.lessThan(0)) {\n        var d = (0, Parser_1.parse)(symbol.multiplier.den);\n        retval = symbol.toUnitMultiplier();\n        retval.power.negate();\n        retval = (0, Core_1.multiply)(d, retval); //put back the coeff\n      } else if (symbol.group === Groups_1.Groups.CB) {\n        retval = (0, Parser_1.parse)(symbol.multiplier.den);\n        for (var x in symbol.symbols) {\n          if (symbol.symbols[x].power < 0) retval = (0, Core_1.multiply)(retval, symbol.symbols[x].clone().invert());\n        }\n      } else retval = (0, Parser_1.parse)(symbol.multiplier.den);\n      return retval;\n    }\n  }, {\n    key: \"getNum\",\n    value: function getNum() {\n      var retval, symbol;\n      symbol = this.clone();\n      //e.g. 1/(x*(x+1))\n      if (symbol.group === Groups_1.Groups.CB && symbol.power.lessThan(0)) symbol = (0, expand_1.expand)(symbol);\n      //if the symbol already is the denominator... DONE!!!\n      if (symbol.power.greaterThan(0) && symbol.group !== Groups_1.Groups.CB) {\n        retval = (0, Core_1.multiply)((0, Parser_1.parse)(symbol.multiplier.num), symbol.toUnitMultiplier());\n      } else if (symbol.group === Groups_1.Groups.CB) {\n        retval = (0, Parser_1.parse)(symbol.multiplier.num);\n        symbol.each(function (x) {\n          if (x.power > 0 || x.group === Groups_1.Groups.EX && x.power.multiplier > 0) {\n            retval = (0, Core_1.multiply)(retval, x.clone());\n          }\n        });\n      } else {\n        retval = (0, Parser_1.parse)(symbol.multiplier.num);\n      }\n      return retval;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.text();\n    }\n    /**\n     * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\n     * names are then returned in alphabetical order.\n     * @param {Symbol} obj\n     * @param {Boolean} poly\n     * @param {Object} vars - An object containing the variables. Do not pass this in as it generated\n     * automatically. In the future this will be a Collector object.\n     * @returns {String[]} - An array containing variable names\n     */\n  }, {\n    key: \"variables\",\n    value: function variables() {\n      var poly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var vars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      vars = vars || {\n        c: [],\n        add: function add(value) {\n          if (this.c.indexOf(value) === -1 && isNaN(value)) this.c.push(value);\n        }\n      };\n      var group = this.group;\n      var prevgroup = this.previousGroup;\n      if (group === Groups_1.Groups.EX) {\n        if ((0, Utils_1.isSymbol)(this.power)) this.power.variables(poly, vars);\n      }\n      if (group === Groups_1.Groups.CP || group === Groups_1.Groups.CB || prevgroup === Groups_1.Groups.CP || prevgroup === Groups_1.Groups.CB) {\n        for (var x in this.symbols) {\n          if ((0, Utils_1.isSymbol)(this.symbols[x])) this.symbols[x].variables(poly, vars);\n        }\n      } else if (group === Groups_1.Groups.S || prevgroup === Groups_1.Groups.S) {\n        //very crude needs fixing. TODO\n        if (!(this.value === 'e' || this.value === 'pi' || this.value === Settings_1.Settings.IMAGINARY)) {\n          vars.add(this.value);\n        }\n      } else if (group === Groups_1.Groups.PL || prevgroup === Groups_1.Groups.PL) {\n        var fo = (0, Utils_1.firstObject)(this.symbols);\n        if ((0, Utils_1.isSymbol)(fo)) fo.variables(poly, vars);\n      } else if (group === Groups_1.Groups.EX) {\n        if (!isNaN(this.value)) {\n          vars.add(this.value);\n        }\n        if ((0, Utils_1.isSymbol)(this.power)) this.power.variables(poly, vars);\n      } else if (group === Groups_1.Groups.FN && !poly) {\n        for (var i = 0; i < this.args.length; i++) {\n          if ((0, Utils_1.isSymbol)(this.args[i])) this.args[i].variables(poly, vars);\n        }\n      }\n      return vars.c.sort();\n    }\n  }], [{\n    key: \"imaginary\",\n    value: function imaginary() {\n      var s = new Symbol(Settings_1.Settings.IMAGINARY);\n      s.imaginary = true;\n      return s;\n    }\n    /**\n     * Return nerdamer's representation of Infinity\n     * @param {int} negative -1 to return negative infinity\n     * @returns {Symbol}\n     */\n  }, {\n    key: \"infinity\",\n    value: function infinity() {\n      var negative = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var v = new Symbol('Infinity');\n      if (negative === -1) v.negate();\n      return v;\n    }\n  }, {\n    key: \"shell\",\n    value: function shell(group, value) {\n      var symbol = new Symbol(value);\n      symbol.group = group;\n      symbol.symbols = {};\n      symbol.length = 0;\n      return symbol;\n    }\n    //sqrt(x) -> x^(1/2)\n  }, {\n    key: \"unwrapSQRT\",\n    value: function unwrapSQRT(symbol, all) {\n      var p = symbol.power;\n      if (symbol.fname === Settings_1.Settings.SQRT && (symbol.isLinear() || all)) {\n        var t = symbol.args[0].clone();\n        t.power = t.power.multiply(new Frac_1.Frac(1 / 2));\n        t.multiplier = t.multiplier.multiply(symbol.multiplier);\n        symbol = t;\n        if (all) symbol.power = p.multiply(new Frac_1.Frac(1 / 2));\n      }\n      return symbol;\n    }\n  }, {\n    key: \"hyp\",\n    value: function hyp(a, b) {\n      a = a || new Symbol(0);\n      b = b || new Symbol(0);\n      return (0, Core_1.sqrt)((0, Core_1.add)((0, Core_1.pow)(a.clone(), new Symbol(2)), (0, Core_1.pow)(b.clone(), new Symbol(2))));\n    }\n    //converts to polar form array\n  }, {\n    key: \"toPolarFormArray\",\n    value: function toPolarFormArray(symbol) {\n      var re, im, r, theta;\n      re = symbol.realpart();\n      im = symbol.imagpart();\n      r = Symbol.hyp(re, im);\n      theta = re.equals(0) ? (0, Parser_1.parse)('pi/2') : Trig_1.Trig.atan((0, Core_1.divide)(im, re));\n      return [r, theta];\n    }\n    //removes parentheses\n  }, {\n    key: \"unwrapPARENS\",\n    value: function unwrapPARENS(symbol) {\n      if (symbol.fname === '') {\n        var r = symbol.args[0];\n        r.power = r.power.multiply(symbol.power);\n        r.multiplier = r.multiplier.multiply(symbol.multiplier);\n        if (symbol.fname === '') return Symbol.unwrapPARENS(r);\n        return r;\n      }\n      return symbol;\n    }\n  }, {\n    key: \"create\",\n    value:\n    //quickly creates a Symbol\n    function create(value, power) {\n      power = power === undefined ? 1 : power;\n      return (0, Parser_1.parse)('(' + value + ')^(' + power + ')');\n    }\n  }]);\n  return Symbol;\n}();\nexports.Symbol = Symbol;\n/**\n * Generates library's representation of a function. It's a fancy way of saying a symbol with\n * a few extras. The most important thing is that that it gives a fname and\n * an args property to the symbols in addition to changing its group to FN\n * @param {String} fn_name\n * @param {Array} params\n * @returns {Symbol}\n */\nfunction symfunction(fn_name, params) {\n  //call the proper function and return the result;\n  var f = new Symbol(fn_name);\n  f.group = Groups_1.Groups.FN;\n  if (typeof params === 'object') {\n    params = [].slice.call(params); //ensure an array\n  }\n\n  f.args = params;\n  f.fname = fn_name === Settings_1.Settings.PARENTHESIS ? '' : fn_name;\n  f.updateHash();\n  return f;\n}\nexports.symfunction = symfunction;\n/**\n * Serves as a bridge between numbers and bigNumbers\n * @param {Frac|Number} n\n * @returns {Symbol}\n */\nfunction bigConvert(n) {\n  if (!isFinite(n)) {\n    var sign = Math.sign(n);\n    var r = new Symbol(String(Math.abs(n)));\n    r.multiplier = r.multiplier.multiply(new Frac_1.Frac(sign));\n    return r;\n  }\n  if ((0, Utils_1.isSymbol)(n)) return n;\n  if (typeof n === 'number') {\n    try {\n      n = Frac_1.Frac.simple(n);\n    } catch (e) {\n      n = new Frac_1.Frac(n);\n    }\n  }\n  var symbol = new Symbol(0);\n  symbol.multiplier = n;\n  return symbol;\n}\nexports.bigConvert = bigConvert;","map":{"version":3,"mappings":"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","names":["Symbol","obj","isInfinity","decimal_js_1","toString","test","group","Groups_1","N","value","Settings_1","CONST_HASH","multiplier","Frac_1","S","imaginary","IMAGINARY","power","n","root","invert","rounded","e","equals","getNth","nthMultiplier","nthPower","CB","each","x","isNth","isToNth","powers","p","clone","push","min","sign","m","abs","mfactors","Math2_1","ifactor","out_","in_","lessThan","divide","subtract","multiply","t","xt","symfunction","PARENTHESIS","negate","symbol","isConstant","greaterThan","multivariate","g","vars","variables","length","v","symbols","sym","FN","args","contains","isComposite","isPoly","exclude_x","retval","PL","isLinear","s","CP","EX","arr","add","idx","a","stripVar","toArray","Errors_1","i","fn_group","hasFunc","b","P","same_pow","a_is_unit_multiplier","previousGroup","subbed","sub","find","stack","needle","nargs","arg","fname","SQRT","check_all","check_symbols","isPi","isE","isImaginary","realpart","imagpart","isInteger","wrt","names","indexOf","containsFunction","p2","p1","convert","Math","pow","toLinear","retainSign","isSymbolic","c","undefined","properties","l","isConversion","isUnit","keepSign","num","bigInt_1","isNegative","den","setPower","fn","deep","call","y","valueOf","variable","all","String","distributeMultiplier","power_only","is_one","absEquals","toUnitMultiplier","cp","isImgSymbol","keyForGroup","toDecimal","action","key","existing","hash","parens","isOne","updateHash","Array","isArray","insert","contents","is_parens","fn_name","POWER_OPERATOR","opt","sort_fn","expand_symbol","collected","concat","collectSymbols","sort","option","LaTeX_1","latex","f","pg","d","text","poly","isNaN","prevgroup","fo","negative","re","im","r","theta","hyp","Trig_1","atan","unwrapPARENS","exports","params","slice","bigConvert","isFinite","simple"],"sourceRoot":"","sources":["../../src/Types/Symbol.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\daniz\\\\TFG\\\\Aplicacion\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Settings_1 = require(\"../Settings\");\n\nvar Utils_1 = require(\"../Core/Utils\");\n/**\n * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\n * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\n */\n\n\nvar Scientific = /*#__PURE__*/function () {\n  function Scientific(value) {\n    _classCallCheck(this, Scientific);\n\n    this.sign = 1;\n    this.decp = 0;\n    var num = String(typeof value === 'undefined' ? 0 : value); //convert to a string\n    //remove the sign\n\n    if (num.startsWith('-')) {\n      this.sign = -1; //remove the sign\n\n      num = num.substr(1, num.length);\n    } else {\n      this.sign = 1;\n    }\n\n    if (Scientific.isScientific(num)) {\n      var _Scientific$fromScien = Scientific.fromScientific(num);\n\n      var _Scientific$fromScien2 = _slicedToArray(_Scientific$fromScien, 2);\n\n      this.coeff = _Scientific$fromScien2[0];\n      this.exponent = _Scientific$fromScien2[1];\n    } else {\n      // [this.coeff, this.exponent, this.decp, this.dec, this.wholes] = Scientific.convert(num);\n      var data = Scientific.convert(num);\n      this.coeff = data.coeff;\n      this.exponent = data.exponent;\n      this.dec = data.dec;\n      this.decp = data.decp;\n      this.wholes = data.wholes;\n    }\n  }\n\n  _createClass(Scientific, [{\n    key: \"round\",\n    value: function round(num) {\n      var n = this.copy();\n      num = Number(num); //cast to number for safety\n      //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\n      //we can round based on this\n\n      if (num === 0) {\n        n.coeff = n.coeff.charAt(0);\n      } else {\n        //get up to n-1 digits\n        var rounded = this.coeff.substring(0, num + 1); //get the next two\n\n        var next_two = this.coeff.substring(num + 1, num + 3); //the extra digit\n\n        var ed = parseInt(next_two.charAt(0));\n\n        if (parseInt(next_two.charAt(1)) > 4) {\n          ed++;\n        }\n\n        n.coeff = rounded + ed;\n      }\n\n      return n;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      var n = new Scientific(0);\n      n.coeff = this.coeff;\n      n.exponent = this.exponent;\n      n.sign = this.sign;\n      return n;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var retval;\n\n      if (Settings_1.Settings.SCIENTIFIC_IGNORE_ZERO_EXPONENTS && this.exponent === '0' && this.decp < n) {\n        if (this.decp === 0) retval = this.wholes;else retval = this.coeff;\n      } else {\n        var coeff = n === undefined ? this.coeff : Scientific.round(this.coeff, Math.min(n, this.decp || 1));\n        retval = this.exponent === '0' ? coeff : coeff + 'e' + this.exponent;\n      }\n\n      return (this.sign === -1 ? '-' : '') + retval;\n    }\n  }], [{\n    key: \"fromScientific\",\n    value: function fromScientific(num) {\n      var parts = String(num).toLowerCase().split('e');\n      var coeff = parts[0];\n      var exponent = parts[1];\n      return [coeff, exponent];\n    }\n  }, {\n    key: \"convert\",\n    value: function convert(num) {\n      //get wholes and decimals\n      var parts = num.split('.'); //make zero go away\n\n      var wholes = parts[0] || '';\n      var d = parts[1] || ''; //convert zero to blank strings\n\n      wholes = Scientific.removeLeadingZeroes(wholes);\n      d = Scientific.removeTrailingZeroes(d); //find the location of the decimal place which is right after the wholes\n\n      var dot_location = wholes.length; //add them together so we can move the dot\n\n      var n = wholes + d; //find the next number\n\n      var zeroes = Scientific.leadingZeroes(n).length; //set the exponent\n\n      var exponent = (dot_location - (zeroes + 1)).toString(); //set the coeff but first remove leading zeroes\n\n      var coeff = Scientific.removeLeadingZeroes(n);\n      coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0'); //the coeff decimal places\n\n      var dec = coeff.split('.')[1] || ''; //if it's undefined or zero it's going to blank\n\n      var decp = dec === '0' ? 0 : dec.length; //decimals\n\n      dec = d.toString();\n      return {\n        coeff: coeff,\n        exponent: exponent,\n        decp: decp,\n        dec: dec,\n        wholes: wholes\n      };\n    }\n  }, {\n    key: \"isScientific\",\n    value: function isScientific(num) {\n      return /\\d+\\.?\\d*e[+\\-]*\\d+/i.test(num);\n    }\n  }, {\n    key: \"leadingZeroes\",\n    value: function leadingZeroes(num) {\n      var match = num.match(/^(0*).*$/);\n      return match ? match[1] : '';\n    }\n  }, {\n    key: \"removeLeadingZeroes\",\n    value: function removeLeadingZeroes(num) {\n      var match = num.match(/^0*(.*)$/);\n      return match ? match[1] : '';\n    }\n  }, {\n    key: \"removeTrailingZeroes\",\n    value: function removeTrailingZeroes(num) {\n      var match = num.match(/0*$/);\n      return match ? num.substring(0, num.length - match[0].length) : '';\n    }\n  }, {\n    key: \"round\",\n    value: function round(c, n) {\n      var coeff = (0, Utils_1.nround)(c, n);\n      var m = String(coeff).split('.').pop();\n      var d = n - ((m === null || m === void 0 ? void 0 : m.length) || 0); //if we're asking for more significant figures\n\n      if (d > 0) {\n        coeff = coeff + new Array(d + 1).join('0');\n      }\n\n      return coeff;\n    }\n  }]);\n\n  return Scientific;\n}();\n\nexports.default = Scientific;","map":{"version":3,"mappings":"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","names":["Scientific","value","num","String","startsWith","sign","substr","length","isScientific","fromScientific","coeff","exponent","data","convert","dec","decp","wholes","n","copy","Number","charAt","rounded","substring","next_two","ed","parseInt","retval","Settings_1","SCIENTIFIC_IGNORE_ZERO_EXPONENTS","undefined","round","Math","min","parts","toLowerCase","split","d","removeLeadingZeroes","removeTrailingZeroes","dot_location","zeroes","leadingZeroes","toString","test","match","c","m","pop","Array","join","exports"],"sourceRoot":"","sources":["../../src/Types/Scientific.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
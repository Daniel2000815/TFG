{"ast":null,"code":"import lexer from \"./lexer\";\nimport parser from \"./parser\";\n/**\n * Parses a given math expression and returns a function that computes the result.\n * @param {String} expression Math expression to parse.\n * @param {Object} constants A map of constants that will be compiled into the resulting function.\n * @param {Object} options Options to Evaluatex.\n * @returns {fn} A function that takes an optional map of variables. When invoked, this function computes the math expression and returns the result. The function has fields `ast` and `expression`, which respectively hold the AST and original math expression.\n */\n\nexport default function evaluatex(expression) {\n  var constants = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var tokens = lexer(expression, constants, options);\n  var ast = parser(tokens).simplify();\n\n  var fn = function fn() {\n    var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return ast.evaluate(variables);\n  };\n\n  fn.ast = ast;\n  fn.expression = expression;\n  fn.tokens = tokens;\n  return fn;\n}","map":{"version":3,"names":["lexer","parser","evaluatex","expression","constants","options","tokens","ast","simplify","fn","variables","evaluate"],"sources":["C:/Users/daniz/TFG/Aplicacion/node_modules/evaluatex/src/evaluatex.js"],"sourcesContent":["import lexer from \"./lexer\";\nimport parser from \"./parser\";\n\n/**\n * Parses a given math expression and returns a function that computes the result.\n * @param {String} expression Math expression to parse.\n * @param {Object} constants A map of constants that will be compiled into the resulting function.\n * @param {Object} options Options to Evaluatex.\n * @returns {fn} A function that takes an optional map of variables. When invoked, this function computes the math expression and returns the result. The function has fields `ast` and `expression`, which respectively hold the AST and original math expression.\n */\nexport default function evaluatex(expression, constants = {}, options = {}) {\n    const tokens = lexer(expression, constants, options);\n    const ast = parser(tokens).simplify();\n    const fn = function(variables = {}) { return ast.evaluate(variables); };\n    fn.ast = ast;\n    fn.expression = expression;\n    fn.tokens = tokens;\n    return fn;\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,SAAT,CAAmBC,UAAnB,EAA6D;EAAA,IAA9BC,SAA8B,uEAAlB,EAAkB;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EACxE,IAAMC,MAAM,GAAGN,KAAK,CAACG,UAAD,EAAaC,SAAb,EAAwBC,OAAxB,CAApB;EACA,IAAME,GAAG,GAAGN,MAAM,CAACK,MAAD,CAAN,CAAeE,QAAf,EAAZ;;EACA,IAAMC,EAAE,GAAG,SAALA,EAAK,GAAyB;IAAA,IAAhBC,SAAgB,uEAAJ,EAAI;IAAE,OAAOH,GAAG,CAACI,QAAJ,CAAaD,SAAb,CAAP;EAAiC,CAAvE;;EACAD,EAAE,CAACF,GAAH,GAASA,GAAT;EACAE,EAAE,CAACN,UAAH,GAAgBA,UAAhB;EACAM,EAAE,CAACH,MAAH,GAAYA,MAAZ;EACA,OAAOG,EAAP;AACH"},"metadata":{},"sourceType":"module"}
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.omit = omit;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Omits "keysToOmit" from "object"
function omit(object, keysToOmit) {
  var result = {};

  Object.keys(object).forEach(function (key) {
    if (keysToOmit.indexOf(key) === -1) {
      result[key] = object[key];
    }
  });

  return result;
}

var PROPS_TO_OMIT = ['children', 'contentClassName', 'ratio', 'ratioClassName', 'style', 'tagName'];

var CONTENT_DIV_STYLE = {
  height: '100%',
  left: 0,
  position: 'absolute',
  top: 0,
  width: '100%'
};

var RATIO_DIV_STYLE = {
  height: 0,
  position: 'relative',
  width: '100%'
};

var Ratio = function (_Component) {
  _inherits(Ratio, _Component);

  function Ratio() {
    _classCallCheck(this, Ratio);

    return _possibleConstructorReturn(this, (Ratio.__proto__ || Object.getPrototypeOf(Ratio)).apply(this, arguments));
  }

  _createClass(Ratio, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          className = _props.className,
          contentClassName = _props.contentClassName,
          ratio = _props.ratio,
          ratioClassName = _props.ratioClassName,
          style = _props.style,
          tagName = _props.tagName;


      var Tag = tagName;

      var cssStyle = _extends({
        display: 'block'
      }, style);

      var paddingTop = ratio === 0 ? 100 : 100 / ratio;

      return _react2.default.createElement(
        Tag,
        _extends({}, omit(this.props, PROPS_TO_OMIT), {
          className: 'Ratio ' + className,
          style: cssStyle
        }),
        _react2.default.createElement(
          'div',
          {
            className: 'Ratio-ratio ' + ratioClassName,
            style: _extends({}, RATIO_DIV_STYLE, {
              paddingTop: paddingTop + '%'
            })
          },
          _react2.default.createElement(
            'div',
            {
              className: 'Ratio-content ' + contentClassName,
              style: CONTENT_DIV_STYLE
            },
            children
          )
        )
      );
    }
  }]);

  return Ratio;
}(_react.Component);

exports.default = Ratio;


Ratio.propTypes = {
  children: _propTypes2.default.any,
  className: _propTypes2.default.string,
  contentClassName: _propTypes2.default.string,
  ratio: _propTypes2.default.number,
  ratioClassName: _propTypes2.default.string,
  style: _propTypes2.default.object,
  tagName: _propTypes2.default.string
};

Ratio.defaultProps = {
  children: null,
  className: '',
  contentClassName: '',
  ratio: 1,
  ratioClassName: '',
  style: {},
  tagName: 'div'
};
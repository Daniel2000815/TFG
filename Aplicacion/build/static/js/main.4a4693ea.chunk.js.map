{"version":3,"sources":["Shader.js","defaultShader.js","primitives.js","fragmentShader.js","FloatInput.js","Dropdown.js","GraphContext.js","CustomHandle.js","PrimitiveNode.js","BooleanNode.js","CustomControls.js","Graph.js","ButtonEdge.js","App.js","fragmentShaderMovable.js","index.js"],"names":["Shader","props","useEffect","shader","uniforms","style","ratio","fs","key","sdf","FloatInput","FormControl","sx","m","size","InputLabel","label","OutlinedInput","value","val","type","onChange","ev","handleChange","parseFloat","target","Dropdown","React","useState","open","setOpen","onClick","minWidth","Select","autoWidth","items","map","item","MenuItem","GraphContext","createContext","GraphProvider","Provider","CustomHandle","id","width","height","position","Primitives","Sphere","Box","Torus","Cylinder","BooleanOperations","Union","Difference","Intersection","CustomControls","save","load","nodeTypes","primitiveNode","data","primitive","setPrimitive","setSdf","showCanvas","setShowCanvas","inputs","setInputs","inputLabels","setInputLabels","inputsActive","setInputsActive","sharedFunctions","useContext","console","log","JSON","stringify","updateNodeSdf","toFixed","prepareInputs","label1","label2","label3","className","Object","values","newVal","keys","children","join","color","margin","Button","variant","endIcon","booleanNode","operation","setOperation","length","onConnect","params","top","updateBooleanPrimitive","source","edgeTypes","buttonEdge","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","edgePath","getBezierPath","getEdgeCenter","edgeCenterX","edgeCenterY","d","x","foreignObjectSize","y","requiredExtensions","removeEdge","initialNodes","Graph","useNodesState","nodes","setNodes","onNodesChange","useEdgesState","edges","setEdges","onEdgesChange","rfInstance","setRfInstance","setId","newSdf","parent","nodesCopy","find","node","child","newInputs","edgeId","edge","e","newEdges","filter","nds","newChildren","c","onLoad","flow","parse","localStorage","getItem","viewport","zoom","tabIndex","onKeyDown","toLowerCase","xPos","yPos","nodeId","newPrimitiveNode","push","newBooleanNode","sourceNode","n","eds","addEdge","animated","markerEnd","MarkerType","Arrow","onInit","snapToGrid","fitView","gap","toObject","setItem","NavBarExample","Navbar","appearance","Header","Body","Nav","Item","eventKey","pullRight","icon","Icon","MainContent","Grid","fluid","Row","Col","xs","borderRight","layoutStyles","display","flexDirection","App","flexGrow","Footer","Panel","bordered","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4a4693ea.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport Ratio from \"react-ratio\";\r\nimport ShadertoyReact from \"shadertoy-react\";\r\nimport { defaultShader } from \"./defaultShader\";\r\n\r\nexport default function Shader(props) {\r\n  useEffect(() => {}, [props.shader, props.uniforms]);\r\n\r\n  return (\r\n    <div style={props.style}>\r\n      <Ratio ratio={1}>\r\n        <ShadertoyReact\r\n          fs={props.shader ? props.shader : defaultShader()}\r\n          key={props.shader}\r\n          uniforms={props.uniforms}\r\n        />\r\n      </Ratio>\r\n    </div>\r\n  );\r\n}\r\n","export const defaultShader = () => `\r\n#define T_MAX 30.0\r\n\r\nstruct point_light\r\n{\r\n    vec3 p;\r\n    vec3 i;\r\n};\r\n\r\nfloat sdBox( vec3 p, vec3 b )\r\n{\r\n  vec3 d = abs(p) - b;\r\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\r\n}\r\n\r\nvec3 opRep( in vec3 p, in vec3 c)\r\n{\r\n    vec3 q = mod(p,c)-0.5*c;\r\n    return q;\r\n}\r\n\r\nfloat sdf(in vec3 p, out int matid)\r\n{\r\n    float sphere_sdf = length(p - vec3(0, 1, 0)) - 1.0;\r\n    float box_sdf = sdBox(p - vec3(0, 1, 0), vec3(0.8));\r\n    float obj_sdf = max(-sphere_sdf, box_sdf);\r\n    float floor_sdf = abs(p.y);\r\n    \r\n    float sdf = min(obj_sdf, floor_sdf);\r\n    if (sdf == obj_sdf)\r\n    {\r\n        matid = 1;\r\n    }\r\n    else\r\n    {\r\n        matid = 0;\r\n    }\r\n    \r\n    return sdf;\r\n}\r\n\r\nvec3 sdf_n(in vec3 p)\r\n{\r\n    vec3 res = vec3(0);\r\n    \r\n    int ignored;\r\n    res.x = sdf(p + vec3(0.001, 0, 0), ignored) - sdf(p, ignored);\r\n    res.y = sdf(p + vec3(0, 0.001, 0), ignored) - sdf(p, ignored);\r\n    res.z = sdf(p + vec3(0, 0, 0.001), ignored) - sdf(p, ignored);\r\n    \r\n    return normalize(res);\r\n}\r\n\r\nfloat intersect(in vec3 ro, in vec3 rd, out int matid)\r\n{\r\n\tfloat t = 0.0;\r\n    matid = -1;\r\n    for (int i = 0; i < 256; ++i)\r\n    {\r\n        if (t > T_MAX)\r\n        {\r\n            break;\r\n        }\r\n        \r\n        int curr_matid = -1;\r\n\t\tfloat d = sdf(ro + t*rd, curr_matid);\r\n        if (d < 0.0001)\r\n        {\r\n            matid = curr_matid;\r\n            break;\r\n        }\r\n        t += d;\r\n    }\r\n    return t;\r\n}\r\n\r\nfloat dir_shadow(in vec3 p, in vec3 l)\r\n{\r\n    float t = 0.15;\r\n    float t_max = 20.0;\r\n    \r\n    float res = 1.0;\r\n    for (int i = 0; i < 256; ++i)\r\n    {\r\n        if (t > t_max) break;\r\n        \r\n        int ignored;\r\n        float d = sdf(p + t*l, ignored);\r\n        if (d < 0.01)\r\n        {\r\n            return 0.0;\r\n        }\r\n        t += d;\r\n        res = min(res, 8.0 * d / t);\r\n    }\r\n    \r\n    return res;\r\n}\r\n\r\nfloat point_shadow(in vec3 p, in vec3 light_p)\r\n{\r\n    vec3 l = normalize(light_p - p);\r\n        \r\n    float t = 0.15;\r\n    float t_max = distance(light_p, p);\r\n    \r\n    float res = 1.0;\r\n    for (int i = 0; i < 256; ++i)\r\n    {\r\n        if (t > t_max) break;\r\n        \r\n        int ignored;\r\n        float d = sdf(p + t*l, ignored);\r\n        if (d < 0.01)\r\n        {\r\n            return 0.0;\r\n        }\r\n        t += d;\r\n        res = min(res, 64.0 * d / t);\r\n    }\r\n    \r\n    return res;\r\n}\r\n\r\nfloat ao(in vec3 p, in vec3 n)\r\n{\r\n    float e = 0.1;\r\n    float res = 0.0;\r\n    \r\n#define AO_ITER 5\r\n    \r\n    int ignored;\r\n    float weight = 0.5;\r\n    for (int i = 1; i <= AO_ITER; ++i)\r\n    {\r\n        float d = e * float(i);\r\n        res += weight * (1.0 - (d - sdf(p + d * n, ignored)));\r\n        weight *= 0.5;\r\n    }\r\n    \r\n    return res;\r\n}\r\n\r\nvec3 render(in vec2 fragCoord)\r\n{\r\n   \tvec2 uv = 2.0 * fragCoord / iResolution.xy - 1.0;\r\n    uv.x *= iResolution.x / iResolution.y;\r\n     \r\n    float cam_d = 3.0;\r\n    float time = 0.6;\r\n    vec3 ro = vec3(cam_d*sin(time), 2.5, cam_d*cos(time));\r\n    vec3 at = vec3(0, 1, 0);\r\n    vec3 cam_z = normalize(at - ro);\r\n    vec3 cam_x = normalize(cross(vec3(0,1,0), cam_z));\r\n    vec3 cam_y = cross(cam_z, cam_x);\r\n    vec3 rd = normalize(uv.x * cam_x + uv.y * cam_y + 1.73 * cam_z);\r\n\t\r\n    vec3 sky = vec3(0.02);\r\n    vec3 col = vec3(0);\r\n    \r\n    int matid = -1;\r\n    float t = intersect(ro, rd, matid);\r\n    if (matid != -1)\r\n    { \r\n        vec3 p = ro + t*rd;\r\n        vec3 n = sdf_n(p);\r\n        \r\n#define PLIGHT_COUNT 1 \r\n        point_light plights[PLIGHT_COUNT];\r\n        plights[0] = point_light(vec3(2, 1, 1), vec3(20));\r\n\r\n        vec3 direct_light = vec3(0);\r\n        for (int plight_index = 0; plight_index < PLIGHT_COUNT; ++plight_index)\r\n        {\r\n            vec3 light_i = plights[plight_index].i;\r\n            vec3 light_p = plights[plight_index].p;\r\n        \tfloat light_r = dot(light_p - p, light_p - p);\r\n        \tvec3 l = normalize(light_p - p);\r\n        \r\n        \tdirect_light += point_shadow(p, light_p) * max(0.0, dot(n, l)) * light_i / (light_r * light_r);\r\n        }\r\n\r\n        vec3 indirect_light = ao(p, n) * sky;\r\n        \r\n        vec3 albedo = vec3(0.9);      \r\n\t\tcol = albedo * (0.7 * direct_light + indirect_light);\r\n        \r\n        col = mix(col, vec3(0), clamp(pow(t / T_MAX, 2.0), 0.0, 1.0));\r\n    }\r\n    \r\n    return col;\r\n}\r\n\r\nvec3 tonemap(in vec3 col)\r\n{\r\n    return col / (1.0 + col);\r\n}\r\n\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n{\r\n#if 0\r\n    vec3 col = tonemap(render(fragCoord));\r\n#else\r\n    vec3 col = vec3(0);\r\n    col += tonemap(render(fragCoord + vec2(0.25, 0.25)));\r\n    col += tonemap(render(fragCoord + vec2(0.25, -0.25)));\r\n    col += tonemap(render(fragCoord + vec2(-0.25, -0.25)));\r\n    col += tonemap(render(fragCoord + vec2(-0.25, 0.25)));\r\n    col /= 4.0;\r\n#endif\r\n    \r\n    col = sqrt(col);\r\n    fragColor = vec4(col, 1.0);\r\n}\r\n`;\r\n","export const primitives = () => `\r\n    float sphere( vec3 p, float radius )\r\n    {\r\n    return length(p)-radius;\r\n    }\r\n\r\n    float box( vec3 p, vec3 size )\r\n    {\r\n    vec3 q = abs(p) - size;\r\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\r\n    }\r\n\r\n    float torus( vec3 p, vec2 size )\r\n    {\r\n    vec2 q = vec2(length(p.xz)-size.x,p.y);\r\n    return length(q)-size.y;\r\n    }\r\n\r\n    float cylinder( vec3 p, float h, float r )\r\n    {\r\n    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\r\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\r\n    }\r\n\r\n`","import { primitives } from \"./primitives\";\r\n\r\nexport const fs = (sdf) => {\r\n  return `\r\n  // https://thebookofshaders.com/03/?lan=es\r\n// https://thebookofshaders.com/03/\r\n// http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#putting-it-all-together\r\n// https://www.shadertoy.com/view/llt3R4\r\n\r\n// camera\r\n// https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-ray-tracing/how-does-it-work\r\n// http://www.codinglabs.net/article_world_view_projection_matrix.aspx\r\n// https://iopscience.iop.org/article/10.1088/0031-9155/52/12/006/meta\r\n// https://www.ingebook.com/ib/NPcd/IB_BooksVis?cod_primaria=1000187&codigo_libro=6575\r\n\r\n#ifdef GL_ES\r\nprecision mediump float;\r\n#endif\r\n\r\nconst int AA = 3;\r\nconst int MAX_MARCHING_STEPS = 255;\r\nconst float EPSILON = 0.0001;\r\nconst float MIN_DIST = 0.0;\r\nconst float MAX_DIST = 100.0;\r\n\r\n${primitives()}\r\n\r\nstruct Material\r\n{\r\n    vec3 specular;\r\n    vec3 diffuse;\r\n    vec3 ambient;\r\n    float smoothness;\r\n};\r\n\r\nfloat map( in vec3 p )\r\n{\r\n    return ${sdf};\r\n}\r\n\r\nvec3 rayDirection(vec2 size, vec2 fragCoord) {\r\n    const float fov = 45.0;\r\n\r\n    vec2 xy = fragCoord - size / 2.0;\r\n    float z = size.y / tan(radians(fov) / 2.0);\r\n\r\n    return normalize(vec3(xy, -z));\r\n}\r\n\r\nvec3 normal(vec3 p) {\r\n    return normalize(vec3(\r\n        map(vec3(p.x + EPSILON, p.y, p.z)) - map(vec3(p.x - EPSILON, p.y, p.z)),\r\n        map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\r\n        map(vec3(p.x, p.y, p.z  + EPSILON)) - map(vec3(p.x, p.y, p.z - EPSILON))\r\n    ));\r\n}\r\n\r\nvec3 lighting(vec3 p, vec3 n, vec3 eye, Material mat){\r\n    vec3 ambient = vec3(0.5);\r\n\r\n    vec3 lights_pos[2];\r\n    lights_pos[0] = vec3(4.0, 2.0, 2.0);\r\n    lights_pos[1] = vec3(-4.0, -2.0, -2.0);\r\n\r\n    vec3 lights_color[2];\r\n    lights_color[0] = vec3(1.0, 1.0, 1.0);\r\n    lights_color[1] = vec3(1.0, 1.0, 1.0);\r\n\r\n    vec3 Ip = mat.ambient * ambient;\r\n\r\n    for(int i=0; i<2; i++){\r\n        vec3 Lm = normalize(lights_pos[i] - p);\r\n        vec3 Rm = normalize(2.0*(dot(Lm,n))*n - Lm);    // reflect(-Lm, n)\r\n        vec3 V  = normalize(eye - p);\r\n\r\n        float LN = dot(Lm, n);\r\n        float RV = dot(Rm, V);\r\n\r\n        if (LN < 0.0)   // Light not visible\r\n            Ip += vec3(0.0, 0.0, 0.0);\r\n        else if (RV < 0.0)  // opposite direction as viewer, apply only diffuse\r\n            Ip += lights_color[i] * (mat.diffuse * LN);\r\n        else\r\n            Ip += lights_color[i] * (mat.diffuse*LN + mat.specular*pow(RV, mat.smoothness));\r\n    }\r\n\r\n    return Ip;\r\n}\r\n\r\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\r\n    // Based on gluLookAt man page\r\n    vec3 f = normalize(center - eye);\r\n    vec3 s = normalize(cross(f, up));\r\n    vec3 u = cross(s, f);\r\n    return mat4(\r\n        vec4(s, 0.0),\r\n        vec4(u, 0.0),\r\n        vec4(-f, 0.0),\r\n        vec4(0.0, 0.0, 0.0, 1)\r\n    );\r\n}\r\n\r\nfloat clamp(float val){\r\n    if(val < 0.0)   return 0.0;\r\n    if(val >1.0)    return 1.0;\r\n\r\n    return val;\r\n}\r\n\r\nvoid main() {\r\n    vec3 total = vec3(0.0);\r\n\r\n    Material mat_red = Material(\r\n        vec3(1.0, 1.0, 1.0),    // specular\r\n        vec3(color.xyz),        // diffuse\r\n        vec3(0.2),              // ambient\r\n        10.0                    // shiness\r\n    );\r\n    vec3 eye                    = vec3(10.0*cos(iTime), 1.0, 10.0*sin(iTime));\r\n    const vec3 backGroundColor  = vec3(0.7);\r\n\r\n    for( int m=0; m<AA; m++ ){\r\n        for( int n=0; n<AA; n++ ){\r\n            float depth = MIN_DIST;\r\n\r\n            // create view ray\r\n            vec3 ray = rayDirection(iResolution.xy, gl_FragCoord.xy);\r\n            mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\r\n            vec3 worldDir = (viewToWorld * vec4(ray, 0.0)).xyz;\r\n\r\n            // raytracing\r\n            for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\r\n                float dist = map(eye + depth * worldDir);\r\n                if (dist < EPSILON) {\r\n                    vec3 p = eye + depth * worldDir;\r\n                    vec3 n = normal(p);\r\n\r\n                    total = total + lighting(p, n, eye, mat_red);\r\n                    \r\n                    break;\r\n                }\r\n\r\n                depth += dist;\r\n\r\n                if (depth >= MAX_DIST) {\r\n                    total = total + backGroundColor;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    total /= float(AA*AA);\r\n    gl_FragColor = vec4( total, 1.0 );\r\n}\r\n\r\n`;\r\n};\r\n","import React from 'react';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\n\r\nexport default function FloatInput(props) {\r\n  return (\r\n    <FormControl sx={{ m: 1 }}size=\"small\">\r\n      <InputLabel>{props.label}</InputLabel>\r\n      <OutlinedInput\r\n        value={props.val}\r\n        type=\"number\"\r\n        onChange={(ev) => props.handleChange(parseFloat(ev.target.value))}\r\n        label={props.label}\r\n      />\r\n    </FormControl>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\n\r\nexport default function Dropdown(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  return (\r\n    <FormControl onClick={() => setOpen(!open)} sx={{ m: 1, minWidth: 80 }}>\r\n      <InputLabel>{props.label}</InputLabel>\r\n      <Select\r\n        value={props.value}\r\n        onChange={(ev) => props.onChange(ev.target.value)}\r\n        autoWidth\r\n        open={open}\r\n        label=\"Primitive\"\r\n      >\r\n        {props.items.map((item) => (\r\n          <MenuItem key={item} value={item}>{item}</MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n","import React from 'react';\r\nconst GraphContext = React.createContext({});\r\nexport const GraphProvider = GraphContext.Provider;\r\nexport default GraphContext;","import React from \"react\";\r\nimport { Handle } from \"react-flow-renderer\";\r\n\r\nexport default function CustomHandle(props) {\r\n  return (\r\n    <>\r\n    {props.type === \"source\" ?\r\n        <Handle\r\n        type=\"source\"\r\n        id={props.id}\r\n        style={{ ...props.style, width: \"12px\", height: \"12px\" }}\r\n        position=\"right\"\r\n        />\r\n        :\r\n        <Handle\r\n        type=\"target\"\r\n        id={props.id ? props.id : \"0\"}\r\n        style={{ ...props.style, width: \"12px\", height: \"12px\" }}\r\n        position=\"left\"\r\n        />\r\n    }\r\n    </>\r\n  );\r\n}\r\n","import React, {useContext, useState} from \"react\";\r\nimport Shader from \"./Shader.js\";\r\nimport { fs } from \"./fragmentShader.js\";\r\nimport { useEffect } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\r\nimport KeyboardArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\r\nimport FloatInput from \"./FloatInput.js\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport GraphContext from \"./GraphContext.js\";\r\nimport CustomHandle from \"./CustomHandle.js\";\r\n\r\nconst Primitives = {\r\n  Sphere: \"Sphere\",\r\n  Box: \"Box\",\r\n  Torus: \"Torus\",\r\n  Cylinder: \"Cylinder\"\r\n};\r\n\r\nexport default function PrimitiveNode({ data, id }) {\r\n  const [primitive, setPrimitive] = React.useState(Primitives.Sphere);\r\n  const [sdf, setSdf] = useState(data.sdf);\r\n  const [showCanvas, setShowCanvas] = React.useState(false);\r\n  const [inputs, setInputs] = React.useState([1.0, 1.0, 1.0]);\r\n  const [inputLabels, setInputLabels] = React.useState([\"Radius\", \"\", \"\"]);\r\n  const [inputsActive, setInputsActive] = React.useState([true, false, false]);\r\n\r\n  const sharedFunctions = useContext(GraphContext);\r\n\r\n  const handleChange = (newPrimitive, newSdf) => {\r\n    if (newPrimitive == Primitives.Sphere) {\r\n      console.log(\"YES\");\r\n    }\r\n    setPrimitive(newPrimitive);\r\n    setSdf(newSdf);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(`${id} HA RECIBIDO NUEVOS DATOS:`);\r\n    console.log(JSON.stringify(data));\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    console.log(`SDF DE ${id} MODIFICADO`);\r\n    sharedFunctions.updateNodeSdf(id, sdf);\r\n  }, [sdf]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"ACTUALIZADO SDF\");\r\n    if (primitive == Primitives.Sphere) {\r\n      setSdf(`sphere(p, ${inputs[0].toFixed(4)})`);\r\n      prepareInputs(\"radius\");\r\n    } \r\n    else if (primitive == Primitives.Box) {\r\n      setSdf(\r\n        `box(p, vec3(\r\n          ${inputs[0].toFixed(4)}, \r\n          ${inputs[1].toFixed(4)}, \r\n          ${inputs[2].toFixed(4)}\r\n          )\r\n        )`\r\n      );\r\n      prepareInputs(\"sx\", \"sy\", \"sz\");\r\n    }\r\n    else if (primitive == Primitives.Torus) {\r\n      setSdf(\r\n        `torus(p, vec2(\r\n          ${inputs[0].toFixed(4)}, \r\n          ${inputs[1].toFixed(4)}\r\n          )\r\n        )`\r\n      );\r\n      prepareInputs(\"hole\", \"thickness\");\r\n    }\r\n    else if (primitive == Primitives.Cylinder) {\r\n      setSdf(\r\n        `cylinder(p, \r\n          ${inputs[0].toFixed(4)}, \r\n          ${inputs[1].toFixed(4)}\r\n        )`\r\n      );\r\n      prepareInputs(\"height\", \"radius\");\r\n    }\r\n  }, [primitive, inputs]);\r\n\r\n  const prepareInputs = (label1, label2=\"\", label3=\"\") =>{\r\n    setInputLabels([label1, label2, label3]);\r\n    setInputsActive([label1, label2, label3]);\r\n  }\r\n\r\n  return (\r\n    <div className=\"custom-node\">\r\n      <div className=\"custom-node-header\">Primitive</div>\r\n      <Dropdown value={primitive} onChange={setPrimitive} items={Object.values(Primitives)} label=\"Primitive\"/> \r\n      {inputsActive[0] ? <FloatInput val={inputs[0]} handleChange={(newVal) => setInputs([newVal, inputs[1], inputs[2]])} label={inputLabels[0]} /> : null}\r\n      {inputsActive[1] ? <FloatInput val={inputs[1]} handleChange={(newVal) => setInputs([inputs[0], newVal, inputs[2]])} label={inputLabels[1]} /> : null}\r\n      {inputsActive[2] ? <FloatInput val={inputs[2]} handleChange={(newVal) => setInputs([inputs[0], inputs[1], newVal])} label={inputLabels[2]} /> : null}\r\n\r\n      \r\n      <p>{`ID: ${id}`}</p>\r\n      <p>CHILDREN: {Object.keys(data.children).map(key => `${data.children[key]}`).join(', ')}</p>\r\n      <p>SDF: {sdf}</p>\r\n\r\n      <CustomHandle type=\"source\"/>\r\n\r\n      {showCanvas ? (\r\n        <Shader\r\n          shader={fs(sdf)}\r\n          uniforms={{ color: { type: \"3fv\", value: [1.0, 1.0, 0.0] } }}\r\n          style={{ margin: \"10px\" }}\r\n        />\r\n      ) : null}\r\n\r\n      <Button\r\n        onClick={() => setShowCanvas(!showCanvas)}\r\n        variant=\"contained\"\r\n        className=\"custom-node-creater\"\r\n        size=\"small\"\r\n        endIcon={\r\n          showCanvas ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />\r\n        }\r\n      >\r\n        {showCanvas ? \"Hide canvas\" : \"Show canvas\"}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport { Handle } from \"react-flow-renderer\";\r\nimport Shader from \"./Shader\";\r\nimport { fs } from \"./fragmentShader\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport CustomHandle from \"./CustomHandle\";\r\nimport GraphContext from \"./GraphContext.js\";\r\nimport Button from \"@mui/material/Button\";\r\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\r\nimport KeyboardArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\r\n\r\nconst BooleanOperations = {\r\n  Union: \"Union\",\r\n  Difference: \"Difference\",\r\n  Intersection: \"Intersection\",\r\n};\r\n\r\n\r\n\r\nexport default function BooleanNode({ data, id }) {\r\n  const [operation, setOperation] = React.useState(BooleanOperations.Union);\r\n  const [sdf, setSdf] = React.useState(data.sdf);\r\n  const [showCanvas, setShowCanvas] = React.useState(false);\r\n\r\n  const sharedFunctions = useContext(GraphContext);\r\n  \r\n  useEffect(() => {\r\n    console.log(`${id} HA RECIBIDO NUEVOS DATOS:`);\r\n    console.log(JSON.stringify(data));\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    console.log(`SDF DE ${id} MODIFICADO`);\r\n    sharedFunctions.updateNodeSdf(id, sdf);\r\n  }, [sdf]);\r\n\r\n  useEffect(() => {\r\n    console.log(`SE HAN MODIFICADO LOS SDF EN NODO BOOLEANO. AHORA HAY ${Object.keys(data.inputs).length}`);\r\n    const inputs = `${Object.keys(data.inputs).map(key => `${data.inputs[key]}`).join(', ')}`;\r\n    console.log(inputs);\r\n    if(operation===BooleanOperations.Union)\r\n      setSdf(`min(${inputs})`)\r\n    else if(operation===BooleanOperations.Intersection)\r\n      setSdf(`max(${inputs})`)\r\n    else if(operation===BooleanOperations.Difference)\r\n      setSdf(`max(-${inputs})`)\r\n\r\n  }, [data, operation]);\r\n\r\n  return (\r\n    <div className=\"custom-node\">\r\n      <div className=\"custom-node-header\">Boolean</div>\r\n      <p>{`ID: ${id}`}</p>\r\n      <p>CHILDREN: {Object.keys(data.children).map(key => `${data.children[key]}`).join(', ')}</p>\r\n      <p>SDF: {sdf}</p>\r\n\r\n      <Dropdown\r\n        value={operation}\r\n        onChange={setOperation}\r\n        items={Object.values(BooleanOperations)}\r\n        label=\"Operation\"\r\n      />\r\n\r\n      <CustomHandle id={\"0\"} type=\"target\" onConnect={(params) => console.log(\"handle ss\", params)} style={{ top: \"45%\" }}/>\r\n      <CustomHandle id={\"1\"} type=\"target\" onConnect={(params) => data.updateBooleanPrimitive(params.source, params.target)} style={{ top: \"55%\" }}/>\r\n      <CustomHandle id={\"2\"} type=\"source\" onConnect={(params) => console.log(\"handle onsConnect\", params)} style={{ top: \"50%\" }}/>\r\n\r\n      {showCanvas ? (\r\n        <Shader\r\n          shader={fs(sdf)}\r\n          uniforms={{ color: { type: \"3fv\", value: [1.0, 1.0, 0.0] } }}\r\n          style={{ margin: \"10px\" }}\r\n        />\r\n      ) : null}\r\n\r\n      <Button\r\n        onClick={() => setShowCanvas(!showCanvas)}\r\n        variant=\"contained\"\r\n        className=\"custom-node-creater\"\r\n        size=\"small\"\r\n        endIcon={\r\n          showCanvas ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />\r\n        }\r\n      >\r\n        {showCanvas ? \"Hide canvas\" : \"Show canvas\"}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Controls, ControlButton } from 'react-flow-renderer';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport FileOpenIcon from '@mui/icons-material/FileOpen';\r\n\r\nexport default function CustomControls(props) {\r\n  return (\r\n    <Controls>\r\n      <ControlButton onClick={() => props.save()}>\r\n        <SaveIcon />\r\n      </ControlButton>\r\n      <ControlButton onClick={() => props.load()}>\r\n        <FileOpenIcon />\r\n      </ControlButton>\r\n    </Controls>\r\n  );\r\n}","import React, {useState} from \"react\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"react-flow-renderer\";\r\nimport PrimitiveNode from \"./PrimitiveNode.js\";\r\nimport BooleanNode from \"./BooleanNode.js\";\r\nimport ButtonEdge from \"./ButtonEdge\";\r\nimport ShaderNode from \"./ShaderNode.js\";\r\nimport TestNode from \"./TestNode.js\";\r\nimport CustomControls from \"./CustomControls.js\";\r\nimport \"./styles.css\";\r\nimport { GraphProvider } from \"./GraphContext.js\";\r\n\r\nconst flowKey = \"savedGraph\";\r\nconst nodeTypes = { primitiveNode: PrimitiveNode, booleanNode: BooleanNode };\r\nconst edgeTypes = { buttonEdge: ButtonEdge };\r\n\r\nconst initialNodes = [\r\n  {\r\n    id: `prim-0`,\r\n    type: \"primitiveNode\",\r\n    position: { x: -50, y: -150 },\r\n    data: { inputs: {}, sdf: \"\", children: [] },\r\n  },\r\n  {\r\n    id: `prim-1`,\r\n    type: \"primitiveNode\",\r\n    position: { x: -50, y: 200 },\r\n    data: { inputs: {}, sdf: \"\", children: [] },\r\n  },\r\n  {\r\n    id: `prim-2`,\r\n    type: \"primitiveNode\",\r\n    position: { x: -50, y: 550 },\r\n    data: { inputs: {}, sdf: \"\", children: [] },\r\n  },\r\n  {\r\n    id: `bool-0`,\r\n    type: \"booleanNode\",\r\n    position: { x: 200, y: 25 },\r\n    data: { inputs: {}, sdf: \"\", children: [] },\r\n  },\r\n  {\r\n    id: `bool-1`,\r\n    type: \"booleanNode\",\r\n    position: { x: 200, y: 325 },\r\n    data: { inputs: {}, sdf: \"\", children: [] },\r\n  },\r\n  {\r\n    id: `bool-2`,\r\n    type: \"booleanNode\",\r\n    position: { x: 450, y: 150 },\r\n    data: { inputs: {}, sdf: \"\", children: [] },\r\n  },\r\n];\r\n\r\nconst onInit = (reactFlowInstance) =>\r\n  console.log(\"flow loaded:\", reactFlowInstance);\r\n\r\nexport default function Graph() {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const [rfInstance, setRfInstance] = useState(null);\r\n  const [id, setId] = React.useState(3);\r\n\r\n  const updateNodeSdf = (id, newSdf, parent) => {\r\n    console.log(\"ACTUALIZADONDO SDF DE \" + id);\r\n    var nodesCopy = [...nodes];\r\n    var parent = nodesCopy.find((node) => node.id === id);\r\n    parent.data = {\r\n      ...parent.data,\r\n      sdf: newSdf,\r\n    };\r\n\r\n    for (var child of parent.data.children) {\r\n      for (var node of nodesCopy) {\r\n        if (node.id === child) {\r\n          var newInputs = node.data.inputs;\r\n          newInputs[`${id}`] = newSdf;\r\n\r\n          node.data = {\r\n            ...node.data,\r\n            inputs: newInputs,\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    setNodes(nodesCopy);\r\n  };\r\n\r\n  const removeChild = (parent, child) => {\r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === parent) {\r\n          console.log(`ELIMINANDO HIJO ${child} DE ${parent}`);\r\n\r\n          var newChildren = node.data.children;\r\n          newChildren = newChildren.filter(function (c) {\r\n            return c.id != child;\r\n          });\r\n\r\n          node.data = {\r\n            ...node.data,\r\n            children: newChildren,\r\n          };\r\n        }\r\n        if (node.id === child) {\r\n          console.log(`ACTUALIZANDO ${child}`);\r\n          var newInputs = node.data.inputs;\r\n          newInputs[`${parent}`] = \"\";\r\n          node.data = {\r\n            ...node.data,\r\n            inputs: newInputs,\r\n          };\r\n        }\r\n\r\n        onNodesChange([node]);\r\n        return node;\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeEdge = (edgeId) => {\r\n    console.log(\"WDGES: \");\r\n    console.log(edges);\r\n    const edge = edges.find((e) => e.id === edgeId);\r\n\r\n    var newEdges = edges.filter((edge) => {\r\n      console.log(edge.source);\r\n      return edge.id != edgeId;\r\n    });\r\n\r\n    setEdges(newEdges);\r\n    removeChild(edge.source, edge.target);\r\n  };\r\n\r\n  const sharedFunctions = {\r\n    updateNodeSdf,\r\n    removeEdge,\r\n  };\r\n\r\n  const onConnect = (params) => {\r\n    const sourceNode = nodes.find((n) => n.id === params.source);\r\n\r\n    // CREAMOS EDGE\r\n    setEdges((eds) =>\r\n      addEdge(\r\n        {\r\n          ...params,\r\n          type: \"buttonEdge\",\r\n          animated: true,\r\n          markerEnd: { type: MarkerType.Arrow, color: \"#000\" },\r\n        },\r\n        eds\r\n      )\r\n    );\r\n\r\n    // AÑADIMOS HIJO AL PADRE\r\n    var newChildren = sourceNode.data.children;\r\n    newChildren.push(params.target);\r\n\r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === params.source) {\r\n          console.log(`AÑADIENDO HIJO ${params.target} A ${params.source}`);\r\n\r\n          // var newChildren = node.data.children;\r\n          // console.log(typeof newChildren);\r\n          // console.log(newChildren);\r\n          // newChildren.push(params.target);\r\n          console.log(newChildren);\r\n          node.data = {\r\n            ...node.data,\r\n            children: newChildren,\r\n          };\r\n        }\r\n        if (node.id === params.target) {\r\n          console.log(`INICIALIZANDO ${params.source}`);\r\n          var newInputs = node.data.inputs;\r\n          newInputs[`${params.source}`] = sourceNode.data.sdf;\r\n          node.data = {\r\n            ...node.data,\r\n            inputs: newInputs,\r\n          };\r\n        }\r\n\r\n        onNodesChange([node]);\r\n        return node;\r\n      })\r\n    );\r\n\r\n    // INICIAMOS HIJO\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"NODOS ACTUALIZADOS\");\r\n    console.log(nodes);\r\n  }, [nodes]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"NUEVO EDGE:\");\r\n    console.log(edges);\r\n  }, [edges]);\r\n\r\n  const onSave = () => {\r\n    if (rfInstance) {\r\n      const flow = rfInstance.toObject();\r\n      localStorage.setItem(flowKey, JSON.stringify(flow));\r\n    }\r\n  };\r\n\r\n  const onLoad = async () => {\r\n    const flow = JSON.parse(localStorage.getItem(flowKey));\r\n\r\n    if (flow) {\r\n      console.log(\"FLOW\");\r\n      console.log(flow);\r\n      const { x = 0, y = 0, zoom = 1 } = flow.viewport;\r\n      setNodes(flow.nodes || []);\r\n      setEdges(flow.edges || []);\r\n    }\r\n  };\r\n\r\n  const newPrimitiveNode = (xPos = 0, yPos = 0) => {\r\n    setId(id + 1);\r\n    const nodeId = `node-${id}`;\r\n    return {\r\n      id: nodeId,\r\n      type: \"primitiveNode\",\r\n      position: { x: xPos, y: yPos },\r\n      data: {\r\n        inputs: {},\r\n        sdf: \"\",\r\n        children: [],\r\n      },\r\n    };\r\n  };\r\n\r\n  const newBooleanNode = (xPos = 0, yPos = 0) => {\r\n    setId(id + 1);\r\n    return {\r\n      id: `node-${id}`,\r\n      type: \"booleanNode\",\r\n      position: { x: xPos, y: yPos },\r\n      data: { inputs: {}, sdf: \"\", children: [] },\r\n    };\r\n  };\r\n\r\n  const handleKey = (e) => {\r\n    // SPACE BAR\r\n    if (e.key.toLowerCase() === \"p\") {\r\n      const node = newPrimitiveNode();\r\n      nodes.push(node);\r\n\r\n      onNodesChange([node]); // Para actualizar\r\n    } else if (e.key.toLowerCase() === \"b\") {\r\n      const node = newBooleanNode();\r\n      nodes.push(node);\r\n\r\n      onNodesChange([node]); // Para actualizar\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: \"100vh\" }} tabIndex=\"0\" onKeyDown={handleKey}>\r\n      <GraphProvider value={sharedFunctions}>\r\n        <ReactFlow\r\n          nodes={nodes}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          // onDisconnect={onDisconnect}\r\n\r\n          nodeTypes={nodeTypes}\r\n          edgeTypes={edgeTypes}\r\n          onInit={setRfInstance}\r\n          // onEdgeClick={(ev, edge) =>\r\n          //   setEdges(edges.filter((e) => e.id != edge.id))\r\n          // }\r\n          snapToGrid={true}\r\n          fitView\r\n        >\r\n          <Background color=\"#aaa\" gap={10} />\r\n          <CustomControls save={onSave} load={onLoad}/>\r\n        </ReactFlow>\r\n      </GraphProvider>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useContext} from 'react';\r\nimport { getBezierPath, getEdgeCenter } from 'react-flow-renderer';\r\nimport GraphContext from \"./GraphContext.js\";\r\n\r\nimport './styles.css';\r\n\r\nconst foreignObjectSize = 40;\r\n\r\nexport default function CustomEdge({\r\n  id,\r\n  sourceX,\r\n  sourceY,\r\n  targetX,\r\n  targetY,\r\n  sourcePosition,\r\n  targetPosition,\r\n  style = {},\r\n  data,\r\n}) {\r\n  const edgePath = getBezierPath({\r\n    sourceX,\r\n    sourceY,\r\n    sourcePosition,\r\n    targetX,\r\n    targetY,\r\n    targetPosition,\r\n  });\r\n  const [edgeCenterX, edgeCenterY] = getEdgeCenter({\r\n    sourceX,\r\n    sourceY,\r\n    targetX,\r\n    targetY,\r\n  });\r\n\r\n  const [showButton, setShowButton] = React.useState(false);\r\n  const sharedFunctions = useContext(GraphContext);\r\n\r\n  return (\r\n    <>\r\n      <path\r\n        id={id}\r\n        style={style}\r\n        className=\"react-flow__edge-path\"\r\n        d={edgePath}\r\n        \r\n      />\r\n      <foreignObject\r\n        width={foreignObjectSize}\r\n        height={foreignObjectSize}\r\n        x={edgeCenterX - foreignObjectSize / 2}\r\n        y={edgeCenterY - foreignObjectSize / 2}\r\n        \r\n        className=\"edgebutton-foreignobject\"\r\n        requiredExtensions=\"http://www.w3.org/1999/xhtml\"\r\n      >\r\n        {true ?\r\n          <body>\r\n            <button className=\"edgebutton\" onClick={() => {console.log(\"SI: \" + id); sharedFunctions.removeEdge(id)}}>\r\n              ×\r\n            </button>\r\n          </body> \r\n          : \r\n          null\r\n        }\r\n      </foreignObject>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\n\nimport {\n  Header,\n  Content,\n  Footer,\n  Navbar,\n  Nav,\n  Icon,\n  Panel,\n  Grid,\n  Row, Col,\n} from \"rsuite\";\n\nimport Graph from \"./Graph\";\nimport \"rsuite/dist/styles/rsuite-default.css\";\n\nimport \"./styles.css\";\nimport Shader from \"./Shader\";\nimport {fs} from \"./fragmentShaderMovable\";\n\nconst NavBarExample = () => {\n  return (\n    <Navbar appearance=\"inverse\">\n      <Navbar.Header>\n        <a className=\"navbar-brand logo\">3D Visualizer</a>\n      </Navbar.Header>\n      <Navbar.Body>\n        <Nav>\n          <Nav.Item eventKey=\"1\">Tab 1</Nav.Item>\n          <Nav.Item eventKey=\"2\">Tab 2</Nav.Item>\n          <Nav.Item eventKey=\"3\">Tab 3</Nav.Item>\n        </Nav>\n        <Nav pullRight>\n          <Nav.Item icon={<Icon icon=\"cog\" />}>Settings</Nav.Item>\n        </Nav>\n      </Navbar.Body>\n    </Navbar>\n  );\n};\n\n\nfunction MainContent(){ \n  return(\n    <>\n    <Grid fluid>\n      <Row>\n        <Col xs={6}>\n          <Shader \n            style={{height: \"100vh\"}}\n            shader={fs()} \n            uniforms={{ color: { type: \"3fv\", value: [1.0, 1.0, 0.0] } }}\n          />\n        </Col>\n        <Col xs={1}>\n          <div style={{borderRight: \"2px solid grey\",  height: \"100vh\"}} />\n        </Col>\n        <Col xs={17}>\n          {/* <ContextMenu/> */}\n          \n          <Graph/>\n        </Col>\n      </Row>\n      \n    </Grid>\n    </>\n  );\n}\n\nconst layoutStyles = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  height: \"100vh\"\n};\n\nexport default function App() {\n  return (\n    <div style={layoutStyles}>\n      <Header>\n        <NavBarExample />\n      </Header>\n      <Content style={{ flexGrow: 1 }}>\n        <MainContent />\n      </Content>\n      <Footer>\n        <Panel bordered>\n          <p>Daniel Zufrí Quesada</p>\n        </Panel>\n      </Footer>\n    </div>\n  );\n}\n","export const fs = (sdf) => {\r\n    return `\r\n    \r\n    // https://thebookofshaders.com/03/?lan=es\r\n  // https://thebookofshaders.com/03/\r\n  // http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#putting-it-all-together\r\n  // https://www.shadertoy.com/view/llt3R4\r\n  \r\n  // camera\r\n  // https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-ray-tracing/how-does-it-work\r\n  // http://www.codinglabs.net/article_world_view_projection_matrix.aspx\r\n  // https://iopscience.iop.org/article/10.1088/0031-9155/52/12/006/meta\r\n  // https://www.ingebook.com/ib/NPcd/IB_BooksVis?cod_primaria=1000187&codigo_libro=6575\r\n  \r\n  #ifdef GL_ES\r\n  precision mediump float;\r\n  #endif\r\n  \r\n  const int AA = 3;\r\n  const int MAX_MARCHING_STEPS = 255;\r\n  const float EPSILON = 0.0001;\r\n  const float MIN_DIST = 0.0;\r\n  const float MAX_DIST = 100.0;\r\n\r\n  uniform bool leftClick;\r\n\r\n  struct Material\r\n  {\r\n      vec3 specular;\r\n      vec3 diffuse;\r\n      vec3 ambient;\r\n      float smoothness;\r\n  };\r\n  \r\n  float sdfCube(vec3 p, vec3 dim){\r\n      vec3 d = abs(p) - dim;\r\n  \r\n      float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\r\n      float outsideDistance = length(max(d, 0.0));\r\n      \r\n      return insideDistance + outsideDistance;\r\n  }\r\n  \r\n  float map( in vec3 pos )\r\n  {\r\n      return  sdfCube(pos, vec3(1.0));\r\n  }\r\n  \r\n  \r\n  vec3 rayDirection(vec2 size, vec2 fragCoord) {\r\n      const float fov = 45.0;\r\n  \r\n      vec2 xy = fragCoord - size / 2.0;\r\n      float z = size.y / tan(radians(fov) / 2.0);\r\n  \r\n      return normalize(vec3(xy, -z));\r\n  }\r\n  \r\n  vec3 normal(vec3 p) {\r\n      return normalize(vec3(\r\n          map(vec3(p.x + EPSILON, p.y, p.z)) - map(vec3(p.x - EPSILON, p.y, p.z)),\r\n          map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\r\n          map(vec3(p.x, p.y, p.z  + EPSILON)) - map(vec3(p.x, p.y, p.z - EPSILON))\r\n      ));\r\n  }\r\n  \r\n  vec3 lighting(vec3 p, vec3 n, vec3 eye, Material mat){\r\n      vec3 ambient = vec3(0.5);\r\n  \r\n      vec3 lights_pos[2];\r\n      lights_pos[0] = vec3(4.0, 2.0, 2.0);\r\n      lights_pos[1] = vec3(-4.0, -2.0, -2.0);\r\n  \r\n      vec3 lights_color[2];\r\n      lights_color[0] = vec3(1.0, 1.0, 1.0);\r\n      lights_color[1] = vec3(1.0, 1.0, 1.0);\r\n  \r\n      vec3 Ip = mat.ambient * ambient;\r\n  \r\n      for(int i=0; i<2; i++){\r\n          vec3 Lm = normalize(lights_pos[i] - p);\r\n          vec3 Rm = normalize(2.0*(dot(Lm,n))*n - Lm);    // reflect(-Lm, n)\r\n          vec3 V  = normalize(eye - p);\r\n  \r\n          float LN = dot(Lm, n);\r\n          float RV = dot(Rm, V);\r\n  \r\n          if (LN < 0.0)   // Light not visible\r\n              Ip += vec3(0.0, 0.0, 0.0);\r\n          else if (RV < 0.0)  // opposite direction as viewer, apply only diffuse\r\n              Ip += lights_color[i] * (mat.diffuse * LN);\r\n          else\r\n              Ip += lights_color[i] * (mat.diffuse*LN + mat.specular*pow(RV, mat.smoothness));\r\n      }\r\n  \r\n      return Ip;\r\n  }\r\n  \r\n  mat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\r\n      // Based on gluLookAt man page\r\n      vec3 f = normalize(center - eye);\r\n      vec3 s = normalize(cross(f, up));\r\n      vec3 u = cross(s, f);\r\n      return mat4(\r\n          vec4(s, 0.0),\r\n          vec4(u, 0.0),\r\n          vec4(-f, 0.0),\r\n          vec4(0.0, 0.0, 0.0, 1)\r\n      );\r\n  }\r\n  \r\n  void main() {\r\n      Material mat_red = Material(\r\n          vec3(1.0, 1.0, 1.0),    // specular\r\n          vec3(1.0, 1.0,0.0),        // diffuse\r\n          vec3(0.2),              // ambient\r\n          10.0                    // shiness\r\n      );\r\n      vec3 cameraPos                    = vec3(10.0, 1.0, 10.0);\r\n      const vec3 backGroundColor  = vec3(0.7);\r\n      vec2 mouseStartPos, mouseCurrPos;\r\n      vec2 mouse = iMouse.xy / iResolution.xy;\r\n\r\n      if(iMouse.z > 0.0){\r\n        \r\n        vec3 cameraAt \t= vec3(0.0);\r\n\r\n        float angleX = 6.28 * mouse.x;\r\n        float angleY =  mouse.y * 6.28 ;\r\n        cameraPos\t= 12.0 * (vec3(sin(angleX)*cos(angleY), sin(angleY), cos(angleX)*cos(angleY)));\r\n      }\r\n\r\n      for( int m=0; m<AA; m++ ){\r\n          for( int n=0; n<AA; n++ ){\r\n              float depth = MIN_DIST;\r\n  \r\n              // create view ray\r\n              vec3 ray = rayDirection(iResolution.xy, gl_FragCoord.xy);\r\n              mat4 viewToWorld = viewMatrix(cameraPos, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\r\n              vec3 worldDir = (viewToWorld * vec4(ray, 0.0)).xyz;\r\n  \r\n              // raytracing\r\n              for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\r\n                  float dist = map(cameraPos + depth * worldDir);\r\n                  if (dist < EPSILON) {\r\n                      vec3 p = cameraPos + depth * worldDir;\r\n                      vec3 n = normal(p);\r\n  \r\n                      gl_FragColor = vec4(lighting(p, n, cameraPos, mat_red), 1.0);\r\n                      return;\r\n                  }\r\n  \r\n                  depth += dist;\r\n  \r\n                  if (depth >= MAX_DIST) {\r\n                      gl_FragColor = vec4(backGroundColor.xyz, 1.0);\r\n                      return;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n  }\r\n\r\n  \r\n  `;\r\n  };\r\n  ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n)\n"],"sourceRoot":""}
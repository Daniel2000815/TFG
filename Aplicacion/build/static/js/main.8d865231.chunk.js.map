{"version":3,"sources":["Shader.js","ShaderNode.js","Graph.js","fragmentShader.js","ButtonEdge.js","App.js","fragmentShaderMovable.js","index.js"],"names":["Shader","props","useEffect","shader","uniforms","style","ratio","fs","key","InputHandle","type","position","id","className","isConnectable","onConnect","params","console","log","OutputHandle","initialNodes","x","y","data","value","initialEdges","nodeTypes","shaderNode","useState","color","setColor","useCallback","evt","target","Button","onClick","Math","random","appearance","margin","block","edgeTypes","buttonEdge","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","edgePath","markerEnd","getBezierPath","getEdgeCenter","edgeCenterX","edgeCenterY","React","showButton","setShowButton","d","width","height","foreignObjectSize","onMouseEnter","onMouseLeave","requiredExtensions","onRemoveEdge","Graph","useNodesState","nodes","onNodesChange","useEdgesState","edges","setEdges","onEdgesChange","splice","eds","addEdge","animated","onDisconnect","connection","MarkerType","ArrowClosed","snapToGrid","fitView","Placeholder","Paragraph","NavBarExample","Navbar","Header","Body","Nav","Item","eventKey","pullRight","icon","Icon","MainContent","Grid","fluid","Row","Col","xs","borderRight","layoutStyles","display","flexDirection","App","Content","flexGrow","Footer","Panel","bordered","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8d865231.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport Ratio from \"react-ratio\";\r\nimport ShadertoyReact from \"shadertoy-react\";\r\n\r\nexport default function Shader(props) {\r\n  useEffect(() => {}, [props.shader, props.uniforms]);\r\n\r\n  return (\r\n    <div style={props.style}>\r\n      <Ratio ratio={1}>\r\n        <ShadertoyReact\r\n          fs={props.shader}\r\n          key={props.shader}\r\n          uniforms={props.uniforms}\r\n        />\r\n      </Ratio>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useCallback, useState } from \"react\";\r\nimport {Handle} from \"react-flow-renderer\";\r\nimport { Button } from \"rsuite\";\r\nimport Shader from \"./Shader.js\";\r\nimport { fs } from \"./fragmentShader.js\";\r\n\r\nfunction InputHandle(){\r\n   return ( \r\n    <Handle\r\n        type=\"target\"\r\n        position=\"left\"\r\n        id=\"a\"\r\n        className=\"custom-handle\"\r\n        isConnectable={true}\r\n        onConnect={(params) => console.log('handle onConnect', params)}\r\n    />\r\n   );\r\n}\r\n\r\nfunction OutputHandle(){\r\n    return ( \r\n     <Handle\r\n         type=\"source\"\r\n         position=\"right\"\r\n         id=\"a\"\r\n         className=\"custom-handle\"\r\n         isConnectable={true}\r\n     />\r\n    );\r\n}\r\n\r\nexport default function ShaderNode({ data }) {\r\n    const [color, setColor] = useState([1.0, 0.0, 0.0]);\r\n  \r\n    const onChange = useCallback((evt) => {\r\n      console.log(evt.target.value);\r\n    }, []);\r\n  \r\n    return (\r\n      <div className=\"custom-node\">\r\n        <div className=\"custom-node-header\">Ejemplo:</div>\r\n        <div>\r\n          <InputHandle/>\r\n        </div>\r\n        <div>\r\n          <OutputHandle/>\r\n        </div>\r\n        <Button\r\n          onClick={() => setColor([Math.random(), Math.random(), Math.random()])}\r\n          appearance=\"primary\"\r\n        >\r\n          Change Color\r\n        </Button>\r\n        <Shader\r\n          shader={fs()}\r\n          uniforms={{ color: { type: \"3fv\", value: color } }}\r\n          style={{ margin: \"10px\" }}\r\n        />\r\n          <Button appearance=\"primary\" block>\r\n            a\r\n          </Button>\r\n      </div>\r\n    );\r\n  }","import React from \"react\";\r\nimport { useCallback, useState } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  applyEdgeChanges,\r\n  applyNodeChanges,\r\n  MarkerType,\r\n  useNodesState,\r\n  useEdgesState,\r\n} from \"react-flow-renderer\";\r\nimport ButtonEdge from './ButtonEdge.js';\r\nimport ShaderNode from \"./ShaderNode.js\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst initialNodes = [\r\n  {\r\n    id: \"node-1\",\r\n    type: \"shaderNode\",\r\n    position: { x: 0, y: 0 },\r\n    data: { value: 123 }\r\n  },\r\n  {\r\n    id: \"node-2\",\r\n    type: \"shaderNode\",\r\n    position: { x: 250, y: 0 },\r\n    data: { value: 1 }\r\n  },\r\n  {\r\n    id: \"node-3\",\r\n    type: \"shaderNode\",\r\n    position: { x: 250, y: -300},\r\n    data: { value: 1 }\r\n  }\r\n];\r\n\r\nconst initialEdges = [\r\n\r\n];\r\n\r\nconst nodeTypes = { shaderNode: ShaderNode };\r\nconst edgeTypes = { buttonEdge: ButtonEdge };\r\n\r\nexport default function Graph() {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n\r\n  const onRemoveEdge = (id) =>{\r\n    setEdges(edges.splice(id, 1));\r\n  }\r\n\r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge({ ...params, animated:true, markerEnd: { type: 'arrow', color: '#f00' }, type: 'buttonEdge', data: {onRemoveEdge: onRemoveEdge} }, eds)),\r\n    []\r\n  );\r\n\r\n  const onDisconnect = useCallback(\r\n    (connection) => {\r\n      console.log(connection);\r\n      setEdges((eds) => addEdge({...connection, animated: true, markerEnd:{\r\n        type: MarkerType.ArrowClosed,\r\n      }}, eds))\r\n    },\r\n    [setEdges]\r\n  );\r\n\r\n  return (\r\n    <div style={{height: \"100vh\"}}>\r\n      <ReactFlow\r\n        nodes={nodes}\r\n        edges={edges}\r\n\r\n        onNodesChange={onNodesChange}\r\n        onEdgesChange={onEdgesChange}\r\n\r\n        onConnect={onConnect}\r\n        onDisconnect={onDisconnect}\r\n\r\n        nodeTypes={nodeTypes}\r\n        edgeTypes={edgeTypes}\r\n\r\n        snapToGrid={true}\r\n        fitView\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","export const fs = (sdf) => {\r\n  return `\r\n  // https://thebookofshaders.com/03/?lan=es\r\n// https://thebookofshaders.com/03/\r\n// http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#putting-it-all-together\r\n// https://www.shadertoy.com/view/llt3R4\r\n\r\n// camera\r\n// https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-ray-tracing/how-does-it-work\r\n// http://www.codinglabs.net/article_world_view_projection_matrix.aspx\r\n// https://iopscience.iop.org/article/10.1088/0031-9155/52/12/006/meta\r\n// https://www.ingebook.com/ib/NPcd/IB_BooksVis?cod_primaria=1000187&codigo_libro=6575\r\n\r\n#ifdef GL_ES\r\nprecision mediump float;\r\n#endif\r\n\r\nconst int AA = 3;\r\nconst int MAX_MARCHING_STEPS = 255;\r\nconst float EPSILON = 0.0001;\r\nconst float MIN_DIST = 0.0;\r\nconst float MAX_DIST = 100.0;\r\n\r\n\r\nstruct Material\r\n{\r\n    vec3 specular;\r\n    vec3 diffuse;\r\n    vec3 ambient;\r\n    float smoothness;\r\n};\r\n\r\nfloat sdfCube(vec3 p, vec3 dim){\r\n    vec3 d = abs(p) - dim;\r\n\r\n    float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\r\n    float outsideDistance = length(max(d, 0.0));\r\n    \r\n    return insideDistance + outsideDistance;\r\n}\r\n\r\nfloat map( in vec3 pos )\r\n{\r\n    return  sdfCube(pos, vec3(1.0));\r\n}\r\n\r\n\r\nvec3 rayDirection(vec2 size, vec2 fragCoord) {\r\n    const float fov = 45.0;\r\n\r\n    vec2 xy = fragCoord - size / 2.0;\r\n    float z = size.y / tan(radians(fov) / 2.0);\r\n\r\n    return normalize(vec3(xy, -z));\r\n}\r\n\r\nvec3 normal(vec3 p) {\r\n    return normalize(vec3(\r\n        map(vec3(p.x + EPSILON, p.y, p.z)) - map(vec3(p.x - EPSILON, p.y, p.z)),\r\n        map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\r\n        map(vec3(p.x, p.y, p.z  + EPSILON)) - map(vec3(p.x, p.y, p.z - EPSILON))\r\n    ));\r\n}\r\n\r\nvec3 lighting(vec3 p, vec3 n, vec3 eye, Material mat){\r\n    vec3 ambient = vec3(0.5);\r\n\r\n    vec3 lights_pos[2];\r\n    lights_pos[0] = vec3(4.0, 2.0, 2.0);\r\n    lights_pos[1] = vec3(-4.0, -2.0, -2.0);\r\n\r\n    vec3 lights_color[2];\r\n    lights_color[0] = vec3(1.0, 1.0, 1.0);\r\n    lights_color[1] = vec3(1.0, 1.0, 1.0);\r\n\r\n    vec3 Ip = mat.ambient * ambient;\r\n\r\n    for(int i=0; i<2; i++){\r\n        vec3 Lm = normalize(lights_pos[i] - p);\r\n        vec3 Rm = normalize(2.0*(dot(Lm,n))*n - Lm);    // reflect(-Lm, n)\r\n        vec3 V  = normalize(eye - p);\r\n\r\n        float LN = dot(Lm, n);\r\n        float RV = dot(Rm, V);\r\n\r\n        if (LN < 0.0)   // Light not visible\r\n            Ip += vec3(0.0, 0.0, 0.0);\r\n        else if (RV < 0.0)  // opposite direction as viewer, apply only diffuse\r\n            Ip += lights_color[i] * (mat.diffuse * LN);\r\n        else\r\n            Ip += lights_color[i] * (mat.diffuse*LN + mat.specular*pow(RV, mat.smoothness));\r\n    }\r\n\r\n    return Ip;\r\n}\r\n\r\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\r\n    // Based on gluLookAt man page\r\n    vec3 f = normalize(center - eye);\r\n    vec3 s = normalize(cross(f, up));\r\n    vec3 u = cross(s, f);\r\n    return mat4(\r\n        vec4(s, 0.0),\r\n        vec4(u, 0.0),\r\n        vec4(-f, 0.0),\r\n        vec4(0.0, 0.0, 0.0, 1)\r\n    );\r\n}\r\n\r\nvoid main() {\r\n    Material mat_red = Material(\r\n        vec3(1.0, 1.0, 1.0),    // specular\r\n        vec3(color.xyz),        // diffuse\r\n        vec3(0.2),              // ambient\r\n        10.0                    // shiness\r\n    );\r\n    vec3 eye                    = vec3(10.0*cos(iTime), 1.0, 10.0*sin(iTime));\r\n    const vec3 backGroundColor  = vec3(0.7);\r\n\r\n    for( int m=0; m<AA; m++ ){\r\n        for( int n=0; n<AA; n++ ){\r\n            float depth = MIN_DIST;\r\n\r\n            // create view ray\r\n            vec3 ray = rayDirection(iResolution.xy, gl_FragCoord.xy);\r\n            mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\r\n            vec3 worldDir = (viewToWorld * vec4(ray, 0.0)).xyz;\r\n\r\n            // raytracing\r\n            for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\r\n                float dist = map(eye + depth * worldDir);\r\n                if (dist < EPSILON) {\r\n                    vec3 p = eye + depth * worldDir;\r\n                    vec3 n = normal(p);\r\n\r\n                    gl_FragColor = vec4(lighting(p, n, eye, mat_red), 1.0);\r\n                    return;\r\n                }\r\n\r\n                depth += dist;\r\n\r\n                if (depth >= MAX_DIST) {\r\n                    gl_FragColor = vec4(backGroundColor.xyz, 1.0);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n`;\r\n};\r\n","import React from 'react';\r\nimport { getBezierPath, getEdgeCenter, getMarkerEnd } from 'react-flow-renderer';\r\n\r\nimport './styles.css';\r\n\r\nconst foreignObjectSize = 40;\r\n\r\nexport default function CustomEdge({\r\n  id,\r\n  sourceX,\r\n  sourceY,\r\n  targetX,\r\n  targetY,\r\n  sourcePosition,\r\n  targetPosition,\r\n  style = {},\r\n  data,\r\n  markerEnd,\r\n}) {\r\n  const edgePath = getBezierPath({\r\n    sourceX,\r\n    sourceY,\r\n    sourcePosition,\r\n    targetX,\r\n    targetY,\r\n    targetPosition,\r\n  });\r\n  const [edgeCenterX, edgeCenterY] = getEdgeCenter({\r\n    sourceX,\r\n    sourceY,\r\n    targetX,\r\n    targetY,\r\n  });\r\n\r\n  const [showButton, setShowButton] = React.useState(false);\r\n\r\n  return (\r\n    <>\r\n      <path\r\n        id={id}\r\n        style={style}\r\n        className=\"react-flow__edge-path\"\r\n        d={edgePath}\r\n        \r\n      />\r\n      <foreignObject\r\n        width={foreignObjectSize}\r\n        height={foreignObjectSize}\r\n        x={edgeCenterX - foreignObjectSize / 2}\r\n        y={edgeCenterY - foreignObjectSize / 2}\r\n        onMouseEnter={()=>setShowButton(true)}\r\n        onMouseLeave={()=>setShowButton(false)}\r\n        className=\"edgebutton-foreignobject\"\r\n        requiredExtensions=\"http://www.w3.org/1999/xhtml\"\r\n      >\r\n        {showButton ?\r\n          <body>\r\n            <button className=\"edgebutton\" onClick={() => data.onRemoveEdge(id)}>\r\n              ×\r\n            </button>\r\n          </body> \r\n          : \r\n          null\r\n        }\r\n      </foreignObject>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\n\nimport {\n  Header,\n  Content,\n  Footer,\n  Navbar,\n  Nav,\n  Icon,\n  Placeholder,\n  Panel,\n  Grid,\n  Row, Col,\n  Divider\n\n} from \"rsuite\";\n\nimport Graph from \"./Graph\";\nimport \"rsuite/dist/styles/rsuite-default.css\";\n\nimport \"./styles.css\";\nimport Shader from \"./Shader\";\nimport {fs} from \"./fragmentShaderMovable\";\n\nconst { Paragraph } = Placeholder;\n\nconst NavBarExample = () => {\n  return (\n    <Navbar appearance=\"inverse\">\n      <Navbar.Header>\n        <a className=\"navbar-brand logo\">3D Visualizer</a>\n      </Navbar.Header>\n      <Navbar.Body>\n        <Nav>\n          <Nav.Item eventKey=\"1\">Tab 1</Nav.Item>\n          <Nav.Item eventKey=\"2\">Tab 2</Nav.Item>\n          <Nav.Item eventKey=\"3\">Tab 3</Nav.Item>\n        </Nav>\n        <Nav pullRight>\n          <Nav.Item icon={<Icon icon=\"cog\" />}>Settings</Nav.Item>\n        </Nav>\n      </Navbar.Body>\n    </Navbar>\n  );\n};\n\nconst stepsStyles = {\n  width: \"200px\",\n  display: \"inline-table\",\n  verticalAlign: \"top\"\n};\n\nconst StepsExample = () => (\n  <div>\n    <Graph />\n  </div>\n);\n\nfunction MainContent(){ \n  return(\n    <>\n    <Grid fluid>\n      <Row>\n        <Col xs={6}>\n          <Shader \n            style={{height: \"100vh\"}}\n            shader={fs()} \n            uniforms={{ color: { type: \"3fv\", value: [1.0, 1.0, 0.0] } }}\n          />\n        </Col>\n        <Col xs={1}>\n          <div style={{borderRight: \"2px solid grey\",  height: \"100vh\"}} />\n        </Col>\n        <Col xs={17}>\n          <Graph />\n        </Col>\n      </Row>\n      \n    </Grid>\n    </>\n  );\n}\n\nconst layoutStyles = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  height: \"100vh\"\n};\n\nexport default function App() {\n  return (\n    <div style={layoutStyles}>\n      <Header>\n        <NavBarExample />\n      </Header>\n      <Content style={{ flexGrow: 1 }}>\n        <MainContent />\n      </Content>\n      <Footer>\n        <Panel bordered>\n          <p>Daniel Zufrí Quesada</p>\n        </Panel>\n      </Footer>\n    </div>\n  );\n}\n","export const fs = (sdf) => {\r\n    return `\r\n    \r\n    // https://thebookofshaders.com/03/?lan=es\r\n  // https://thebookofshaders.com/03/\r\n  // http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#putting-it-all-together\r\n  // https://www.shadertoy.com/view/llt3R4\r\n  \r\n  // camera\r\n  // https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-ray-tracing/how-does-it-work\r\n  // http://www.codinglabs.net/article_world_view_projection_matrix.aspx\r\n  // https://iopscience.iop.org/article/10.1088/0031-9155/52/12/006/meta\r\n  // https://www.ingebook.com/ib/NPcd/IB_BooksVis?cod_primaria=1000187&codigo_libro=6575\r\n  \r\n  #ifdef GL_ES\r\n  precision mediump float;\r\n  #endif\r\n  \r\n  const int AA = 3;\r\n  const int MAX_MARCHING_STEPS = 255;\r\n  const float EPSILON = 0.0001;\r\n  const float MIN_DIST = 0.0;\r\n  const float MAX_DIST = 100.0;\r\n\r\n  uniform bool leftClick;\r\n\r\n  struct Material\r\n  {\r\n      vec3 specular;\r\n      vec3 diffuse;\r\n      vec3 ambient;\r\n      float smoothness;\r\n  };\r\n  \r\n  float sdfCube(vec3 p, vec3 dim){\r\n      vec3 d = abs(p) - dim;\r\n  \r\n      float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\r\n      float outsideDistance = length(max(d, 0.0));\r\n      \r\n      return insideDistance + outsideDistance;\r\n  }\r\n  \r\n  float map( in vec3 pos )\r\n  {\r\n      return  sdfCube(pos, vec3(1.0));\r\n  }\r\n  \r\n  \r\n  vec3 rayDirection(vec2 size, vec2 fragCoord) {\r\n      const float fov = 45.0;\r\n  \r\n      vec2 xy = fragCoord - size / 2.0;\r\n      float z = size.y / tan(radians(fov) / 2.0);\r\n  \r\n      return normalize(vec3(xy, -z));\r\n  }\r\n  \r\n  vec3 normal(vec3 p) {\r\n      return normalize(vec3(\r\n          map(vec3(p.x + EPSILON, p.y, p.z)) - map(vec3(p.x - EPSILON, p.y, p.z)),\r\n          map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\r\n          map(vec3(p.x, p.y, p.z  + EPSILON)) - map(vec3(p.x, p.y, p.z - EPSILON))\r\n      ));\r\n  }\r\n  \r\n  vec3 lighting(vec3 p, vec3 n, vec3 eye, Material mat){\r\n      vec3 ambient = vec3(0.5);\r\n  \r\n      vec3 lights_pos[2];\r\n      lights_pos[0] = vec3(4.0, 2.0, 2.0);\r\n      lights_pos[1] = vec3(-4.0, -2.0, -2.0);\r\n  \r\n      vec3 lights_color[2];\r\n      lights_color[0] = vec3(1.0, 1.0, 1.0);\r\n      lights_color[1] = vec3(1.0, 1.0, 1.0);\r\n  \r\n      vec3 Ip = mat.ambient * ambient;\r\n  \r\n      for(int i=0; i<2; i++){\r\n          vec3 Lm = normalize(lights_pos[i] - p);\r\n          vec3 Rm = normalize(2.0*(dot(Lm,n))*n - Lm);    // reflect(-Lm, n)\r\n          vec3 V  = normalize(eye - p);\r\n  \r\n          float LN = dot(Lm, n);\r\n          float RV = dot(Rm, V);\r\n  \r\n          if (LN < 0.0)   // Light not visible\r\n              Ip += vec3(0.0, 0.0, 0.0);\r\n          else if (RV < 0.0)  // opposite direction as viewer, apply only diffuse\r\n              Ip += lights_color[i] * (mat.diffuse * LN);\r\n          else\r\n              Ip += lights_color[i] * (mat.diffuse*LN + mat.specular*pow(RV, mat.smoothness));\r\n      }\r\n  \r\n      return Ip;\r\n  }\r\n  \r\n  mat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\r\n      // Based on gluLookAt man page\r\n      vec3 f = normalize(center - eye);\r\n      vec3 s = normalize(cross(f, up));\r\n      vec3 u = cross(s, f);\r\n      return mat4(\r\n          vec4(s, 0.0),\r\n          vec4(u, 0.0),\r\n          vec4(-f, 0.0),\r\n          vec4(0.0, 0.0, 0.0, 1)\r\n      );\r\n  }\r\n  \r\n  void main() {\r\n      Material mat_red = Material(\r\n          vec3(1.0, 1.0, 1.0),    // specular\r\n          vec3(1.0, 1.0,0.0),        // diffuse\r\n          vec3(0.2),              // ambient\r\n          10.0                    // shiness\r\n      );\r\n      vec3 cameraPos                    = vec3(10.0, 1.0, 10.0);\r\n      const vec3 backGroundColor  = vec3(0.7);\r\n      vec2 mouseStartPos, mouseCurrPos;\r\n      vec2 mouse = iMouse.xy / iResolution.xy;\r\n\r\n      if(iMouse.z > 0.0){\r\n        \r\n        vec3 cameraAt \t= vec3(0.0);\r\n\r\n        float angleX = 6.28 * mouse.x;\r\n        float angleY =  mouse.y * 6.28 ;\r\n        cameraPos\t= 12.0 * (vec3(sin(angleX)*cos(angleY), sin(angleY), cos(angleX)*cos(angleY)));\r\n      }\r\n\r\n      for( int m=0; m<AA; m++ ){\r\n          for( int n=0; n<AA; n++ ){\r\n              float depth = MIN_DIST;\r\n  \r\n              // create view ray\r\n              vec3 ray = rayDirection(iResolution.xy, gl_FragCoord.xy);\r\n              mat4 viewToWorld = viewMatrix(cameraPos, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\r\n              vec3 worldDir = (viewToWorld * vec4(ray, 0.0)).xyz;\r\n  \r\n              // raytracing\r\n              for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\r\n                  float dist = map(cameraPos + depth * worldDir);\r\n                  if (dist < EPSILON) {\r\n                      vec3 p = cameraPos + depth * worldDir;\r\n                      vec3 n = normal(p);\r\n  \r\n                      gl_FragColor = vec4(lighting(p, n, cameraPos, mat_red), 1.0);\r\n                      return;\r\n                  }\r\n  \r\n                  depth += dist;\r\n  \r\n                  if (depth >= MAX_DIST) {\r\n                      gl_FragColor = vec4(backGroundColor.xyz, 1.0);\r\n                      return;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n  }\r\n\r\n  \r\n  `;\r\n  };\r\n  ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n)\n"],"sourceRoot":""}